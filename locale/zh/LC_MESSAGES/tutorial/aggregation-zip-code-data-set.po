# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
msgid ""
"The examples in this document use the ``zipcode`` collection. This "
"collection is available at: `media.mongodb.org/zips.json "
"<http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load "
"this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
msgid "Each document in the ``zipcode`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
msgid ""
"The ``city`` field holds the city name. A city can have more than one zip "
"code associated with it as different sections of the city can each have a "
"different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
msgid ""
"All of the following examples use the :method:`aggregate() "
"<db.collection.aggregate()>` helper in the :program:`mongo` shell. "
":method:`aggregate() <db.collection.aggregate()>` provides a wrapper around "
"the :dbcommand:`aggregate` database command. See the documentation for your "
":doc:`driver </applications/drivers>` for a more idiomatic interface for "
"data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:50
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:52
msgid ""
"To return all states with a population greater than 10 million, use the "
"following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
msgid ""
"Aggregations operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` "
"connects a number of :ref:`pipeline <aggregation-pipeline>` operators, which"
" define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:69
#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
msgid ""
"In this example, the pipeline passes all documents in the ``zipcodes`` "
"collection through the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:72
msgid ""
"the :pipeline:`$group` operator collects all documents and creates documents"
" for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:75
msgid ""
"These new per-state documents have one field in addition to the ``_id`` "
"field: ``totalPop`` which is a generated field using the :group:`$sum` "
"operation to calculate the total value of all ``pop`` fields in the source "
"documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:80
msgid ""
"After the :pipeline:`$group` operation the documents in the pipeline "
"resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:90
msgid ""
"the :pipeline:`$match` operation filters these documents so that the only "
"documents that remain are those where the value of ``totalPop`` is greater "
"than or equal to 10 million."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:94
msgid ""
"The :pipeline:`$match` operation does not alter the documents, which have "
"the same format as the documents output by :pipeline:`$group`."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
msgid "The equivalent :term:`SQL` for this operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:110
msgid ""
"To return the average populations for cities in each state, use the "
"following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:120
msgid ""
"Aggregations operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>`  "
"connects a number of :ref:`pipeline <aggregation-pipeline>` operators that "
"define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:130
msgid ""
"the :pipeline:`$group` operator collects all documents and creates new "
"documents for every combination of the ``city`` and ``state`` fields in the "
"source document. A city can have more than one zip code associated with it "
"as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:136
msgid ""
"After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:149
msgid ""
"the second :pipeline:`$group` operator collects documents by the ``state`` "
"field and use the :group:`$avg` expression to compute a value for the "
"``avgCityPop`` field."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:153
msgid "The final output of this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:172
msgid ""
"To return the smallest and largest cities by population for each state, use "
"the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:197
msgid ""
"Aggregation operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` "
"combines a number of :ref:`pipeline <aggregation-pipeline>` operators that "
"define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:204
msgid ""
"All documents from the ``zipcodes`` collection pass into the pipeline, which"
" consists of the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:207
msgid ""
"the :pipeline:`$group` operator collects all documents and creates new "
"documents for every combination of the ``city`` and ``state`` fields in the "
"source documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:211
msgid ""
"By specifying the value of ``_id`` as a sub-document that contains both "
"fields, the operation preserves the ``state`` field for use later in the "
"pipeline. The documents produced by this stage of the pipeline have a second"
" field, ``pop``, which uses the :group:`$sum` operator to provide the total "
"of the ``pop`` fields in the source document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:218
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:230
msgid ""
":pipeline:`$sort` operator orders the documents in the pipeline based on the"
" value of the ``pop`` field from largest to smallest. This operation does "
"not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:234
msgid ""
"the second :pipeline:`$group` operator collects the documents in the "
"pipeline by the ``state`` field, which is a field inside the nested ``_id`` "
"document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:238
msgid ""
"Within each per-state document this :pipeline:`$group` operator specifies "
"four fields: Using the :group:`$last` expression, the :pipeline:`$group` "
"operator creates the ``biggestcity`` and ``biggestpop`` fields that store "
"the city with the largest population and that population. Using the "
":group:`$first` expression, the :pipeline:`$group` operator creates the "
"``smallestcity`` and ``smallestpop`` fields that store the city with the "
"smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
msgid "The documents, at this stage in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
msgid ""
"The final operation is :pipeline:`$project`, which renames the ``_id`` field"
" to ``state`` and moves the ``biggestCity``, ``biggestPop``, "
"``smallestCity``, and ``smallestPop`` into ``biggestCity`` and "
"``smallestCity`` sub-documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
msgid "The output of this aggregation operation is:"
msgstr ""
