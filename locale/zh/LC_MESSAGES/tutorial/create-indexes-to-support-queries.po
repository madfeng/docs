# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/create-indexes-to-support-queries.txt:5
msgid "Create Indexes to Support Your Queries"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:9
msgid ""
"An index supports a query when the index contains all the fields scanned by "
"the query. The query scans the index and not the collection. Creating "
"indexes that support queries results in greatly increased query performance."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:13
msgid ""
"This document describes strategies for creating indexes that support "
"queries."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:16
msgid "Create a Single-Key Index if All Queries Use the Same, Single Key"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:18
msgid ""
"If you only ever query on a single key in a given collection, then you need "
"to create just one single-key index for that collection. For example, you "
"might create an index on ``category`` in the ``product`` collection:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:29
msgid "Create Compound Indexes to Support Several Different Queries"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:31
msgid ""
"If you sometimes query on only one key and at other times query on that key "
"combined with a second key, then creating a compound index is more efficient"
" than creating a single-key index. MongoDB will use the compound index for "
"both queries. For example, you might create an index on both ``category`` "
"and ``item``."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:41
msgid ""
"This allows you both options. You can query on just ``category``, and you "
"also can query on ``category`` combined with ``item``. A single "
":ref:`compound index <index-type-compound>` on multiple fields can support "
"all the queries that search a \"prefix\" subset of those fields."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:0
#: ../source/tutorial/create-indexes-to-support-queries.txt:0
msgid "Example"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:48
msgid "The following index on a collection:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:54
msgid "Can support queries that the following indexes support:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:61
msgid ""
"There are some situations where the prefix indexes may offer better query "
"performance: for example if ``z`` is a large array."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:64
msgid ""
"The ``{ x: 1, y: 1, z: 1 }`` index can also support many of the same queries"
" as the following index:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:71
msgid ""
"Also, ``{ x: 1, z: 1 }`` has an additional use. Given the following query:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:78
msgid ""
"The ``{ x: 1, z: 1 }`` index supports both the query and the sort operation,"
" while the ``{ x: 1, y: 1, z: 1 }`` index only supports the query. For more "
"information on sorting, see :ref:`sorting-with-indexes`."
msgstr ""

#: ../source/includes/fact-index-intersection-vs-compound-indexes.rst:1
msgid ""
"Starting in version 2.6, MongoDB can use :doc:`index intersection </core"
"/index-intersection>` to fulfill queries. The choice between creating "
"compound indexes that support your queries or relying on index intersection "
"depends on the specifics of your system. See :ref:`index-intersection-"
"compound-indexes` for more details."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:89
msgid "Create Indexes that Support Covered Queries"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:91
msgid "A covered query is a query in which:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:93
msgid ""
"all the fields in the :ref:`query <read-operations-query-document>` are part"
" of an index, **and**"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:96
msgid "all the fields returned in the results are in the same index."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:98
msgid ""
"Because the index \"covers\" the query, MongoDB can both match the "
":ref:`query conditions <read-operations-query-document>` **and** return the "
"results using only the index; MongoDB does not need to look at the "
"documents, only the index, to fulfill the query."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:103
msgid ""
"Querying *only* the index can be much faster than querying documents outside"
" of the index. Index keys are typically smaller than the documents they "
"catalog, and indexes are typically available in RAM or located sequentially "
"on disk."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:108
msgid ""
"MongoDB automatically uses an index that covers a query when possible. To "
"ensure that an index can *cover* a query, create an index that includes all "
"the fields listed in the :ref:`query document <read-operations-query-"
"document>` and in the query result. You can specify the fields to return in "
"the query results with a :ref:`projection <projection>` document. By "
"default, MongoDB includes the ``_id`` field in the query result. So, if the "
"index does **not** include the ``_id`` field, then you must exclude the "
"``_id`` field (i.e. ``_id: 0``) from the query results."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:120
msgid ""
"Given collection ``users`` with an index on the fields ``user`` and "
"``status``, as created by the following option:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:127
msgid ""
"Then, this index will cover the following query which selects on the "
"``status`` field and returns only the ``user`` field:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:134
msgid ""
"In the operation, the projection document explicitly specifies ``_id: 0`` to"
" exclude the ``_id`` field from the result since the index is only on the "
"``status`` and the ``user`` fields."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:138
msgid ""
"If the projection document does not specify the exclusion of the ``_id`` "
"field, the query returns the ``_id`` field. The following query is **not** "
"covered by the index on the ``status`` and the ``user`` fields because with "
"the projection document ``{ user: 1 }``, the query returns both the ``user``"
" field and the ``_id`` field:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:148
msgid "An index **cannot** cover a query if:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:150
msgid ""
"any of the indexed fields in any of the documents in the collection includes"
" an array. If an indexed field is an array, the index becomes a :ref:`multi-"
"key index <index-type-multikey>` index and cannot support a covered query."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:155
msgid ""
"any of the indexed fields are fields in subdocuments. To index fields in "
"subdocuments, use :term:`dot notation`. For example, consider a collection "
"``users`` with documents of the following form:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:163
msgid "The collection has the following indexes:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:171
msgid "The ``{ user: 1 }`` index covers the following query:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:177
msgid ""
"However, the ``{ \"user.login\": 1 }`` index does **not** cover the "
"following query:"
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:184
msgid ""
"The query, however, does use the ``{ \"user.login\": 1 }`` index to find "
"matching documents."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:187
msgid ""
"To determine whether a query is a covered query, use the "
":method:`~cursor.explain()` method. If the :method:`~cursor.explain()` "
"output displays ``true`` for the :data:`~explain.indexOnly` field, the query"
" is covered by an index, and MongoDB queries only that index to match the "
"query **and** return the results."
msgstr ""

#: ../source/tutorial/create-indexes-to-support-queries.txt:193
msgid "For more information see :ref:`indexes-measuring-use`."
msgstr ""
