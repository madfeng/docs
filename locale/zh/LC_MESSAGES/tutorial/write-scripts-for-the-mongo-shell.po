# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:3
msgid "Write Scripts for the ``mongo`` Shell"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:7
msgid ""
"You can write scripts for the :program:`mongo` shell in JavaScript that "
"manipulate data in MongoDB or perform administrative operation. For more "
"information about the :program:`mongo` shell see "
":doc:`/administration/scripting`, and see the :ref:`running-js-scripts-in-"
"mongo-on-mongod-host` section for more information about using these "
":program:`mongo` script."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:14
msgid ""
"This tutorial provides an introduction to writing JavaScript that uses the "
":program:`mongo` shell to access MongoDB."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:20
msgid "Opening New Connections"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:22
msgid ""
"From the :program:`mongo` shell or from a JavaScript file, you can "
"instantiate database connections using the :method:`Mongo()` constructor:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:32
msgid ""
"Consider the following example that instantiates a new connection to the "
"MongoDB instance running on localhost on the default port and sets the "
"global ``db`` variable to ``myDatabase`` using the :method:`~Mongo.getDB()` "
"method:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:42
msgid ""
"Additionally, you can use the :method:`connect()` method to connect to the "
"MongoDB instance. The following example connects to the MongoDB instance "
"that is running on ``localhost`` with the non-default port ``27020`` and set"
" the global ``db`` variable:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:52
msgid "Differences Between Interactive and Scripted ``mongo``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:54
msgid ""
"When writing scripts for the :program:`mongo` shell, consider the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:57
msgid ""
"To set the ``db`` global variable, use the :method:`~Mongo.getDB()` method "
"or the :method:`connect()` method. You can assign the database reference to "
"a variable other than ``db``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:61
msgid ""
"Write operations in the :program:`mongo` shell use the \"safe writes\" by "
"default. If performing bulk operations, use the :method:`Bulk()` methods. "
"See :ref:`write-methods-incompatibility` for more information."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:66
msgid ""
"Before MongoDB 2.6, call :method:`db.getLastError()` explicitly to wait for "
"the result of :doc:`write operations </core/write-operations>`."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:71
msgid ""
"You **cannot** use any shell helper (e.g. ``use <dbname>``, ``show dbs``, "
"etc.) inside the JavaScript file because they are not valid JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:75
msgid ""
"The following table maps the most common :program:`mongo` shell helpers to "
"their JavaScript equivalents."
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:4
msgid "Shell Helpers"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:6
msgid "JavaScript Equivalents"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:8
msgid "``show dbs``, ``show databases``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:16
msgid "``use <db>``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:24
msgid "``show collections``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:32
msgid "``show users``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:40
msgid "``show roles``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:48
msgid "``show log <logname>``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:56
msgid "``show logs``"
msgstr ""

#: ../source/includes/table/helpers-to-javascript.rst:64
msgid "``it``"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:80
msgid ""
"In interactive mode, :program:`mongo` prints the results of operations "
"including the content of all cursors. In scripts, either use the JavaScript "
"``print()`` function or the :program:`mongo` specific ``printjson()`` "
"function which returns formatted JSON."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:0
msgid "Example"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:87
msgid ""
"To print all items in a result cursor in :program:`mongo` shell scripts, use"
" the following idiom:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:100
msgid "Scripting"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:102
msgid "From the system prompt, use :program:`mongo` to evaluate JavaScript."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:105
msgid "``--eval`` option"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:107
msgid ""
"Use the :option:`--eval <mongo --eval>` option to :program:`mongo` to pass "
"the shell a JavaScript fragment, as in the following:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:114
msgid ""
"This returns the output of :method:`db.getCollectionNames()` using the "
":program:`mongo` shell connected to the :program:`mongod` or "
":program:`mongos` instance running on port ``27017`` on the ``localhost`` "
"interface."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:122
msgid "Execute a JavaScript file"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:124
msgid ""
"You can specify a ``.js`` file to the :program:`mongo` shell, and "
":program:`mongo` will execute the JavaScript directly. Consider the "
"following example:"
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:132
msgid ""
"This operation executes the ``myjsfile.js`` script in a :program:`mongo` "
"shell that connects to the ``test`` :term:`database` on the "
":program:`mongod` instance accessible via the ``localhost`` interface on "
"port ``27017``."
msgstr ""

#: ../source/tutorial/write-scripts-for-the-mongo-shell.txt:137
msgid ""
"Alternately, you can specify the mongodb connection parameters inside of the"
" javascript file using the ``Mongo()`` constructor. See :ref:`mongo-shell-"
"new-connections` for more information."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:1
msgid ""
"You can execute a ``.js`` file from within the :program:`mongo` shell, using"
" the :method:`load()` function, as in the following:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:8
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:10
msgid ""
"The :method:`load()` method accepts relative and absolute paths. If the "
"current working directory of the :program:`mongo` shell is :file:`/data/db`,"
" and the :file:`myjstest.js` resides in the :file:`/data/db/scripts` "
"directory, then the following calls within the :program:`mongo` shell would "
"be equivalent:"
msgstr ""

#: ../source/includes/fact-execute-javascript-from-shell.rst:21
msgid ""
"There is no search path for the :method:`load()` function. If the desired "
"script is not in the current working directory or the full specified path, "
":program:`mongo` will not be able to access the file."
msgstr ""
