# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/sort-results-with-indexes.txt:6
msgid "Use Indexes to Sort Query Results"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:10
msgid ""
"In MongoDB, sort operations can obtain the sort order by retrieving "
"documents based on the ordering in an index. If the query planner cannot "
"obtain the sort order from an index, it will sort the results in memory. "
"Sort operations that use an index often have better performance than those "
"that do not use an index. In addition, sort operations that do *not* use an "
"index will abort when they use 32 megabytes of memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:18
msgid "Sort with a Single Field Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:20
msgid ""
"If an ascending or a descending index is on a single field, the sort "
"operation on the field can be in either direction."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:23
msgid ""
"For example, create an ascending index on the field ``a`` for a collection "
"``records``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:30
msgid "This index can support an ascending sort on ``a``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:36
msgid ""
"The index can also support the following descending sort on ``a`` by "
"traversing the index in reverse order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:44
msgid "Sort on Multiple Fields"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:46
msgid ""
"Create a :ref:`compound index <index-type-compound>` to support sorting on "
"multiple fields."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:49
msgid ""
"You can specify a sort on all the keys of the index or on a subset; however,"
" the sort keys must be listed in the *same order* as they appear in the "
"index. For example, an index key pattern ``{ a: 1, b: 1 }`` can support a "
"sort on ``{ a: 1, b: 1 }`` but *not* on ``{ b: 1, a: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:55
msgid ""
"The sort must specify the *same sort direction* (i.e.ascending/descending) "
"for all its keys as the index key pattern or specify the *reverse sort "
"direction* for all its keys as the index key pattern. For example, an index "
"key pattern ``{ a: 1, b: 1 }`` can support a sort on ``{ a: 1, b: 1 }`` and "
"``{ a: -1, b: -1 }`` but *not* on ``{ a: -1, b: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:65
msgid "Sort and Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:67
msgid ""
"If the sort keys correspond to the index keys or an index *prefix*, MongoDB "
"can use the index to sort the query results. A *prefix* of a compound index "
"is a subset that consists of one or more keys at the start of the index key "
"pattern."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:72
msgid "For example, create a compound index on the ``data`` collection:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:78
msgid "Then, the following are prefixes for that index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:86
msgid ""
"The following query and sort operations use the index prefixes to sort the "
"results. These operations do not need to sort the result set in memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:94
#: ../source/tutorial/sort-results-with-indexes.txt:152
msgid "Example"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:96
#: ../source/tutorial/sort-results-with-indexes.txt:154
msgid "Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:98
msgid "``db.data.find().sort( { a: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:100
#: ../source/tutorial/sort-results-with-indexes.txt:104
msgid "``{ a: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:102
msgid "``db.data.find().sort( { a: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:106
msgid "``db.data.find().sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:108
#: ../source/tutorial/sort-results-with-indexes.txt:112
#: ../source/tutorial/sort-results-with-indexes.txt:120
#: ../source/tutorial/sort-results-with-indexes.txt:166
msgid "``{ a: 1, b: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:110
msgid "``db.data.find().sort( { a: -1, b: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:114
msgid "``db.data.find().sort( { a: 1, b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:116
#: ../source/tutorial/sort-results-with-indexes.txt:162
msgid "``{ a: 1, b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:118
msgid "``db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:122
msgid ""
"Consider the following example in which the prefix keys of the index appear "
"in both the query predicate and the sort:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:129
msgid ""
"In such cases, MongoDB can use the index to retrieve the documents in order "
"specified by the sort. As the example shows, the index prefix in the query "
"predicate can be different from the prefix in the sort."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:134
msgid "Sort and Non-prefix Subset of an Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:136
msgid ""
"An index can support sort operations on a non-prefix subset of the index key"
" pattern. To do so, the query must include **equality** conditions on all "
"the prefix keys that precede the sort keys."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:140
msgid "For example, the collection ``data`` has the following index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:146
msgid "The following operations can use the index to get the sort order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:156
msgid "``db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:158
msgid "``{ a: 1 , b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:160
msgid "``db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:164
msgid "``db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:168
msgid ""
"As the last operation shows, only the index fields *preceding* the sort "
"subset must have the equality conditions in the query document; the other "
"index fields may specify other conditions."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:172
msgid ""
"If the query does **not** specify an equality conditions on an index prefix "
"that precedes or overlaps with the sort specification, the operation will "
"**not** efficiently use the index. For example, the following operations "
"specify a sort document of ``{ c: 1 }``, but the query documents do not "
"contain equality matches on the preceding index fields ``a`` and ``b``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:184
msgid ""
"These operations **will not** efficiently use the index ``{ a: 1, b: 1, c: "
"1, d: 1 }`` and may not even use the index to retrieve the documents."
msgstr ""
