# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/getting-started.txt:3
msgid "Getting Started with MongoDB"
msgstr ""

#: ../source/tutorial/getting-started.txt:7
msgid ""
"This tutorial provides an introduction to basic database operations using "
"the :program:`mongo` shell. :program:`mongo` is a part of the standard "
"MongoDB distribution and provides a full JavaScript environment with "
"complete access to the JavaScript language and all standard functions as "
"well as a full database interface for MongoDB. See the :api:`mongo "
"JavaScript API <js>` documentation and the :program:`mongo` shell "
":doc:`JavaScript Method Reference </reference/method>`."
msgstr ""

#: ../source/tutorial/getting-started.txt:15
msgid ""
"The tutorial assumes that you're running MongoDB on a Linux or OS X "
"operating system and that you have a running database server; MongoDB does "
"support Windows and provides a Windows distribution with identical "
"operation. For instructions on installing MongoDB and starting the database "
"server, see the appropriate :doc:`installation </installation>` document."
msgstr ""

#: ../source/tutorial/getting-started.txt:23
msgid "Connect to a Database"
msgstr ""

#: ../source/tutorial/getting-started.txt:25
msgid ""
"In this section, you connect to the database server, which runs as "
":program:`mongod`, and begin using the :program:`mongo` shell to select a "
"logical database within the database instance and access the help text in "
"the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/getting-started.txt:31
msgid "Connect to a :program:`mongod`"
msgstr ""

#: ../source/tutorial/getting-started.txt:33
msgid ""
"From a system prompt, start :program:`mongo` by issuing the :program:`mongo`"
" command, as follows:"
msgstr ""

#: ../source/tutorial/getting-started.txt:40
msgid ""
"By default, :program:`mongo` looks for a database server listening on port "
"``27017`` on the ``localhost`` interface. To connect to a server on a "
"different port or interface, use the :option:`--port <mongo --port>` and "
":option:`--host <mongo --host>` options."
msgstr ""

#: ../source/tutorial/getting-started.txt:47
msgid "Select a Database"
msgstr ""

#: ../source/tutorial/getting-started.txt:49
msgid ""
"After starting the :program:`mongo` shell your session will use the ``test``"
" database by default. At any time, issue the following operation at the "
":program:`mongo` to report the name of the current database:"
msgstr ""

#: ../source/tutorial/getting-started.txt:57
msgid ""
"From the :program:`mongo` shell, display the list of databases, with the "
"following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:64
msgid "Switch to a new database named ``mydb``, with the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:71
msgid ""
"Confirm that your session has the ``mydb`` database as context, by checking "
"the value of the ``db`` object, which returns the name of the current "
"database, as follows:"
msgstr ""

#: ../source/tutorial/getting-started.txt:79
msgid ""
"At this point, if you issue the ``show dbs`` operation again, it will not "
"include the ``mydb`` database. MongoDB will not permanently create a "
"database until you insert data into that database. The :ref:`getting-"
"started-create-documents` section describes the process for inserting data."
msgstr ""

#: ../source/tutorial/getting-started.txt:85
msgid "``show databases`` also returns a list of databases."
msgstr ""

#: ../source/tutorial/getting-started.txt:89
msgid "Display ``mongo`` Help"
msgstr ""

#: ../source/tutorial/getting-started.txt:91
msgid ""
"At any point, you can access help for the :program:`mongo` shell using the "
"following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:98
msgid ""
"Furthermore, you can append the ``.help()`` method to some JavaScript "
"methods, any cursor object, as well as the ``db`` and ``db.collection`` "
"objects to return additional help information."
msgstr ""

#: ../source/tutorial/getting-started.txt:105
msgid "Create a Collection and Insert Documents"
msgstr ""

#: ../source/tutorial/getting-started.txt:107
msgid ""
"In this section, you insert documents into a new :term:`collection` named "
"``testData`` within the new :term:`database` named ``mydb``."
msgstr ""

#: ../source/tutorial/getting-started.txt:111
msgid ""
"MongoDB will create a collection implicitly upon its first use. You do not "
"need to create a collection before inserting data. Furthermore, because "
"MongoDB uses :ref:`dynamic schemas <faq-schema-free>`, you also need not "
"specify the structure of your documents before inserting them into the "
"collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:117
msgid ""
"From the :program:`mongo` shell, confirm you are in the ``mydb`` database by"
" issuing the following:"
msgstr ""

#: ../source/tutorial/getting-started.txt:124
msgid ""
"If :program:`mongo` does not return ``mydb`` for the previous operation, set"
" the context to the ``mydb`` database, with the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:132
msgid ""
"Create two documents named ``j`` and ``k`` by using the following sequence "
"of JavaScript operations:"
msgstr ""

#: ../source/tutorial/getting-started.txt:140
msgid ""
"Insert the ``j`` and ``k`` documents into the ``testData`` collection with "
"the following sequence of operations:"
msgstr ""

#: ../source/tutorial/getting-started.txt:148
msgid ""
"When you insert the first document, the :program:`mongod` will create both "
"the ``mydb`` database and the ``testData`` collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:151
msgid ""
"Confirm that the ``testData`` collection exists. Issue the following "
"operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:158
msgid ""
"The :program:`mongo` shell will return the list of the collections in the "
"current (i.e. ``mydb``) database. At this point, the only collection is "
"``testData``. All :program:`mongod` databases also have a "
":data:`system.indexes <<database>.system.indexes>` collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:163
msgid ""
"Confirm that the documents exist in the ``testData`` collection by issuing a"
" query on the collection using the :method:`~db.collection.find()` method:"
msgstr ""

#: ../source/tutorial/getting-started.txt:171
msgid ""
"This operation returns the following results. The :doc:`ObjectId </reference"
"/object-id>` values will be unique:"
msgstr ""

#: ../source/tutorial/getting-started.txt:179
msgid ""
"All MongoDB documents must have an ``_id`` field with a unique value.  These"
" operations do not explicitly specify a value for the ``_id`` field, so "
":program:`mongo` creates a unique :doc:`ObjectId </reference/object-id>` "
"value for the field before inserting it into the collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:186
msgid "Insert Documents using a For Loop or a JavaScript Function"
msgstr ""

#: ../source/tutorial/getting-started.txt:188
msgid ""
"To perform the remaining procedures in this tutorial, first add more "
"documents to your database using one or both of the procedures described in "
":doc:`/tutorial/generate-test-data`."
msgstr ""

#: ../source/tutorial/getting-started.txt:193
msgid "Working with the Cursor"
msgstr ""

#: ../source/tutorial/getting-started.txt:195
msgid ""
"When you query a :term:`collection`, MongoDB returns a \"cursor\" object "
"that contains the results of the query. The :program:`mongo` shell then "
"iterates over the cursor to display the results. Rather than returning all "
"results at once, the shell iterates over the cursor 20 times to display the "
"first 20 results and then waits for a request to iterate over the remaining "
"results. In the shell, use enter ``it`` to iterate over the next set of "
"results."
msgstr ""

#: ../source/tutorial/getting-started.txt:203
msgid ""
"The procedures in this section show other ways to work with a cursor. For "
"comprehensive documentation on cursors, see :ref:`crud-read-cursor`."
msgstr ""

#: ../source/tutorial/getting-started.txt:208
msgid "Iterate over the Cursor with a Loop"
msgstr ""

#: ../source/tutorial/getting-started.txt:210
msgid ""
"Before using this procedure, add documents to a collection using one of the "
"procedures in :doc:`/tutorial/generate-test-data`. You can name your "
"database and collections anything you choose, but this procedure will assume"
" the database named ``test`` and a collection named ``testData``."
msgstr ""

#: ../source/tutorial/getting-started.txt:216
msgid ""
"In the MongoDB JavaScript shell, query the ``testData`` collection and "
"assign the resulting cursor object to the ``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:223
msgid ""
"Print the full result set by using a ``while`` loop to iterate over the "
"``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:230
msgid ""
"The ``hasNext()`` function returns true if the cursor has documents. The "
"``next()`` method returns the next document. The ``printjson()`` method "
"renders the document in a JSON-like format."
msgstr ""

#: ../source/tutorial/getting-started.txt:234
msgid "The operation displays all documents:"
msgstr ""

#: ../source/tutorial/getting-started.txt:244
msgid "Use Array Operations with the Cursor"
msgstr ""

#: ../source/tutorial/getting-started.txt:246
msgid ""
"The following procedure lets you manipulate a cursor object as if it were an"
" array:"
msgstr ""

#: ../source/tutorial/getting-started.txt:249
msgid ""
"In the :program:`mongo` shell, query the ``testData`` collection and assign "
"the resulting cursor object to the ``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:256
msgid ""
"To find the document at the array index ``4``, use the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:263
msgid "MongoDB returns the following:"
msgstr ""

#: ../source/tutorial/getting-started.txt:269
msgid ""
"When you access documents in a cursor using the array index notation, "
":program:`mongo` first calls the ``cursor.toArray()`` method and loads into "
"RAM all documents returned by the cursor. The index is then applied to the "
"resulting array. This operation iterates the cursor completely and exhausts "
"the cursor."
msgstr ""

#: ../source/tutorial/getting-started.txt:275
msgid ""
"For very large result sets, :program:`mongo` may run out of available "
"memory."
msgstr ""

#: ../source/tutorial/getting-started.txt:278
msgid "For more information on the cursor, see :ref:`crud-read-cursor`."
msgstr ""

#: ../source/tutorial/getting-started.txt:281
msgid "Query for Specific Documents"
msgstr ""

#: ../source/tutorial/getting-started.txt:283
msgid ""
"MongoDB has a rich query system that allows you to select and filter the "
"documents in a collection along specific fields and values. See :ref:`read-"
"operations-query-document` and :doc:`/core/read-operations` for a full "
"account of queries in MongoDB."
msgstr ""

#: ../source/tutorial/getting-started.txt:288
msgid ""
"In this procedure, you query for specific documents in the ``testData`` "
":term:`collection` by passing a \"query document\" as a parameter to the "
":method:`~db.collection.find()` method. A query document specifies the "
"criteria the query must match to return a document."
msgstr ""

#: ../source/tutorial/getting-started.txt:293
msgid ""
"In the :program:`mongo` shell, query for all documents where the ``x`` field"
" has a value of ``18`` by passing the ``{ x : 18 }`` query document as a "
"parameter to the :method:`~db.collection.find()` method:"
msgstr ""

#: ../source/tutorial/getting-started.txt:301
msgid "MongoDB returns one document that fits this criteria:"
msgstr ""

#: ../source/tutorial/getting-started.txt:308
msgid "Return a Single Document from a Collection"
msgstr ""

#: ../source/tutorial/getting-started.txt:310
msgid ""
"With the :method:`~db.collection.findOne()` method you can return a single "
"*document* from a MongoDB collection. The :method:`~db.collection.findOne()`"
" method takes the same parameters as :method:`~db.collection.find()`, but "
"returns a document rather than a cursor."
msgstr ""

#: ../source/tutorial/getting-started.txt:315
msgid ""
"To retrieve one document from the ``testData`` collection, issue the "
"following command:"
msgstr ""

#: ../source/tutorial/getting-started.txt:322
msgid ""
"For more information on querying for documents, see the :ref:`read-"
"operations-query-document` and :doc:`/core/read-operations` documentation."
msgstr ""

#: ../source/tutorial/getting-started.txt:326
msgid "Limit the Number of Documents in the Result Set"
msgstr ""

#: ../source/tutorial/getting-started.txt:328
msgid ""
"To increase performance, you can constrain the size of the result by "
"limiting the amount of data your application must receive over the network."
msgstr ""

#: ../source/tutorial/getting-started.txt:332
msgid ""
"To specify the maximum number of documents in the result set, call the "
":method:`~cursor.limit()` method on a cursor, as in the following command:"
msgstr ""

#: ../source/tutorial/getting-started.txt:340
msgid ""
"MongoDB will return the following result, with different :doc:`ObjectId "
"</reference/object-id>` values:"
msgstr ""

#: ../source/tutorial/getting-started.txt:352
msgid "Next Steps with MongoDB"
msgstr ""

#: ../source/tutorial/getting-started.txt:354
msgid ""
"For more information on manipulating the documents in a database as you "
"continue to learn MongoDB, consider the following resources:"
msgstr ""

#: ../source/tutorial/getting-started.txt:357
msgid ":doc:`/crud`"
msgstr ""

#: ../source/tutorial/getting-started.txt:358
msgid ":doc:`/reference/sql-comparison`"
msgstr ""

#: ../source/tutorial/getting-started.txt:359
msgid ":doc:`/applications/drivers`"
msgstr ""
