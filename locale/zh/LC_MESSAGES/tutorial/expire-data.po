# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/expire-data.txt:5
msgid "Expire Data from Collections by Setting TTL"
msgstr ""

#: ../source/tutorial/expire-data.txt:11
msgid ""
"This document provides an introduction to MongoDB's \"*time to live*\" or "
"\":term:`TTL`\" collection feature. TTL collections make it possible to "
"store data in MongoDB and have the :program:`mongod` automatically remove "
"data after a specified number of seconds or at a specific clock time."
msgstr ""

#: ../source/tutorial/expire-data.txt:17
msgid ""
"Data expiration is useful for some classes of information, including machine"
" generated event data, logs, and session information that only need to "
"persist for a limited period of time."
msgstr ""

#: ../source/tutorial/expire-data.txt:21
msgid ""
"A special index type supports the implementation of TTL collections. TTL "
"relies on a background thread in :program:`mongod` that reads the date-typed"
" values in the index and removes expired :term:`documents <document>` from "
"the collection."
msgstr ""

#: ../source/tutorial/expire-data.txt:27
msgid "Considerations"
msgstr ""

#: ../source/tutorial/expire-data.txt:29
msgid "The ``_id`` field does not support TTL indexes."
msgstr ""

#: ../source/tutorial/expire-data.txt:31
msgid "You cannot create a TTL index on a field that already has an index."
msgstr ""

#: ../source/tutorial/expire-data.txt:33
msgid "A document will not expire if the indexed field does not exist."
msgstr ""

#: ../source/tutorial/expire-data.txt:35
msgid ""
"A document will not expire if the indexed field is not a date :term:`BSON "
"type <BSON types>` or an array of date :term:`BSON types <BSON types>`."
msgstr ""

#: ../source/tutorial/expire-data.txt:39
msgid "The TTL index may not be compound (may not have multiple fields)."
msgstr ""

#: ../source/tutorial/expire-data.txt:41
msgid ""
"If the TTL field holds an array, and there are multiple date-typed data in "
"the index, the document will expire when the *lowest* (i.e. earliest) date "
"matches the expiration threshold."
msgstr ""

#: ../source/tutorial/expire-data.txt:45
msgid ""
"You cannot create a TTL index on a capped collection, because MongoDB cannot"
" remove documents from a capped collection."
msgstr ""

#: ../source/tutorial/expire-data.txt:48
msgid ""
"You cannot use :method:`~db.collection.ensureIndex()` to change the value of"
" ``expireAfterSeconds``. Instead use the :dbcommand:`collMod` database "
"command in conjunction with the :collflag:`index` collection flag."
msgstr ""

#: ../source/tutorial/expire-data.txt:53
msgid ""
"When you build a TTL index in the :ref:`background <index-creation-"
"background>`, the TTL thread can begin deleting documents while the index is"
" building. If you build a TTL index in the foreground, MongoDB begins "
"removing expired documents as soon as the index finishes building."
msgstr ""

#: ../source/tutorial/expire-data.txt:59
msgid ""
"When the TTL thread is active, you will see :doc:`delete </core/write-"
"operations>` operations in the output of :method:`db.currentOp()` or in the "
"data collected by the :ref:`database profiler <database-profiler>`."
msgstr ""

#: ../source/tutorial/expire-data.txt:64
msgid ""
"When using TTL indexes on :term:`replica sets <replica set>`, the TTL "
"background thread *only* deletes documents on :term:`primary` members. "
"However, the TTL background thread *does* run on secondaries. "
":term:`Secondary` members replicate deletion operations from the primary."
msgstr ""

#: ../source/includes/fact-ttl-collection-background-timing.rst:1
msgid ""
"The TTL index does not guarantee that expired data will be deleted "
"immediately. There may be a delay between the time a document expires and "
"the time that MongoDB removes the document from the database."
msgstr ""

#: ../source/includes/fact-ttl-collection-background-timing.rst:5
msgid ""
"The background task that removes expired documents runs *every 60 seconds*. "
"As a result, documents may remain in a collection *after* they expire but "
"*before* the background task runs or completes."
msgstr ""

#: ../source/includes/fact-ttl-collection-background-timing.rst:9
msgid ""
"The duration of the removal operation depends on the workload of your "
":program:`mongod` instance. Therefore, expired data may exist for some time "
"*beyond* the 60 second period between runs of the background task."
msgstr ""

#: ../source/tutorial/expire-data.txt:72
msgid ""
"All collections with an index using the ``expireAfterSeconds`` option have "
":collflag:`usePowerOf2Sizes` enabled. Users cannot modify this setting. As a"
" result of enabling :collflag:`usePowerOf2Sizes`, MongoDB must allocate more"
" disk space relative to data size. This approach helps mitigate the "
"possibility of storage fragmentation caused by frequent delete operations "
"and leads to more predictable storage use patterns."
msgstr ""

#: ../source/tutorial/expire-data.txt:81
msgid "Procedures"
msgstr ""

#: ../source/tutorial/expire-data.txt:83
msgid ""
"To enable TTL for a collection, use the "
":method:`~db.collection.ensureIndex()` method to create a TTL index, as "
"shown in the examples below."
msgstr ""

#: ../source/tutorial/expire-data.txt:87
msgid ""
"With the exception of the background thread, a TTL index supports queries in"
" the same way normal indexes do. You can use TTL indexes to expire documents"
" in one of two ways, either:"
msgstr ""

#: ../source/tutorial/expire-data.txt:91
msgid ""
"remove documents a certain number of seconds after creation. The index will "
"support queries for the creation time of the documents. Alternately,"
msgstr ""

#: ../source/tutorial/expire-data.txt:95
msgid ""
"specify an explicit expiration time. The index will support queries for the "
"expiration-time of the document."
msgstr ""

#: ../source/tutorial/expire-data.txt:99
msgid "Expire Documents after a Certain Number of Seconds"
msgstr ""

#: ../source/tutorial/expire-data.txt:101
msgid ""
"To expire data after a certain number of seconds, create a TTL index on a "
"field that holds values of BSON date type or an array of BSON date-typed "
"objects *and* specify a positive non-zero value in the "
"``expireAfterSeconds`` field. A document will expire when the number of "
"seconds in the ``expireAfterSeconds`` field has passed since the time "
"specified in its indexed field. [#field-is-array-of-dates]_"
msgstr ""

#: ../source/tutorial/expire-data.txt:108
msgid ""
"For example, the following operation creates an index on the ``log_events`` "
"collection's ``createdAt`` field and specifies the ``expireAfterSeconds`` "
"value of ``3600`` to set the expiration time to be one hour after the time "
"specified by ``createdAt``."
msgstr ""

#: ../source/tutorial/expire-data.txt:117
msgid ""
"When adding documents to the ``log_events`` collection, set the "
"``createdAt`` field to the current time:"
msgstr ""

#: ../source/tutorial/expire-data.txt:128
msgid ""
"MongoDB will automatically delete documents from the ``log_events`` "
"collection when the document's ``createdAt`` value [#field-is-array-of-"
"dates]_ is older than the number of seconds specified in "
"``expireAfterSeconds``."
msgstr ""

#: ../source/tutorial/expire-data.txt:133
msgid ""
"If the field contains an array of BSON date-typed objects, data expires if "
"at least one of BSON date-typed object is older than the number of seconds "
"specified in ``expireAfterSeconds``."
msgstr ""

#: ../source/tutorial/expire-data.txt:138
msgid ":update:`$currentDate` operator"
msgstr ""

#: ../source/tutorial/expire-data.txt:141
msgid "Expire Documents at a Certain Clock Time"
msgstr ""

#: ../source/tutorial/expire-data.txt:143
msgid ""
"To expire documents at a certain clock time, begin by creating a TTL index "
"on a field that holds values of BSON date type or an array of BSON date-"
"typed objects *and* specify an ``expireAfterSeconds`` value of ``0``. For "
"each document in the collection, set the indexed date field to a value "
"corresponding to the time the document should expire. If the indexed date "
"field contains a date in the past, MongoDB considers the document expired."
msgstr ""

#: ../source/tutorial/expire-data.txt:151
msgid ""
"For example, the following operation creates an index on the ``log_events`` "
"collection's ``expireAt`` field and specifies the ``expireAfterSeconds`` "
"value of ``0``:"
msgstr ""

#: ../source/tutorial/expire-data.txt:159
msgid ""
"For each document, set the value of ``expireAt`` to correspond to the time "
"the document should expire. For instance, the following "
":method:`~db.collection.insert()` operation adds a document that should "
"expire at ``July 22, 2013 14:00:00``."
msgstr ""

#: ../source/tutorial/expire-data.txt:172
msgid ""
"MongoDB will automatically delete documents from the ``log_events`` "
"collection when the documents' ``expireAt`` value is older than the number "
"of seconds specified in ``expireAfterSeconds``, i.e. ``0`` seconds older in "
"this case. As such, the data expires at the specified ``expireAt`` value."
msgstr ""
