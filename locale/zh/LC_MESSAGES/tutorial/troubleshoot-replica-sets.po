# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/troubleshoot-replica-sets.txt:3
msgid "Troubleshoot Replica Sets"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:7
msgid ""
"This section describes common strategies for troubleshooting :term:`replica "
"set` deployments."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:13
msgid "Check Replica Set Status"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:15
msgid ""
"To display the current state of the replica set and current state of each "
"member, run the :method:`rs.status()` method in a :program:`mongo` shell "
"connected to the replica set's :term:`primary`. For descriptions of the "
"information displayed by :method:`rs.status()`, see "
":doc:`/reference/command/replSetGetStatus`."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:23
msgid ""
"The :method:`rs.status()` method is a wrapper that runs the "
":dbcommand:`replSetGetStatus` database command."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:29
msgid "Check the Replication Lag"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:31
msgid ""
"Replication lag is a delay between an operation on the :term:`primary` and "
"the application of that operation from the :term:`oplog` to the "
":term:`secondary`. Replication lag can be a significant issue and can "
"seriously affect MongoDB :term:`replica set` deployments. Excessive "
"replication lag makes \"lagged\" members ineligible to quickly become "
"primary and increases the possibility that distributed read operations will "
"be inconsistent."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:39
msgid "To check the current length of replication lag:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:41
msgid ""
"In a :program:`mongo` shell connected to the primary, call the "
":method:`rs.printSlaveReplicationInfo()` method."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:44
msgid ""
"Returns the ``syncedTo`` value for each member, which shows the time when "
"the last oplog entry was written to the secondary, as shown in the following"
" example:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:57
msgid ""
"A :ref:`delayed member <replica-set-delayed-members>` may show as ``0`` "
"seconds behind the primary when the inactivity period on the primary is "
"greater than the :data:`~local.system.replset.members[n].slaveDelay` value."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:64
msgid ""
"The :method:`rs.status()` method is a wrapper around the "
":dbcommand:`replSetGetStatus` database command."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:67
msgid ""
"Monitor the rate of replication by watching the oplog time in the "
"\"replica\" graph in the `MongoDB Management Service`_. For more information"
" see the `documentation for MMS`_."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:74
msgid "Possible causes of replication lag include:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:76
msgid "**Network Latency**"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:78
msgid ""
"Check the network routes between the members of your set to ensure that "
"there is no packet loss or network routing issue."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:81
msgid ""
"Use tools including ``ping`` to test latency between set members and "
"``traceroute`` to expose the routing of packets network endpoints."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:85
msgid "**Disk Throughput**"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:87
msgid ""
"If the file system and disk device on the secondary is unable to flush data "
"to disk as quickly as the primary, then the secondary will have difficulty "
"keeping state. Disk-related issues are incredibly prevalent on multi-tenant "
"systems, including virtualized instances, and can be transient if the system"
" accesses disk devices over an IP network (as is the case with Amazon's EBS "
"system.)"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:95
msgid ""
"Use system-level tools to assess disk status, including ``iostat`` or "
"``vmstat``."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:98
msgid "**Concurrency**"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:100
msgid ""
"In some cases, long-running operations on the primary can block replication "
"on secondaries. For best results, configure :ref:`write concern <write-"
"concern>` to require confirmation of replication to secondaries, as "
"described in :ref:`replica set write concern <replica-set-write-concern>`. "
"This prevents write operations from returning if replication cannot keep up "
"with the write load."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:107
msgid ""
"Use the :term:`database profiler` to see if there are slow queries or long-"
"running operations that correspond to the incidences of lag."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:110
msgid "**Appropriate Write Concern**"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:112
msgid ""
"If you are performing a large data ingestion or bulk load operation that "
"requires a large number of writes to the primary, particularly with "
":ref:`unacknowledged write concern <write-concern-unacknowledged>`, the "
"secondaries will not be able to read the oplog fast enough to keep up with "
"changes."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:118
msgid ""
"To prevent this, require :ref:`write acknowledgment or journaled write "
"concern <write-operations-write-concern>` after every 100, 1,000, or an "
"another interval to provide an opportunity for secondaries to catch up with "
"the primary."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:123
msgid "For more information see:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:125
msgid ":ref:`Replica Acknowledge Write Concern <replica-set-write-concern>`"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:126
msgid ":ref:`Replica Set Write Concern <write-operations-replica-sets>`"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:127
msgid ":ref:`replica-set-oplog-sizing`"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:132
msgid "Test Connections Between all Members"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:134
msgid ""
"All members of a :term:`replica set` must be able to connect to every other "
"member of the set to support replication. Always verify connections in both "
"\"directions.\"  Networking topologies and firewall configurations prevent "
"normal and required connectivity, which can block replication."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:140
msgid "Consider the following example of a bidirectional test of networking:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:0
#: ../source/tutorial/troubleshoot-replica-sets.txt:0
#: ../source/tutorial/troubleshoot-replica-sets.txt:0
msgid "Example"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:145
msgid "``m1.example.net``"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:146
msgid "``m2.example.net``"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:147
msgid "``m3.example.net``"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:149
msgid ""
"Test the connection from ``m1.example.net`` to the other hosts with the "
"following operation set ``m1.example.net``:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:158
msgid ""
"Test the connection from ``m2.example.net`` to the other two hosts with the "
"following operation set from ``m2.example.net``, as in:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:168
msgid ""
"You have now tested the connection between ``m2.example.net`` and "
"``m1.example.net`` in both directions."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:171
msgid ""
"Test the connection from ``m3.example.net`` to the other two hosts with the "
"following operation set from the ``m3.example.net`` host, as in:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:181
msgid ""
"If any connection, in any direction fails, check your networking and "
"firewall configuration and reconfigure your environment to allow these "
"connections."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:186
msgid "Socket Exceptions when Rebooting More than One Secondary"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:188
msgid ""
"When you reboot members of a replica set, ensure that the set is able to "
"elect a primary during the maintenance. This means ensuring that a majority "
"of the set's ':data:`~local.system.replset.members[n].votes` are available."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:193
msgid ""
"When a set's active members can no longer form a majority, the set's "
":term:`primary` steps down and becomes a :term:`secondary`. The former "
"primary closes all open connections to client applications. Clients "
"attempting to write to the former primary receive socket exceptions and "
"*Connection reset* errors until the set can elect a primary."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:206
msgid ""
"For more information on votes, see :doc:`/core/replica-set-elections`. For "
"related information on connection errors, see :ref:`faq-keepalive`."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:212
msgid "Check the Size of the Oplog"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:214
msgid ""
"A larger :term:`oplog` can give a replica set a greater tolerance for lag, "
"and make the set more resilient."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:217
msgid ""
"To check the size of the oplog for a given :term:`replica set` member, "
"connect to the member in a :program:`mongo` shell and run the "
":method:`rs.printReplicationInfo()` method."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:221
msgid ""
"The output displays the size of the oplog and the date ranges of the "
"operations contained in the oplog. In the following example, the oplog is "
"about 10MB and is able to fit about 26 hours (94400 seconds) of operations:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:234
msgid ""
"The oplog should be long enough to hold all transactions for the longest "
"downtime you expect on a secondary. At a minimum, an oplog should be able to"
" hold minimum 24 hours of operations; however, many users prefer to have 72 "
"hours or even a week's work of operations."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:239
msgid "For more information on how oplog size affects operations, see:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:241
msgid ":ref:`replica-set-oplog-sizing`,"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:242
msgid ":ref:`replica-set-delayed-members`, and"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:243
msgid ":ref:`replica-set-replication-lag`."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:245
msgid ""
"You normally want the oplog to be the same size on all members. If you "
"resize the oplog, resize it on all members."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:248
msgid ""
"To change oplog size, see the :doc:`/tutorial/change-oplog-size` tutorial."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:253
msgid "Oplog Entry Timestamp Error"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:257
msgid "Consider the following error in :program:`mongod` output and logs:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:264
msgid ""
"Often, an incorrectly typed value in the ``ts`` field in the last "
":term:`oplog` entry causes this error. The correct data type is Timestamp."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:268
msgid ""
"Check the type of the ``ts`` value using the following two queries against "
"the oplog collection:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:277
msgid ""
"The first query returns the last document in the oplog, while the second "
"returns the last document in the oplog where the ``ts`` value is a "
"Timestamp. The :query:`$type` operator allows you to select :term:`BSON type"
" <BSON types>` 17, is the Timestamp data type."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:282
msgid ""
"If the queries don't return the same document, then the last document in the"
" oplog has the wrong data type in the ``ts`` field."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:287
msgid "If the first query returns this as the last oplog entry:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:297
msgid ""
"And the second query returns this as the last entry where ``ts`` has the "
"``Timestamp`` type:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:308
msgid ""
"Then the value for the ``ts`` field in the last oplog entry is of the wrong "
"data type."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:311
msgid ""
"To set the proper type for this value and resolve this issue, use an update "
"operation that resembles the following:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:319
msgid ""
"Modify the timestamp values as needed based on your oplog entry. This "
"operation may take some period to complete because the update must scan and "
"pull the entire oplog into memory."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:324
msgid "Duplicate Key Error on ``local.slaves``"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:326
msgid ""
"The *duplicate key on local.slaves* error, occurs when a :term:`secondary` "
"or :term:`slave` changes its hostname and the :term:`primary` or "
":term:`master` tries to update its ``local.slaves`` collection with the new "
"name. The update fails because it contains the same ``_id`` value as the "
"document containing the previous hostname. The error itself will resemble "
"the following."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:337
msgid ""
"This is a benign error and does not affect replication operations on the "
":term:`secondary` or :term:`slave`."
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:340
msgid ""
"To prevent the error from appearing, drop the ``local.slaves`` collection "
"from the :term:`primary` or :term:`master`, with the following sequence of "
"operations in the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/troubleshoot-replica-sets.txt:349
msgid ""
"The next time a :term:`secondary` or :term:`slave` polls the :term:`primary`"
" or :term:`master`, the :term:`primary` or :term:`master` recreates the "
"``local.slaves`` collection."
msgstr ""
