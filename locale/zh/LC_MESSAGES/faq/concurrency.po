# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:9
msgid ""
"MongoDB allows multiple clients to read and write a single corpus of data "
"using a locking system to ensure that all clients receive the same view of "
"the data *and* to prevent multiple applications from modifying the exact "
"same pieces of data at the same time. Locks help guarantee that all writes "
"to a single document occur either in full or not at all."
msgstr ""

#: ../source/faq/concurrency.txt:16
msgid ""
"`Presentation on Concurrency and Internals in 2.2 "
"<http://www.mongodb.com/presentations/concurrency-internals-mongodb-2-2>`_"
msgstr ""

#: ../source/faq/concurrency.txt:21
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:23
msgid ""
"MongoDB uses a readers-writer [#multi-reader-lock-names]_ lock that allows "
"concurrent reads access to a database but gives exclusive access to a single"
" write operation."
msgstr ""

#: ../source/faq/concurrency.txt:27
msgid ""
"When a read lock exists, many read operations may use this lock. However, "
"when a write lock exists, a single write operation holds the lock "
"exclusively, and no other read *or* write operations may share the lock."
msgstr ""

#: ../source/faq/concurrency.txt:31
msgid ""
"Locks are \"writer greedy,\" which means write locks have preference over "
"reads. When both a read and write are waiting for a lock, MongoDB grants the"
" lock to the write."
msgstr ""

#: ../source/faq/concurrency.txt:35
msgid ""
"You may be familiar with a \"readers-writer\" lock as \"multi-reader\" or "
"\"shared exclusive\" lock. See the Wikipedia page on `Readers-Writer Locks "
"<http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for more "
"information."
msgstr ""

#: ../source/faq/concurrency.txt:42
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:46
msgid ""
"Beginning with version 2.2, MongoDB implements locks on a per-database basis"
" for most read and write operations. Some global operations, typically short"
" lived operations involving multiple databases, still require a global "
"\"instance\" wide lock. Before 2.2, there is only one \"global\" lock per "
":program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:52
msgid ""
"For example, if you have six databases and one takes a database-level write "
"lock, the other five are still available for read and write. A global lock "
"makes all six databases unavailable during the operation."
msgstr ""

#: ../source/faq/concurrency.txt:57
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:59
msgid ""
"For reporting on lock utilization information on locks, use any of the "
"following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:62 ../source/faq/concurrency.txt:149
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:63
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:64
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:65
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:66
msgid "the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_"
msgstr ""

#: ../source/faq/concurrency.txt:68
msgid ""
"Specifically, the :data:`~serverStatus.locks` document in the :doc:`output "
"of serverStatus </reference/command/serverStatus>`, or the "
":data:`~currentOp.locks` field in the :doc:`current operation reporting "
"</reference/method/db.currentOp>` provides insight into the type of locks "
"and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:74
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:79
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:81
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:83
msgid ""
"Long running read and write operations, such as queries, updates, and "
"deletes, yield under many conditions. MongoDB uses an adaptive algorithms to"
" allow operations to yield locks based on predicted disk access patterns "
"(i.e. page faults.)"
msgstr ""

#: ../source/faq/concurrency.txt:88
msgid ""
"MongoDB operations can also yield locks between individual document "
"modification in write operations that affect multiple documents like "
":method:`~db.collection.update()` with the ``multi`` parameter."
msgstr ""

#: ../source/faq/concurrency.txt:92
msgid ""
"MongoDB uses heuristics based on its access pattern to predict whether data "
"is likely in physical memory before performing a read. If MongoDB *predicts*"
" that the data is not in physical memory an operation will yield its lock "
"while MongoDB loads the data to memory. Once data is available in memory, "
"the operation will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:99
msgid ""
"MongoDB does not yield locks when scanning an index even if it predicts that"
" the index is not in memory."
msgstr ""

#: ../source/faq/concurrency.txt:106
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:110
msgid ""
"The following table lists common database operations and the types of locks "
"they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:60
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
msgid ""
"Read lock and write lock, unless operations are specified as non-atomic. "
"Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
msgid ""
"Building an index in the foreground, which is the default, locks the "
"database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:42
msgid ""
"Write lock. The :method:`db.eval()` method takes a global write lock while "
"evaluating the JavaScript function. To avoid taking this global write lock, "
"you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:48
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:50
msgid ""
"Write lock. By default, :dbcommand:`eval` command takes a global write lock "
"while evaluating the JavaScript function. If used with ``nolock: true``, the"
" :dbcommand:`eval` command does *not* take a global write lock while "
"evaluating the JavaScript function. However, the logic within the JavaScript"
" function may take write locks for write operations."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:58
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:119
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:121
msgid ""
"Certain administrative commands can exclusively lock the database for "
"extended periods of time. In some deployments, for large databases, you may "
"consider taking the :program:`mongod` instance offline so that clients are "
"not affected. For example, if a :program:`mongod` is part of a "
":term:`replica set`, take the :program:`mongod` offline and let other "
"members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:128
msgid ""
"The following administrative operations require an exclusive (i.e. write) "
"lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:131
msgid ""
":method:`db.collection.ensureIndex()`, when issued *without* setting "
"``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:133
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:134
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:135
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:136
msgid ""
":method:`db.createCollection()`, when creating a very large (i.e. many "
"gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:138
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:139
msgid ""
":method:`db.copyDatabase()`. This operation may lock all databases. See :ref"
":`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:142
msgid ""
"The following administrative commands lock the database but only hold the "
"lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:145
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:146
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:147
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:148
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:150
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:151
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:156
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:158
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:160
msgid ""
":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance "
"at once."
msgstr ""

#: ../source/faq/concurrency.txt:163
msgid ""
":method:`db.repairDatabase()` obtains a global write lock and will block "
"other operations until it finishes."
msgstr ""

#: ../source/faq/concurrency.txt:166
msgid ""
":term:`Journaling <journal>`, which is an internal operation, locks all "
"databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:170
msgid ""
":doc:`User authentication </core/authentication>` requires a read lock on "
"the ``admin`` database for deployments using :ref:`2.6 user credentials "
"<admin-system-users-collection>`. For deployments using the 2.4 schema for "
"user credentials, authentication locks the ``admin`` database as well as the"
" database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:176
msgid ""
"All writes to a replica set's :term:`primary` lock both the database "
"receiving the writes and then the ``local`` database for a short time. The "
"lock for the ``local`` database allows the :program:`mongod` to write to the"
" primary's :term:`oplog` and accounts for a small portion of the total time "
"of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:183
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:185
msgid ""
":term:`Sharding <sharding>` improves concurrency by distributing collections"
" over multiple :program:`mongod` instances, allowing shard servers (i.e. "
":program:`mongos` processes) to perform any number of operations "
"concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/faq/concurrency.txt:191
msgid ""
"Each :program:`mongod` instance is independent of the others in the shard "
"cluster and uses the MongoDB :ref:`readers-writer lock <faq-concurrency-"
"locking>`. The operations on one :program:`mongod` instance do not block the"
" operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:199
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:201
msgid ""
"In :term:`replication`, when MongoDB writes to a collection on the "
":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which "
"is a special collection in the ``local`` database.  Therefore, MongoDB must "
"lock both the collection's database and the ``local`` database. The "
":program:`mongod` must lock both databases at the same time to keep the "
"database consistent and ensure that write operations, even with replication,"
" are \"all-or-nothing\" operations."
msgstr ""

#: ../source/faq/concurrency.txt:210
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:212
msgid ""
"In :term:`replication`, MongoDB does not apply writes serially to "
":term:`secondaries <secondary>`. Secondaries collect oplog entries in "
"batches and then apply those batches in parallel. Secondaries do not allow "
"reads while applying the write operations, and apply write operations in the"
" order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:218
msgid ""
"MongoDB can apply several writes in parallel on replica set secondaries, in "
"two phases:"
msgstr ""

#: ../source/faq/concurrency.txt:221
msgid ""
"During the first *prefer* phase, under a read lock, the :program:`mongod` "
"ensures that all documents affected by the operations are in memory. During "
"this phase, other clients may execute queries against this member."
msgstr ""

#: ../source/faq/concurrency.txt:226
msgid ""
"A thread pool using write locks applies all write operations in the batch as"
" part of a coordinated write phase."
msgstr ""

#: ../source/faq/concurrency.txt:230
msgid ""
"What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""

#: ../source/faq/concurrency.txt:232
msgid ""
"The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations "
"to run at the same time. Prior to 2.4, a single :program:`mongod` could only"
" run a *single* JavaScript operation at once."
msgstr ""
