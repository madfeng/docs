# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:7
msgid ""
"This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/storage.txt:17
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:19
msgid ""
"A memory-mapped file is a file with data that the operating system places in"
" memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the "
"file to a region of virtual memory. Memory-mapped files are the critical "
"piece of the storage engine in MongoDB. By using memory mapped files MongoDB"
" can treat the contents of its data files as if they were in memory. This "
"provides MongoDB with an extremely fast and simple method for accessing and "
"manipulating data."
msgstr ""

#: ../source/faq/storage.txt:28
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:30
msgid ""
"Memory mapping assigns files to a block of virtual memory with a direct "
"byte-for-byte correlation. Once mapped, the relationship between file and "
"memory allows MongoDB to interact with the data in the file as if it were "
"memory."
msgstr ""

#: ../source/faq/storage.txt:36
msgid "How does MongoDB work with memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:38
msgid ""
"MongoDB uses memory mapped files for managing and interacting with all data."
" MongoDB memory maps data files to memory as it accesses documents. Data "
"that isn't accessed is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:45
msgid "What are page faults?"
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
msgid ""
"Page faults can occur as MongoDB reads from or writes data to parts of its "
"data files that are not currently located in physical memory. In contrast, "
"operating system page faults happen when physical memory is exhausted and "
"pages of physical memory are swapped to disk."
msgstr ""

#: ../source/faq/storage.txt:49
msgid ""
"If there is free memory, then the operating system can find the page on disk"
" and load it to memory directly. However, if there is no free memory, the "
"operating system must:"
msgstr ""

#: ../source/faq/storage.txt:53
msgid ""
"find a page in memory that is stale or no longer needed, and write the page "
"to disk."
msgstr ""

#: ../source/faq/storage.txt:56
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:58
msgid ""
"This process, particularly on an active system can take a long time, "
"particularly in comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:62 ../source/faq/storage.txt:74
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:65
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:67
msgid ""
":term:`Page faults <page fault>` occur when MongoDB needs access to data "
"that isn't currently in active memory. A \"hard\" page fault refers to "
"situations when MongoDB must access a disk to access the data. A \"soft\" "
"page fault, by contrast, merely moves memory pages from one list to another,"
" such as from an operating system file cache. In production, MongoDB will "
"rarely encounter soft page faults."
msgstr ""

#: ../source/faq/storage.txt:79
msgid "What tools can I use to investigate storage use in MongoDB?"
msgstr ""

#: ../source/faq/storage.txt:81
msgid ""
"The :method:`db.stats()` method in the :program:`mongo` shell, returns the "
"current state of the \"active\" database. The :doc:`dbStats command "
"</reference/command/dbStats>` document describes the fields in the "
":method:`db.stats()` output."
msgstr ""

#: ../source/faq/storage.txt:89
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:91
msgid ""
"Working set represents the total body of data that the application uses in "
"the course of normal operation. Often this is a subset of the total data "
"size, but the specific size of the working set depends on actual moment-to-"
"moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:96
msgid ""
"If you run a query that requires MongoDB to scan every document in a "
"collection, the working set will expand to include every document. Depending"
" on physical memory size, this may cause documents in the working set to "
"\"page out,\" or to be removed from physical memory by the operating system."
" The next time MongoDB needs to access these documents, MongoDB may incur a "
"hard page fault."
msgstr ""

#: ../source/faq/storage.txt:103
msgid ""
"If you run a query that requires MongoDB to scan every :term:`document` in a"
" collection, the working set includes every active document in memory."
msgstr ""

#: ../source/faq/storage.txt:107
msgid ""
"For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:113
msgid ""
"Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:115
msgid ""
"The data files in your data directory, which is the :file:`/data/db` "
"directory in default configurations, might be larger than the data set "
"inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:119
msgid "Preallocated data files."
msgstr ""

#: ../source/faq/storage.txt:121
msgid ""
"In the data directory, MongoDB preallocates data files to a particular size,"
" in part to prevent file system fragmentation. MongoDB names the first data "
"file ``<databasename>.0``, the next ``<databasename>.1``, etc. The first "
"file :program:`mongod` allocates is 64 megabytes, the next 128 megabytes, "
"and so on, up to 2 gigabytes, at which point all subsequent files are 2 "
"gigabytes. The data files include files with allocated space but that hold "
"no data. :program:`mongod` may allocate a 1 gigabyte data file that may be "
"90% empty. For most larger databases, unused allocated space is small "
"compared to the database."
msgstr ""

#: ../source/faq/storage.txt:132
msgid ""
"On Unix-like systems, :program:`mongod` preallocates an additional data file"
" and initializes the disk space to ``0``.  Preallocating data files in the "
"background prevents significant delays when a new database file is next "
"allocated."
msgstr ""

#: ../source/faq/storage.txt:137
msgid ""
"You can disable preallocation by setting "
":setting:`~storage.preallocDataFiles` to ``false``. However do not disable "
":setting:`~storage.preallocDataFiles` for production environments: only use "
":setting:`~storage.preallocDataFiles` for testing and with small data sets "
"where you frequently drop databases."
msgstr ""

#: ../source/faq/storage.txt:144
msgid ""
"On Linux systems you can use ``hdparm`` to get an idea of how costly "
"allocation might be:"
msgstr ""

#: ../source/faq/storage.txt:151
msgid "The :term:`oplog`."
msgstr ""

#: ../source/faq/storage.txt:153
msgid ""
"If this :program:`mongod` is a member of a replica set, the data directory "
"includes the :term:`oplog.rs <oplog>` file, which is a preallocated "
":term:`capped collection` in the ``local`` database. The default allocation "
"is approximately 5% of disk space on 64-bit installations, see :ref:`Oplog "
"Sizing <replica-set-oplog-sizing>` for more information. In most cases, you "
"should not need to resize the oplog. However, if you do, see :doc:`/tutorial"
"/change-oplog-size`."
msgstr ""

#: ../source/faq/storage.txt:162
msgid "The :term:`journal`."
msgstr ""

#: ../source/faq/storage.txt:164
msgid ""
"The data directory contains the journal files, which store write operations "
"on disk prior to MongoDB applying them to databases. See "
":doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:168
msgid "Empty records."
msgstr ""

#: ../source/faq/storage.txt:170
msgid ""
"MongoDB maintains lists of empty records in data files when deleting "
"documents and collections. MongoDB can reuse this space, but will never "
"return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:174
msgid ""
"To de-fragment allocated storage, use :dbcommand:`compact`, which de-"
"fragments allocated space. By de-fragmenting storage, MongoDB can "
"effectively use the allocated space. :dbcommand:`compact` requires up to 2 "
"gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if you"
" are critically low on disk space."
msgstr ""

#: ../source/faq/storage.txt:180
msgid ""
":dbcommand:`compact` only removes fragmentation from MongoDB data files and "
"does not return any disk space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:184
msgid ""
"To reclaim deleted space, use :dbcommand:`repairDatabase`, which rebuilds "
"the database which de-fragments the storage and may release space to the "
"operating system. :dbcommand:`repairDatabase` requires up to 2 gigabytes of "
"extra disk space to run. Do not use :dbcommand:`repairDatabase` if you are "
"critically low on disk space."
msgstr ""

#: ../source/faq/storage.txt:191
msgid ""
":dbcommand:`repairDatabase` requires enough free disk space to hold both the"
" old and new database files while the repair is running. Be aware that "
":dbcommand:`repairDatabase` will block all other operations and may take a "
"long time to complete."
msgstr ""

#: ../source/faq/storage.txt:197
msgid "How can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:199
msgid ""
"To view the size of a collection and other information, use the "
":method:`db.collection.stats()` method from the :program:`mongo` shell. The "
"following example issues :method:`db.collection.stats()` for the ``orders`` "
"collection:"
msgstr ""

#: ../source/faq/storage.txt:208
msgid "To view specific measures of size, use these methods:"
msgstr ""

#: ../source/faq/storage.txt:210
msgid ""
":method:`db.collection.dataSize()`: data size in bytes for the collection."
msgstr ""

#: ../source/faq/storage.txt:211
msgid ""
":method:`db.collection.storageSize()`: allocation size in bytes, including "
"unused space."
msgstr ""

#: ../source/faq/storage.txt:212
msgid ""
":method:`db.collection.totalSize()`: the data size plus the index size in "
"bytes."
msgstr ""

#: ../source/faq/storage.txt:213
msgid ":method:`db.collection.totalIndexSize()`: the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:215
msgid ""
"Also, the following scripts print the statistics for each database and "
"collection:"
msgstr ""

#: ../source/faq/storage.txt:227
msgid "How can I check the size of indexes?"
msgstr ""

#: ../source/faq/storage.txt:229
msgid ""
"To view the size of the data allocated for an index, use one of the "
"following procedures in the :program:`mongo` shell:"
msgstr ""

#: ../source/faq/storage.txt:232
msgid ""
"Use the :method:`db.collection.stats()` method using the index namespace. To"
" retrieve a list of namespaces, issue the following command:"
msgstr ""

#: ../source/faq/storage.txt:240
msgid ""
"Check the value of :data:`~collStats.indexSizes` in the output of the "
":method:`db.collection.stats()` command."
msgstr ""

#: ../source/faq/storage.txt:0
msgid "Example"
msgstr ""

#: ../source/faq/storage.txt:249
msgid "The command returns a list similar to the following:"
msgstr ""

#: ../source/faq/storage.txt:257
msgid ""
"View the size of the data allocated for the ``orders.$_id_`` index with the "
"following sequence of operations:"
msgstr ""

#: ../source/faq/storage.txt:266
msgid "How do I know when the server runs out of disk space?"
msgstr ""

#: ../source/faq/storage.txt:268
msgid ""
"If your server runs out of disk space for data files, you will see something"
" like this in the log:"
msgstr ""

#: ../source/faq/storage.txt:280
msgid ""
"The server remains in this state forever, blocking all writes including "
"deletes. However, reads still work. To delete some data and compact, using "
"the :dbcommand:`compact` command, you must restart the server first."
msgstr ""

#: ../source/faq/storage.txt:285
msgid ""
"If your server runs out of disk space for journal files, the server process "
"will exit. By default, :program:`mongod` creates journal files in a sub-"
"directory of :setting:`~storage.dbPath` named ``journal``. You may elect to "
"put the journal files on another storage device using a filesystem mount or "
"a symlink."
msgstr ""

#: ../source/faq/storage.txt:293
msgid ""
"If you place the journal files on a separate storage device you will not be "
"able to use a file system snapshot tool to capture a valid snapshot of your "
"data files and journal files."
msgstr ""
