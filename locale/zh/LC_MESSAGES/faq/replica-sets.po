# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/replica-sets.txt:3
msgid "FAQ: Replication and Replica Sets"
msgstr ""

#: ../source/faq/replica-sets.txt:7
msgid ""
"This document answers common questions about database replication in "
"MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/replica-sets.txt:15
msgid "What kinds of replication does MongoDB support?"
msgstr ""

#: ../source/faq/replica-sets.txt:17
msgid ""
"MongoDB supports master-slave replication and a variation on master-slave "
"replication known as replica sets. Replica sets are the recommended "
"replication topology."
msgstr ""

#: ../source/faq/replica-sets.txt:22
msgid "What do the terms \"primary\" and \"master\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:24
msgid ""
":term:`Primary` and :term:`master` nodes are the nodes that can accept "
"writes. MongoDB's replication is \"single-master:\" only one node can accept"
" write operations at a time."
msgstr ""

#: ../source/faq/replica-sets.txt:28
msgid ""
"In a replica set, if the current \"primary\" node fails or becomes "
"inaccessible, the other members can autonomously :term:`elect <election>` "
"one of the other members of the set to be the new \"primary\"."
msgstr ""

#: ../source/faq/replica-sets.txt:32
msgid ""
"By default, clients send all reads to the primary; however, :term:`read "
"preference` is configurable at the client level on a per-connection basis, "
"which makes it possible to send reads to secondary nodes instead."
msgstr ""

#: ../source/faq/replica-sets.txt:38
msgid "What do the terms \"secondary\" and \"slave\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:40
msgid ""
":term:`Secondary` and :term:`slave` nodes are read-only nodes that replicate"
" from the :term:`primary`."
msgstr ""

#: ../source/faq/replica-sets.txt:43
msgid ""
"Replication operates by way of an :term:`oplog`, from which secondary/slave "
"members apply new operations to themselves. This replication process is "
"asynchronous, so secondary/slave nodes may not always reflect the latest "
"writes to the primary. But usually, the gap between the primary and "
"secondary nodes is just few milliseconds on a local network connection."
msgstr ""

#: ../source/faq/replica-sets.txt:50
msgid "How long does replica set failover take?"
msgstr ""

#: ../source/faq/replica-sets.txt:52
msgid ""
"It varies, but a replica set will select a new primary within a minute."
msgstr ""

#: ../source/faq/replica-sets.txt:54
msgid ""
"It may take 10-30 seconds for the members of a :term:`replica set` to "
"declare a :term:`primary` inaccessible. This triggers an :term:`election`. "
"During the election, the cluster is unavailable for writes."
msgstr ""

#: ../source/faq/replica-sets.txt:59
msgid "The election itself may take another 10-30 seconds."
msgstr ""

#: ../source/faq/replica-sets.txt:63
msgid ""
":term:`Eventually consistent <eventual consistency>` reads, like the ones "
"that will return from a replica set are only possible with a :term:`write "
"concern` that permits reads from :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:69
msgid "Does replication work over the Internet and WAN connections?"
msgstr ""

#: ../source/faq/replica-sets.txt:71 ../source/faq/replica-sets.txt:137
#: ../source/faq/replica-sets.txt:254
msgid "Yes."
msgstr ""

#: ../source/faq/replica-sets.txt:73
msgid ""
"For example, a deployment may maintain a :term:`primary` and "
":term:`secondary` in an East-coast data center along with a "
":term:`secondary` member for disaster recovery in a West-coast data center."
msgstr ""

#: ../source/faq/replica-sets.txt:77
msgid ":doc:`/tutorial/deploy-geographically-distributed-replica-set`"
msgstr ""

#: ../source/faq/replica-sets.txt:80
msgid "Can MongoDB replicate over a \"noisy\" connection?"
msgstr ""

#: ../source/faq/replica-sets.txt:82
msgid "Yes, but not without connection failures and the obvious latency."
msgstr ""

#: ../source/faq/replica-sets.txt:84
msgid ""
"Members of the set will attempt to reconnect to the other members of the set"
" in response to networking flaps. This does not require administrator "
"intervention. However, if the network connections among the nodes in the "
"replica set are very slow, it might not be possible for the members of the "
"node to keep up with the replication."
msgstr ""

#: ../source/faq/replica-sets.txt:90
msgid ""
"If the TCP connection between the secondaries and the :term:`primary` "
"instance breaks, a :term:`replica set` will automatically elect one of the "
":term:`secondary` members of the set as primary."
msgstr ""

#: ../source/faq/replica-sets.txt:95
msgid ""
"What is the preferred replication method: master/slave or replica sets?"
msgstr ""

#: ../source/faq/replica-sets.txt:99
msgid ""
":term:`Replica sets <replica set>` are the preferred :term:`replication` "
"mechanism in MongoDB. However, if your deployment requires more than 12 "
"nodes, you must use master/slave replication."
msgstr ""

#: ../source/faq/replica-sets.txt:104
msgid ""
"What is the preferred replication method: replica sets or replica pairs?"
msgstr ""

#: ../source/faq/replica-sets.txt:108
msgid ""
":term:`Replica sets <replica set>` replaced :term:`replica pairs` in version"
" 1.6. :term:`Replica sets <replica set>` are the preferred "
":term:`replication` mechanism in MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:113
msgid "Why use journaling if replication already provides data redundancy?"
msgstr ""

#: ../source/faq/replica-sets.txt:115
msgid ""
":term:`Journaling <journal>` facilitates faster crash recovery. Prior to "
"journaling, crashes often required :dbcommand:`database repairs "
"<repairDatabase>` or full data resync. Both were slow, and the first was "
"unreliable."
msgstr ""

#: ../source/faq/replica-sets.txt:119
msgid ""
"Journaling is particularly useful for protection against power failures, "
"especially if your replica set resides in a single data center or power "
"circuit."
msgstr ""

#: ../source/faq/replica-sets.txt:123
msgid ""
"When a :term:`replica set` runs with journaling, :program:`mongod` instances"
" can safely restart without any administrator intervention."
msgstr ""

#: ../source/faq/replica-sets.txt:128
msgid ""
"Journaling requires some resource overhead for write operations. Journaling "
"has no effect on read performance, however."
msgstr ""

#: ../source/faq/replica-sets.txt:131
msgid ""
"Journaling is enabled by default on all 64-bit builds of MongoDB v2.0 and "
"greater."
msgstr ""

#: ../source/faq/replica-sets.txt:135
msgid ""
"Are write operations durable if write concern does not acknowledge writes?"
msgstr ""

#: ../source/faq/replica-sets.txt:139
msgid ""
"However, if you want confirmation that a given write has arrived at the "
"server, use :ref:`write concern <write-concern>`."
msgstr ""

#: ../source/faq/replica-sets.txt:142
msgid ""
"After the :ref:`default write concern change <driver-write-concern-change>`,"
" the default write concern acknowledges all write operations, and "
"unacknowledged writes must be explicitly configured. See the "
":doc:`/applications/drivers` documentation for your driver for more "
"information."
msgstr ""

#: ../source/faq/replica-sets.txt:150
msgid ""
"The :program:`mongo` shell now defaults to use :doc:`safe writes </core"
"/write-concern>`. See :ref:`write-methods-incompatibility` for more "
"information."
msgstr ""

#: ../source/faq/replica-sets.txt:154
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations. Previous versions "
"issued a :dbcommand:`getLastError` command after a write to specify a write "
"concern."
msgstr ""

#: ../source/faq/replica-sets.txt:161
msgid "How many arbiters do replica sets need?"
msgstr ""

#: ../source/faq/replica-sets.txt:163
msgid ""
"Some configurations do not require any :term:`arbiter` instances. Arbiters "
"vote in :term:`elections <election>` for :term:`primary` but do not "
"replicate the data like :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:168
msgid ""
":term:`Replica sets <replica set>` require a majority of the remaining nodes"
" present to elect a primary. Arbiters allow you to construct this majority "
"without the overhead of adding replicating nodes to the system."
msgstr ""

#: ../source/faq/replica-sets.txt:173
msgid ""
"There are many possible replica set :doc:`architectures </core/replica-set-"
"architectures>`."
msgstr ""

#: ../source/faq/replica-sets.txt:176
msgid ""
"A replica set with an odd number of voting nodes does not need an arbiter."
msgstr ""

#: ../source/faq/replica-sets.txt:178
msgid ""
"A common configuration consists of two replicating nodes that include a "
":term:`primary` and a :term:`secondary`, as well as an :term:`arbiter` for "
"the third node. This configuration makes it possible for the set to elect a "
"primary in the event of failure, without requiring three replicating nodes."
msgstr ""

#: ../source/faq/replica-sets.txt:184
msgid ""
"You may also consider adding an arbiter to a set if it has an equal number "
"of nodes in two facilities and network partitions between the facilities are"
" possible. In these cases, the arbiter will break the tie between the two "
"facilities and allow the set to elect a new primary."
msgstr ""

#: ../source/faq/replica-sets.txt:190
msgid ":doc:`/core/replica-set-architectures`"
msgstr ""

#: ../source/faq/replica-sets.txt:193
msgid ""
"What information do arbiters exchange with the rest of the replica set?"
msgstr ""

#: ../source/faq/replica-sets.txt:195
msgid ""
"Arbiters never receive the contents of a collection but do exchange the "
"following data with the rest of the replica set:"
msgstr ""

#: ../source/faq/replica-sets.txt:198
msgid ""
"Credentials used to authenticate the arbiter with the replica set. All "
"MongoDB processes within a replica set use keyfiles. These exchanges are "
"encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:202
msgid ""
"Replica set configuration data and voting data. This information is not "
"encrypted. Only credential exchanges are encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:205
msgid ""
"If your MongoDB deployment uses SSL, then all communications between "
"arbiters and the other members of the replica set are secure. See the "
"documentation for :doc:`/tutorial/configure-ssl` for more information. Run "
"all arbiters on secure networks, as with all MongoDB components."
msgstr ""

#: ../source/faq/replica-sets.txt:0
msgid "See"
msgstr ""

#: ../source/faq/replica-sets.txt:215
msgid "Which members of a replica set vote in elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:217
msgid ""
"All members of a replica set, unless the value of :data:`votes "
"<local.system.replset.members[n].votes>` is equal to ``0``, vote in "
"elections. This includes all :ref:`delayed <replica-set-delayed-members>`, "
":ref:`hidden <replica-set-hidden-members>` and :ref:`secondary-only "
"<replica-set-secondary-only-members>` members, as well as the :ref:`arbiters"
" <replica-set-arbiters>`."
msgstr ""

#: ../source/faq/replica-sets.txt:225
msgid ""
"Additionally, the :data:`~replSetGetStatus.members.state` of the voting "
"members also determine whether the member can vote. Only voting members in "
"the following states are eligible to vote:"
msgstr ""

#: ../source/faq/replica-sets.txt:229
msgid "``PRIMARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:231
msgid "``SECONDARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:233
msgid "``RECOVERING``"
msgstr ""

#: ../source/faq/replica-sets.txt:235
msgid "``ARBITER``"
msgstr ""

#: ../source/faq/replica-sets.txt:237
msgid "``ROLLBACK``"
msgstr ""

#: ../source/faq/replica-sets.txt:239 ../source/faq/replica-sets.txt:249
msgid ":ref:`replica-set-elections`"
msgstr ""

#: ../source/faq/replica-sets.txt:242
msgid "Do hidden members vote in replica set elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:244
msgid ""
":ref:`Hidden members <replica-set-hidden-members>` of :term:`replica sets "
"<replica set>` *do* vote in elections. To exclude a member from voting in an"
" :term:`election`, change the value of the member's "
":data:`~local.system.replset.members[n].votes` configuration to ``0``."
msgstr ""

#: ../source/faq/replica-sets.txt:252
msgid ""
"Is it normal for replica set members to use different amounts of disk space?"
msgstr ""

#: ../source/faq/replica-sets.txt:256
msgid ""
"Factors including: different oplog sizes, different levels of storage "
"fragmentation, and MongoDB's data file pre-allocation can lead to some "
"variation in storage utilization between nodes. Storage use disparities will"
" be most pronounced when you add members at different times."
msgstr ""
