# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:7
msgid ""
"This document answers common questions about horizontal scaling using "
"MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:15
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:17
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:19
msgid ""
"If your data set fits on a single server, you should begin with an unsharded"
" deployment."
msgstr ""

#: ../source/faq/sharding.txt:22
msgid ""
"Converting an unsharded database to a :term:`sharded cluster` is easy and "
"seamless, so there is *little advantage* in configuring sharding while your "
"data set is small."
msgstr ""

#: ../source/faq/sharding.txt:26
msgid ""
"Still, all production deployments should use :term:`replica sets "
"<replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:30
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:32
msgid ""
"To use replication with sharding, deploy each :term:`shard` as a "
":term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:38
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:40
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:42
msgid ""
"There is no automatic support in MongoDB for changing a shard key after "
"sharding a collection. This reality underscores the importance of choosing a"
" good :ref:`shard key <shard-key>`. If you *must* change a shard key after "
"sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:47
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:49
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:51
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:53
msgid ""
":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key "
"range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:56
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:58
msgid ""
"See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the "
":ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-"
"shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:64
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:66
msgid ""
"In the current implementation, all databases in a :term:`sharded cluster` "
"have a \"primary :term:`shard`.\" All unsharded collection within that "
"database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:71
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:73
msgid ""
"Sharding must be specifically enabled on a collection. After enabling "
"sharding on the collection, MongoDB will assign various ranges of collection"
" data to the different shards in the cluster. The cluster automatically "
"corrects imbalances between shards by migrating ranges of data from one "
"shard to another."
msgstr ""

#: ../source/faq/sharding.txt:80
msgid ""
"What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:82
msgid ""
"The :program:`mongos` routes the operation to the \"old\" shard, where it "
"will succeed immediately. Then the :term:`shard` :program:`mongod` instances"
" will replicate the modification to the \"new\" shard before the "
":term:`sharded cluster` updates that chunk's \"ownership,\" which "
"effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:89
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:91
msgid ""
"If a :term:`shard` is inaccessible or unavailable, queries will return with "
"an error."
msgstr ""

#: ../source/faq/sharding.txt:94
msgid ""
"However, a client may set the ``partial`` query bit, which will then return "
"results from all available shards, regardless of whether a given shard is "
"unavailable."
msgstr ""

#: ../source/faq/sharding.txt:98
msgid ""
"If a shard is responding slowly, :program:`mongos` will merely wait for the "
"shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:102
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:106
msgid ""
"The exact method for distributing queries to :term:`shards <shard>` in a "
":term:`cluster <sharded cluster>` depends on the nature of the query and the"
" configuration of the sharded cluster. Consider a sharded collection, using "
"the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` "
"attributes:"
msgstr ""

#: ../source/faq/sharding.txt:112
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:115
msgid ""
":program:`mongos` determines which shard or shards contains the relevant "
"data, based on the cluster metadata, and directs a query to the required "
"shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:120
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:122
msgid ""
":program:`mongos` can make a straightforward translation of this operation "
"into a number of queries against the relevant shards, ordered by "
"``user_id``. When the sorted queries return from all shards, the "
":program:`mongos` merges the sorted results and returns the complete result "
"to the client."
msgstr ""

#: ../source/faq/sharding.txt:128
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:130
msgid ""
"These queries must run on all shards: :program:`mongos` must parallelize the"
" query over the shards and perform a merge-sort on the ``email`` of the "
"documents found."
msgstr ""

#: ../source/faq/sharding.txt:135
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:137
msgid ""
"If you call the :method:`cursor.sort()` method on a query in a sharded "
"environment, the :program:`mongod` for each shard will sort its results, and"
" the :program:`mongos` merges each shard's results before returning them to "
"the client."
msgstr ""

#: ../source/faq/sharding.txt:143
msgid ""
"How does MongoDB ensure unique ``_id`` field values when using a shard key "
"*other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:145
msgid ""
"If you do not use ``_id`` as the shard key, then your application/client "
"layer must be responsible for keeping the ``_id`` field unique. It is "
"problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:150
msgid ""
"If you're not sharding your collection by the ``_id`` field, then you should"
" be sure to store a globally unique identifier in that field. The default "
":doc:`BSON ObjectId </reference/object-id>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:156
msgid ""
"I've enabled sharding and added a second shard, but all the data is still on"
" one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:158
msgid ""
"First, ensure that you've declared a :term:`shard key` for your collection. "
"Until you have configured the shard key, MongoDB will not create "
":term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:162
msgid ""
"Next, keep in mind that the default chunk size is 64 MB. As a result, in "
"most situations, the collection needs to have at least 64 MB of data before "
"a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:166
msgid ""
"Additionally, the system which balances chunks among the servers attempts to"
" avoid superfluous migrations. Depending on the number of shards, your shard"
" key, and the amount of data, systems often require at least 10 chunks of "
"data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:171
msgid ""
"You can run :method:`db.printShardingStatus()` to see all the chunks present"
" in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:175
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:177
msgid ""
"Yes. :program:`mongod` creates these files as backups during normal "
":term:`shard` balancing operations."
msgstr ""

#: ../source/faq/sharding.txt:180
msgid "Once these migrations are complete, you may delete these files."
msgstr ""

#: ../source/faq/sharding.txt:183
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:185
msgid ""
"Each client maintains a connection to a :program:`mongos` instance. Each "
":program:`mongos` instance maintains a pool of connections to the members of"
" a replica set supporting the sharded cluster.  Clients use connections "
"between :program:`mongos` and :program:`mongod` instances one at a time. "
"Requests are not multiplexed or pipelined. When client requests complete, "
"the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:193
msgid ""
"See the :ref:`System Resource Utilization <system-resource-utilization>` "
"section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:198
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:200
msgid ""
":program:`mongos` uses a set of connection pools to communicate with each "
":term:`shard`.  These pools do not shrink when the number of clients "
"decreases."
msgstr ""

#: ../source/faq/sharding.txt:204
msgid ""
"This can lead to an unused :program:`mongos` with a large number of open "
"connections. If the :program:`mongos` is no longer in use, it is safe to "
"restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:209
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:211
msgid ""
"Connect to the :program:`mongos` with the :program:`mongo` shell, and run "
"the following command:"
msgstr ""

#: ../source/faq/sharding.txt:221
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:223
msgid ""
"The writeback listener is a process that opens a long poll to relay writes "
"back from a :program:`mongod` or :program:`mongos` after migrations to make "
"sure they have not gone to the wrong server.  The writeback listener sends "
"writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:229
msgid ""
"These messages are a key part of the sharding infrastructure and should not "
"cause concern."
msgstr ""

#: ../source/faq/sharding.txt:233
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:235
msgid ""
"Failed migrations require no administrative intervention. Chunk migrations "
"always preserve a consistent state. If a migration fails to complete for "
"some reason, the :term:`cluster` retries the operation. When the migration "
"completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:242
msgid ""
"What is the process for moving, renaming, or changing the number of config "
"servers?"
msgstr ""

#: ../source/faq/sharding.txt:244
msgid ""
"See :doc:`/administration/sharded-clusters` for information on migrating and"
" replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:248
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:250
msgid ""
":program:`mongos` instances maintain a cache of the :term:`config database` "
"that holds the metadata for the :term:`sharded cluster`. This metadata "
"includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:255
msgid ""
":program:`mongos` updates its cache lazily by issuing a request to a shard "
"and discovering that its metadata is out of date.  There is no way to "
"control this behavior from the client, but you can run the "
":dbcommand:`flushRouterConfig` command against any :program:`mongos` to "
"force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:262
msgid ""
"Is it possible to quickly update ``mongos`` servers after updating a replica"
" set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:264
msgid ""
"The :program:`mongos` instances will detect these changes without "
"intervention over time. However, if you want to force the :program:`mongos` "
"to reload its configuration, run the :dbcommand:`flushRouterConfig` command "
"against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:271
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:273
msgid ""
"The :setting:`~net.maxIncomingConnections` option limits the number of "
"connections accepted by :program:`mongos`."
msgstr ""

#: ../source/faq/sharding.txt:276
msgid ""
"If your client driver or application creates a large number of connections "
"but allows them to time out rather than closing them explicitly, then it "
"might make sense to limit the number of connections at the :program:`mongos`"
" layer."
msgstr ""

#: ../source/faq/sharding.txt:281
msgid ""
"Set :setting:`~net.maxIncomingConnections` to a value slightly higher than "
"the maximum number of connections that the client creates, or the maximum "
"size of the connection pool. This setting prevents the :program:`mongos` "
"from causing connection spikes on the individual :term:`shards <shard>`. "
"Spikes like these may disrupt the operation and memory allocation of the "
":term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:289
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:291
msgid ""
"If the query does not include the :term:`shard key`, the :program:`mongos` "
"must send the query to all shards as a \"scatter/gather\" operation. Each "
"shard will, in turn, use *either* the shard key index or another more "
"efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:296
msgid ""
"If the query includes multiple sub-expressions that reference the fields "
"indexed by the shard key *and* the secondary index, the :program:`mongos` "
"can route the queries to a specific shard and the shard will use the index "
"that will allow it to fulfill most efficiently. See `this presentation "
"<http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for "
"more information."
msgstr ""

#: ../source/faq/sharding.txt:304
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:306
msgid ""
":term:`Shard keys <shard key>` can be random. Random keys ensure optimal "
"distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:309
msgid ""
":term:`Sharded clusters <sharded cluster>`, attempt to route queries to "
"*specific* shards when queries include the shard key as a parameter, because"
" these directed queries are more efficient. In many cases, random keys can "
"make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:318
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:320
msgid ""
"Yes. There is no requirement that documents be evenly distributed by the "
"shard key."
msgstr ""

#: ../source/faq/sharding.txt:323
msgid ""
"However, documents that have the same shard key *must* reside in the same "
"*chunk* and therefore on the same server. If your sharded data set has too "
"many documents with the exact same shard key you will not be able to "
"distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:331
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:333
msgid ""
"You can use any field for the shard key. The ``_id`` field is a common shard"
" key."
msgstr ""

#: ../source/faq/sharding.txt:336
msgid ""
"Be aware that ``ObjectId()`` values, which are the default value of the "
"``_id`` field, increment as a timestamp. As a result, when used as a shard "
"key, all new documents inserted into the collection will initially belong to"
" the same chunk on a single shard. Although the system will eventually "
"divide this chunk and migrate its contents to distribute data more evenly, "
"at any moment the cluster can only direct insert operations at a single "
"shard. This can limit the throughput of inserts. If most of your write "
"operations are updates, this limitation should not impact your performance. "
"However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:347
msgid ""
"To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys "
"<sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:351
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:353
msgid ""
"At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the "
":term:`shard` must connect to the :term:`config database` to update the "
"chunk's record in the cluster metadata. If the :term:`shard` fails to "
"connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:364
msgid ""
"When this happens, the :term:`primary` member of the shard's replica set "
"then terminates to protect data consistency. If a :term:`secondary` member "
"can access the config database, data on the shard becomes accessible again "
"after an election."
msgstr ""

#: ../source/faq/sharding.txt:369
msgid ""
"The user will need to resolve the chunk migration failure independently. If "
"you encounter this issue, contact the `MongoDB User Group "
"<http://groups.google.com/group/mongodb-user>`_ or :about:`MongoDB Support "
"</support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:375
msgid ""
"How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:377
msgid ""
"The sharded cluster balancing process controls both migrating chunks from "
"decommissioned shards (i.e. draining) and normal cluster balancing "
"activities. Consider the following behaviors for different versions of "
"MongoDB in situations where you remove a shard in a cluster with an uneven "
"chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:383
msgid ""
"After MongoDB 2.2, the balancer first removes the chunks from the draining "
"shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:387
msgid ""
"Before MongoDB 2.2, the balancer handles the uneven chunk distribution and "
"*then* removes the chunks from the draining shard."
msgstr ""
