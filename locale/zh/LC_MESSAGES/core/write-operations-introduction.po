# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-09 21:17+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Chinese (http://www.transifex.com/projects/p/mongodb-manual/language/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# f7dff6d3655348a79b31302c9c97b3f2
#: ../source/core/write-operations-introduction.txt:6
msgid "Write Operations Overview"
msgstr ""

# 7012e69d166b4610a5d2c6cd8c1b3441
#: ../source/core/write-operations-introduction.txt:10
msgid ""
"A write operation is any operation that creates or modifies data in the "
"MongoDB instance. In MongoDB, write operations target a single "
":term:`collection`. All write operations in MongoDB are atomic on the level "
"of a single :term:`document`."
msgstr ""

# f256b0fbb84243b9b5e0a9e9ff0cac8b
#: ../source/core/write-operations-introduction.txt:22
msgid ""
"For the update and remove operations, you can specify criteria, or "
"conditions, that identify the documents to update or remove. These "
"operations use the same query syntax to specify the criteria as :doc:`read "
"operations </core/read-operations>`."
msgstr ""

# 358ffc1f475841d2bca7ab45bb51d34c
#: ../source/core/write-operations-introduction.txt:39
msgid ""
"The following diagram highlights the components of a MongoDB insert "
"operation:"
msgstr ""

# ff4e31c713d548e79f2feca1d8466234
# b9827a89e2844e6582c6f828666980f4
# 0f6480a505094100b8da3f811797e1ea
#: ../source/core/write-operations-introduction.txt:44
#: ../source/core/write-operations-introduction.txt:105
#: ../source/core/write-operations-introduction.txt:180
msgid "The following diagram shows the same query in SQL:"
msgstr ""

# dc16525bd83e44c3bf9c148ed5d25b98
# 1436423574fd488c9f654905752460b3
# 198bc91cd1c34ac99c054e2d57641b67
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
msgid "Example"
msgstr ""

# 04bfd750b81a4036831aae7879078ace
#: ../source/core/write-operations-introduction.txt:50
msgid ""
"The following operation inserts a new documents into the ``users`` "
"collection. The new document has four fields ``name``, ``age``, and "
"``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to "
"the new document if that field does not exist."
msgstr ""

# 5d5d22e359f848dbbc5f3a69ede2b2dc
#: ../source/core/write-operations-introduction.txt:68
msgid "Insert Behavior"
msgstr ""

# 7d9680fbbb6945baa645a32327d5b506
#: ../source/core/write-operations-introduction.txt:70
msgid ""
"If you add a new document *without* the :term:`_id` field, the client "
"library or the :program:`mongod` instance adds an ``_id`` field and "
"populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

# 210fce5e35d04b73a1a5f009618e09c1
#: ../source/core/write-operations-introduction.txt:74
msgid ""
"If you specify the ``_id`` field, the value must be unique within the "
"collection. For operations with :ref:`write concern <write-concern>`, if you"
" try to create a document with a duplicate ``_id`` value, :program:`mongod` "
"returns a duplicate key exception."
msgstr ""

# 4806a946493444ad807e2d553da94357
#: ../source/core/write-operations-introduction.txt:91
msgid "Update"
msgstr ""

# 446e6234b57141e5b0c30a6218e606f8
#: ../source/core/write-operations-introduction.txt:100
msgid ""
"The following diagram highlights the components of a MongoDB update "
"operation:"
msgstr ""

# 71ee295adff2403aa0c2ecf01c07cb7d
#: ../source/core/write-operations-introduction.txt:119
msgid ""
"This update operation on the ``users`` collection sets the ``status`` field "
"to ``A`` for the documents that match the criteria of ``age`` greater than "
"``18``."
msgstr ""

# a57215d31f6c469b99f9c9ae1a8059c9
#: ../source/core/write-operations-introduction.txt:131
msgid ""
"By default, the :method:`db.collection.update()` method updates a **single**"
" document. However, with the ``multi`` option, "
":method:`~db.collection.update()` can update all documents in a collection "
"that match a query."
msgstr ""

# b9d6d948a2dc44068ad5a10e4dfeeb29
#: ../source/includes/fact-update-field-order.rst:1
msgid ""
"When performing update operations that increase the document size beyond the"
" allocated space for that document, the update operation relocates the "
"document on disk."
msgstr ""

# 62927f2e638749aaa24266fed4646fac
#: ../source/includes/fact-update-field-order.rst:7
msgid ""
"MongoDB preserves the order of the document fields following write "
"operations *except* for the following cases:"
msgstr ""

# 96dae4a6567c47869c94fc64889537cc
#: ../source/includes/fact-update-field-order.rst:10
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

# 10f92c9516004a93a5d21a26616ef430
#: ../source/includes/fact-update-field-order.rst:12
msgid ""
"Updates that include :update:`renaming <$rename>` of field names may result "
"in the reordering of fields in the document."
msgstr ""

# 4b1c7cb2845c423c8811493406394c70
#: ../source/includes/fact-update-field-order.rst:17
msgid ""
"Starting in version 2.6, MongoDB actively attempts to preserve the field "
"order in a document. Before version 2.6, MongoDB did not actively preserve "
"the order of the fields in a document."
msgstr ""

# d0210c94c4cb41edac2c42f4c470b333
#: ../source/core/write-operations-introduction.txt:175
msgid ""
"The following diagram highlights the components of a MongoDB remove "
"operation:"
msgstr ""

# 5a36aa5b7a0f418e8c39dfa0a099bdec
#: ../source/core/write-operations-introduction.txt:192
msgid ""
"This delete operation on the ``users`` collection removes all documents that"
" match the criteria of ``status`` equal to ``D``."
msgstr ""

# fc25f26e52ba4792b5052f2b994b1cc8
#: ../source/core/write-operations-introduction.txt:195
msgid ""
"For more information, see :method:`db.collection.remove()` method and "
":doc:`/tutorial/remove-documents`."
msgstr ""

# 87de168b503e41dd953f58c1ad981523
#: ../source/core/write-operations-introduction.txt:199
msgid "Remove Behavior"
msgstr ""

# 6d257f189dc14723a148d802acdd16d7
#: ../source/core/write-operations-introduction.txt:201
msgid ""
"By default, :method:`db.collection.remove()` method removes all documents "
"that match its query. However, the method can accept a flag to limit the "
"delete operation to a single document."
msgstr ""

# fefe60d2eec24133a0cfcb7a70db3761
#: ../source/core/write-operations-introduction.txt:208
msgid "Isolation of Write Operations"
msgstr ""

# deba503de12a49ce8ea37f7c135b7c75
#: ../source/core/write-operations-introduction.txt:210
msgid ""
"The modification of a single document is always atomic, even if the write "
"operation modifies multiple sub-documents *within* that document. For write "
"operations that modify multiple documents, the operation as a whole is not "
"atomic, and other operations may interleave."
msgstr ""

# 7244dd9124e24d1381d2984711f933fb
#: ../source/core/write-operations-introduction.txt:216
msgid ""
"No other operations are atomic. You can, however, attempt to isolate a write"
" operation that affects multiple documents using the :doc:`isolation "
"operator </reference/operator/update/isolated>`."
msgstr ""

# cebadf871fb5448d9ef008d63cb2341a
#: ../source/core/write-operations-introduction.txt:220
msgid ""
"To isolate a sequence of write operations from other read and write "
"operations, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

# 96a8e0cc9c62454eb7752291ef4d6f6a
# 3cd930c62eaa407bb0dbd4fdcfd0ba1b
#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
msgid "write operations"
msgstr ""

# 3cd930c62eaa407bb0dbd4fdcfd0ba1b
#: ../source/core/write-operations-introduction.txt:2
msgid "crud"
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
msgid ""
"There are three classes of write operations in MongoDB: :ref:`insert <write-"
"op-insert>`, :ref:`update <write-op-update>`, and :ref:`remove <write-op-"
"remove>`. Insert operations add new data to a collection. Update operations "
"modify existing data, and remove operations delete data from a collection. "
"No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:27
msgid ""
"MongoDB allows applications to determine the acceptable level of "
"acknowledgement required of write operations. See :doc:`/core/write-concern`"
" for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
msgid "Insert"
msgstr ""

#: ../source/core/write-operations-introduction.txt:36
msgid ""
"In MongoDB, the :method:`db.collection.insert()` method adds new "
":term:`documents <document>` to a collection."
msgstr ""

#: ../source/core/write-operations-introduction.txt:65
msgid ""
"For more information and examples, see :method:`db.collection.insert()`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:80
msgid "Other Methods to Add Documents"
msgstr ""

#: ../source/core/write-operations-introduction.txt:82
msgid ""
"You can also add new documents to a collection using methods that have an "
":ref:`upsert <write-operations-upsert-behavior>` option. If the option is "
"set to ``true``, these methods will either modify existing documents or add "
"a new document when no matching documents exist for the query. For more "
"information, see :ref:`write-operations-upsert-behavior`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:93
msgid ""
"In MongoDB, the :method:`db.collection.update()` method modifies existing "
":term:`documents <document>` in a :term:`collection`. The "
":method:`db.collection.update()` method can accept query criteria to "
"determine which documents to update as well as an options document that "
"affects its behavior, such as the ``multi`` option to update multiple "
"documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:123
msgid ""
"For more information, see :method:`db.collection.update()` and "
":ref:`update() Examples <update-method-examples>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:129
msgid "Default Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:136
msgid ""
"The :method:`db.collection.update()` method either updates specific fields "
"in the existing document or replaces the document. See "
":method:`db.collection.update()` for details as well as examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:145
msgid "Update Behavior with the ``upsert`` Option"
msgstr ""

#: ../source/core/write-operations-introduction.txt:147
msgid ""
"If the :method:`~db.collection.update()` method includes :ref:`upsert: true "
"<upsert-parameter>` *and* no documents match the query portion of the update"
" operation, then the update operation creates a new document. If there are "
"matching documents, then the update operation with the :ref:`upsert: true "
"<upsert-parameter>` modifies the matching document or documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:154
msgid ""
"By specifying :term:`upsert: true <upsert>`, applications can indicate, in a"
" *single* operation, that if no matching documents are found for the update,"
" an insert should be performed. See :method:`~db.collection.update()` for "
"details on performing an :ref:`upsert <upsert-parameter>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:162
msgid ""
"In 2.6, the new :method:`Bulk()` methods and the underlying "
":dbcommand:`update` command allow you to perform many updates with ``upsert:"
" true`` operations in a single call."
msgstr ""

#: ../source/core/write-operations-introduction.txt:169
msgid "Remove"
msgstr ""

#: ../source/core/write-operations-introduction.txt:171
msgid ""
"In MongoDB, the :method:`db.collection.remove()` method deletes documents "
"from a collection. The :method:`db.collection.remove()` method accepts a "
"query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:224
msgid "Additional Methods"
msgstr ""

#: ../source/core/write-operations-introduction.txt:226
msgid ""
"The :method:`db.collection.save()` method can either update an existing "
"document or an insert a document if the document cannot be found by the "
"``_id`` field. See :method:`db.collection.save()` for more information and "
"examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:231
msgid ""
"MongoDB also provides methods to perform write operations in bulk. See "
":method:`Bulk()` for more information."
msgstr ""

#~ msgid ""
#~ "There are three classes of write operations in MongoDB: insert, update, and "
#~ "remove. Insert operations add new data to a collection. Update operations "
#~ "modify existing data, and remove operations delete data from a collection. "
#~ "No insert, update, or remove can affect more than one document atomically."
#~ msgstr ""

#~ msgid ""
#~ "After issuing these modification operations, MongoDB allows applications to "
#~ "determine the level of acknowledgment returned from the database. See "
#~ ":doc:`/core/write-concern`."
#~ msgstr ""

#~ msgid "Create"
#~ msgstr ""

#~ msgid ""
#~ "Create operations add new :term:`documents <document>` to a collection. In "
#~ "MongoDB, the :method:`db.collection.insert()` method perform create "
#~ "operations."
#~ msgstr ""

#~ msgid ""
#~ "For more information, see :method:`db.collection.insert()` and "
#~ ":doc:`/tutorial/insert-documents`."
#~ msgstr ""

#~ msgid ""
#~ "Some updates also create records. If an update operation specifies the "
#~ ":term:`upsert` flag *and* there are no documents that match the query "
#~ "portion of the update operation, then MongoDB will convert the update into "
#~ "an insert."
#~ msgstr ""

#~ msgid ""
#~ "With an :term:`upsert`, applications can decide between performing an update"
#~ " or an insert operation using just a single call. Both the "
#~ ":method:`~db.collection.update()` method and the "
#~ ":method:`~db.collection.save()` method can perform an :term:`upsert`. See "
#~ ":method:`~db.collection.update()` and :method:`~db.collection.save()` for "
#~ "details on performing an :term:`upsert` with these methods."
#~ msgstr ""

#~ msgid "See"
#~ msgstr ""

#~ msgid ""
#~ "Update operations modify existing :term:`documents <document>` in a "
#~ ":term:`collection`. In MongoDB, :method:`db.collection.update()` and the "
#~ ":method:`db.collection.save()` methods perform update operations. The "
#~ ":method:`db.collection.update()` method can accept query criteria to "
#~ "determine which documents to update as well as an option to update multiple "
#~ "rows. The method can also accept options that affect its behavior such as "
#~ "the ``multi`` option to update multiple documents."
#~ msgstr ""

#~ msgid ""
#~ "For more information, see :method:`db.collection.update()` and "
#~ ":method:`db.collection.save()`, and :doc:`/tutorial/modify-documents` for "
#~ "examples."
#~ msgstr ""

#~ msgid "Update Behavior"
#~ msgstr ""

#~ msgid ""
#~ "The :method:`db.collection.update()` method either updates specific fields "
#~ "in the existing document or replaces the document. See "
#~ ":method:`db.collection.update()` for details."
#~ msgstr ""

#~ msgid ""
#~ "The :method:`db.collection.save()` method replaces a document and can only "
#~ "update a single document. See :method:`db.collection.save()` and "
#~ ":doc:`/tutorial/insert-documents` for more information"
#~ msgstr ""

#~ msgid "Delete"
#~ msgstr ""

#~ msgid ""
#~ "Delete operations remove documents from a collection. In MongoDB, "
#~ ":method:`db.collection.remove()` method performs delete operations. The "
#~ ":method:`db.collection.remove()` method accepts a query criteria to "
#~ "determine which documents to remove."
#~ msgstr ""
