# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-09 21:17+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Chinese (http://www.transifex.com/projects/p/mongodb-manual/language/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 57071c74ced7460f87ee35548e32ea8a
#: ../source/core/storage.txt:3
msgid "Storage"
msgstr ""

# bcee5dd21cb142df9dc7dc98e7392183
#: ../source/core/storage.txt:8
msgid "Data Model"
msgstr ""

# a24d532d3efb42d2a2f8ce458972819c
#: ../source/core/storage.txt:10
msgid ""
"MongoDB stores data in the form of :term:`BSON` documents, which are rich "
"mappings of keys, or field names, to values. BSON supports a rich collection"
" of types, and fields in BSON documents may hold arrays of values or "
"embedded documents. All documents in MongoDB must be less than 16MB, which "
"is the :limit:`BSON document size <BSON Document Size>`."
msgstr ""

# 3f9513d797f74ca1b82007e297c513c1
#: ../source/core/storage.txt:16
msgid ""
"Every document in MongoDB is stored in a *record* which contains the "
"document itself and extra space, or :term:`padding`, which allows the "
"document to grow as the result of updates."
msgstr ""

# f74bb954bae440c09e11c469e53ef393
#: ../source/core/storage.txt:20
msgid ""
"All records are contiguously located on disk, and when a document becomes "
"larger than the allocated record, MongoDB must allocate a new record. New "
"allocations require MongoDB to move a document and update all indexes that "
"refer to the document, which takes more time than in-place updates and leads"
" to storage fragmentation."
msgstr ""

# b5aa21a399b14d558e48639580a3a976
#: ../source/core/storage.txt:27
msgid ""
"All records are part of a :term:`collection`, which is a logical grouping of"
" documents in a MongoDB database. The documents in a collection share a set "
"of indexes, and typically these documents share common fields and structure."
msgstr ""

# 97d4212d8cf740b1b5354cb6e8ab445c
#: ../source/core/storage.txt:32
msgid ""
"In MongoDB the :term:`database` construct is a group of related collections."
" Each database has a distinct set of data files and can contain a large "
"number of collections. Also, each database has one distinct write lock, that"
" blocks operations to the database during write operations. A single MongoDB"
" deployment may have many databases."
msgstr ""

# 81fcb505f76647b0bca92fbce67e8903
#: ../source/core/storage.txt:40
msgid "Journal"
msgstr ""

# 15a3d69b12ee4cc6b761fa7eb39bafd9
#: ../source/core/storage.txt:42
msgid ""
"In order to ensure that all modifications to a MongoDB data set are durably "
"written to disk, MongoDB records all modifications to a journal that it "
"writes to disk more frequently than it writes the data files. The journal "
"allows MongoDB to successfully recover data from data files after a "
":program:`mongod` instance exits without flushing all changes."
msgstr ""

# c7440407ab4e4337b252abae59e367eb
#: ../source/core/storage.txt:49
msgid ""
"See :doc:`/core/journaling` for more information about the journal in "
"MongoDB."
msgstr ""

# 2614d1690bea45bea8ff232441b37aba
#: ../source/core/storage.txt:55
msgid "Record Allocation Strategies"
msgstr ""

# 35abccd92c0f42d09421daaf3fb258fb
#: ../source/core/storage.txt:66
msgid ""
"Different allocation strategies support different kinds of workloads: the "
":ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for"
" insert/update/delete workloads; while :ref:`exact fit allocations <exact-"
"fit-allocation>` is ideal for collections *without* update and delete "
"workloads."
msgstr ""

# 0b78a919ad0b442c9b010dc755359c02
#: ../source/core/storage.txt:75
msgid "Power of 2 Sized Allocations"
msgstr ""

# ce93130b8a7c457997eb1c7bbda5ef40
#: ../source/core/storage.txt:77
msgid ""
"For all new collections, :collflag:`usePowerOf2Sizes` became the default "
"allocation strategy. To change the default allocation strategy, use the "
":parameter:`newCollectionsUsePowerOf2Sizes` parameter."
msgstr ""

# b71ffab07f0b4c58b79a7eebadf6b376
#: ../source/core/storage.txt:82
msgid ""
":program:`mongod` uses an allocation strategy called "
":collflag:`usePowerOf2Sizes` where each record has a size in bytes that is a"
" power of 2 (e.g. 32, 64, 128, 256, 512...16777216.) The smallest allocation"
" for a document is 32 bytes. The power of 2 sizes allocation strategy has "
"two key properties:"
msgstr ""

# 1195e862696b4585a6aa119e16f0aa7a
#: ../source/core/storage.txt:88
msgid ""
"there are a limited number of record allocation sizes, which makes it easier"
" for :program:`mongod` to reuse existing allocations, which will reduce "
"fragmentation in some cases."
msgstr ""

# 6c1bb561d0994b9b9815499089f1f522
#: ../source/core/storage.txt:92
msgid ""
"in many cases, the record allocations are significantly larger than the "
"documents they hold. This allows documents to grow while minimizing or "
"eliminating the chance that the :program:`mongod` will need to allocate a "
"new record if the document grows."
msgstr ""

# d1ab57ce0d534d418be0583cab43e4a1
#: ../source/core/storage.txt:97
msgid ""
"The :collflag:`usePowerOf2Sizes` strategy does not *eliminate* document "
"reallocation as a result of document growth, but it minimizes its occurrence"
" in many common operations."
msgstr ""

# 8a958572e334499ba2c437831c78ba14
#: ../source/core/storage.txt:104
msgid "Exact Fit Allocation"
msgstr ""

# 36d58b4d57f24905be141b4600f7e061
#: ../source/core/storage.txt:123
msgid ""
"The size of each record in a collection reflects the size of the padding "
"factor at the time of allocation. See the :data:`~collStats.paddingFactor` "
"field in the output of :method:`db.collection.stats()` to see the current "
"padding factor for a collection."
msgstr ""

# 2836ac42ef4c440cb718b0e43474a834
#: ../source/core/storage.txt:129
msgid ""
"On average, this exact fit allocation strategy uses less storage space than "
"the :collflag:`usePowerOf2Sizes` strategy but will result in higher levels "
"of storage fragmentation if documents grow beyond the size of their initial "
"allocation."
msgstr ""

# 87909d256b7345628c6a54db28ba72a7
#: ../source/core/storage.txt:134
msgid ""
"The :dbcommand:`compact` and :dbcommand:`repairDatabase` operations remove "
"padding by default, as do the :program:`mongodump` and "
":program:`mongorestore`. :dbcommand:`compact` does allow you to specify a "
"padding for records during compaction."
msgstr ""

# 3cdac6e61474498989efdb117fed5475
#: ../source/core/storage.txt:140
msgid "Capped Collections"
msgstr ""

# 47cd9806c4a248389d5438ddf13fd728
#: ../source/core/storage.txt:142
msgid ""
":term:`Capped collections <capped collection>` are fixed-size collections "
"that support high-throughput operations that store records in insertion "
"order. Capped collections work like circular buffers: once a collection "
"fills its allocated space, it makes room for new documents by overwriting "
"the oldest documents in the collection."
msgstr ""

# fd03f499b7ba481cad994a0bdc2f068a
#: ../source/core/storage.txt:148
msgid "See :doc:`/core/capped-collections` for more information."
msgstr ""

#: ../source/core/storage.txt:57
msgid ""
"MongoDB supports multiple record allocation strategies that determine how "
":program:`mongod` adds padding to a document when creating a record. Because"
" documents in MongoDB may grow after insertion and all records are "
"contiguous on disk, the padding can reduce the need to relocate documents on"
" disk following updates. Relocations are less efficient than in-place "
"updates, and can lead to storage fragmentation. As a result, all padding "
"strategies trade additional space for increased efficiency and decreased "
"fragmentation."
msgstr ""

#: ../source/core/storage.txt:106
msgid ""
"The exact fit allocation strategy allocates record sizes based on the size "
"of the document and an additional *padding factor*. Each collection has its "
"own padding factor, which defaults to ``1`` when you insert the first "
"document in a collection. MongoDB dynamically adjusts the padding factor up "
"to ``2`` depending on the rate of growth of the documents over the life of "
"the collection."
msgstr ""

#: ../source/core/storage.txt:113
msgid ""
"To estimate total record size, compute the product of the padding factor and"
" the size of the document. That is:"
msgstr ""

#~ msgid ""
#~ "MongoDB supports multiple record allocation strategies that determine how "
#~ ":program:`mongod` adds padding to a document when creating a :term:`record`."
#~ " Because documents in MongoDB may grow after insertion and all records are "
#~ "contiguous on disk, the padding can reduce the need to relocate documents on"
#~ " disk following updates. Relocations are less efficient than in-place "
#~ "updates, and can lead to storage fragmentation. As a result, all padding "
#~ "strategies trade additional space for increased efficiency and decreased "
#~ "fragmentation."
#~ msgstr ""

#~ msgid ""
#~ "The exact fit allocation strategy allocates record sizes based on the size "
#~ "of the document and an additional *padding factor*. Each collection has its "
#~ "own padding factor, which defaults to ``0`` when you insert the first "
#~ "document in a collection, and may grow incrementally to ``2`` as as "
#~ "documents grow as a result of updates."
#~ msgstr ""

#~ msgid ""
#~ "Multiply the size of a document by the padding factor to determine the total"
#~ " record size. That is:"
#~ msgstr ""
