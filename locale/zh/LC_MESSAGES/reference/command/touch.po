# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/touch.txt:3
msgid "touch"
msgstr ""

#: ../source/reference/command/touch.txt:11
msgid ""
"The :dbcommand:`touch` command loads data from the data storage layer into "
"memory. :dbcommand:`touch` can load the data (i.e. documents) indexes or "
"both documents and indexes. Use this command to ensure that a collection, "
"and/or its indexes, are in memory before another operation. By loading the "
"collection or indexes into memory, :program:`mongod` will ideally be able to"
" perform subsequent operations more efficiently. The :dbcommand:`touch` "
"command has the following prototypical form:"
msgstr ""

#: ../source/reference/command/touch.txt:24
msgid ""
"By default, ``data`` and ``index`` are false, and :dbcommand:`touch` will "
"perform no operation. For example, to load both the data and the index for a"
" collection named ``records``, you would use the following command in the "
":program:`mongo` shell:"
msgstr ""

#: ../source/reference/command/touch.txt:33
msgid ""
":dbcommand:`touch` will not block read and write operations on a "
":program:`mongod`, and can run on :term:`secondary` members of replica sets."
msgstr ""

#: ../source/reference/command/touch.txt:39
msgid ""
"Using :dbcommand:`touch` to control or tweak what a :program:`mongod` stores"
" in memory may displace other records data in memory and hinder performance."
" Use with caution in production systems."
msgstr ""

#: ../source/reference/command/touch.txt:46
msgid ""
"If you run :dbcommand:`touch` on a secondary, the secondary will enter a "
"``RECOVERING`` state to prevent clients from sending read operations during "
"the :dbcommand:`touch` operation. When :dbcommand:`touch` finishes the "
"secondary will automatically return to ``SECONDARY`` state.  See "
":data:`~replSetGetStatus.members.state` for more information on replica set "
"member states."
msgstr ""
