# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/getLastError.txt:3
msgid "getLastError"
msgstr ""

#: ../source/reference/command/getLastError.txt:8
msgid "Definition"
msgstr ""

#: ../source/includes/fact-2.6-wc-gle-change.rst:3
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations, eliminating the need "
"for a separate |gle|. Write methods now return the status of the write "
"operation, including error information."
msgstr ""

#: ../source/includes/fact-2.6-wc-gle-change.rst:9
msgid ""
"In previous versions, clients typically used the |gle| in combination with "
"the write operations to ensure that the write succeeds."
msgstr ""

#: ../source/reference/command/getLastError.txt:16
msgid ""
"Returns the error status of the preceding write operation on the *current "
"connection*."
msgstr ""

#: ../source/reference/command/getLastError.txt:19
msgid ":dbcommand:`getLastError` uses the following prototype form:"
msgstr ""

#: ../source/reference/command/getLastError.txt:25
msgid ":dbcommand:`getLastError` uses the following fields:"
msgstr ""

#: ../source/reference/command/getLastError.txt:29
msgid ""
":doc:`Write Concern </core/write-concern>`, :doc:`/reference/write-concern`,"
" and :ref:`replica-set-write-concern`."
msgstr ""

#: ../source/reference/command/getLastError.txt:33
msgid "Output"
msgstr ""

#: ../source/reference/command/getLastError.txt:35
msgid ""
"Each :dbcommand:`~db.collection.getLastError()` command returns a document "
"containing a subset of the fields listed below."
msgstr ""

#: ../source/reference/command/getLastError.txt:40
msgid ""
":data:`~getLastError.ok` is ``true`` when the :dbcommand:`getLastError` "
"command completes successfully."
msgstr ""

#: ../source/reference/command/getLastError.txt:43
msgid ""
"A value of ``true`` does *not* indicate that the preceding operation did not"
" produce an error."
msgstr ""

#: ../source/reference/command/getLastError.txt:48
msgid ""
":data:`~getLastError.err` is ``null`` unless an error occurs. When there was"
" an error with the preceding operation, ``err`` contains a textual "
"description of the error."
msgstr ""

#: ../source/reference/command/getLastError.txt:54
msgid ""
":data:`~getLastError.code` reports the preceding operation's error code."
msgstr ""

#: ../source/reference/command/getLastError.txt:59
msgid "The identifier of the connection."
msgstr ""

#: ../source/reference/command/getLastError.txt:63
msgid ""
"When issued against a replica set member and the preceding operation was a "
"write or update, :data:`~getLastError.lastOp` is the *optime* timestamp in "
"the :term:`oplog`  of the change."
msgstr ""

#: ../source/reference/command/getLastError.txt:69
msgid ""
":data:`~getLastError.n` reports the number of documents updated or removed, "
"if the preceding operation was an update or remove operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:75
msgid ""
"When issued against a sharded cluster after a write operation, "
":data:`~getLastError.shards` identifies the shards targeted in the write "
"operation. :data:`~getLastError.shards` is present in the output only if the"
" write operation targets multiple shards."
msgstr ""

#: ../source/reference/command/getLastError.txt:82
msgid ""
"When issued against a sharded cluster after a write operation, identifies "
"the shard targeted in the write operation. :data:`~getLastError.singleShard`"
" is only present if the write operation targets exactly one shard."
msgstr ""

#: ../source/reference/command/getLastError.txt:89
msgid ""
":data:`~getLastError.updatedExisting` is ``true`` when an update affects at "
"least one document and does not result in an :term:`upsert`."
msgstr ""

#: ../source/reference/command/getLastError.txt:95
msgid ""
"If the update results in an insert, :data:`~getLastError.upserted` is the "
"value of ``_id`` field of the document."
msgstr ""

#: ../source/reference/command/getLastError.txt:98
msgid ""
"Earlier versions of MongoDB included :data:`~getLastError.upserted` only if "
"``_id`` was an :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/reference/command/getLastError.txt:105
msgid ""
"If set, ``wnote`` indicates that the preceding operation's error relates to "
"using the ``w`` parameter to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:0
msgid "See"
msgstr ""

#: ../source/reference/command/getLastError.txt:113
msgid ""
":data:`~getLastError.wtimeout` is ``true`` if the :dbcommand:`getLastError` "
"timed out because of the ``wtimeout`` setting to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:119
msgid ""
"If the preceding operation specified a timeout using the ``wtimeout`` "
"setting to :dbcommand:`getLastError`, then :data:`~getLastError.waited` "
"reports the number of milliseconds :dbcommand:`getLastError` waited before "
"timing out."
msgstr ""

#: ../source/reference/command/getLastError.txt:126
msgid ""
":data:`getLastError.wtime` is the number of milliseconds spent waiting for "
"the preceding operation to complete. If :dbcommand:`getLastError` timed out,"
" :data:`~getLastError.wtime` and :dbcommand:`getLastError.waited` are equal."
msgstr ""

#: ../source/reference/command/getLastError.txt:134
msgid "Examples"
msgstr ""

#: ../source/reference/command/getLastError.txt:137
msgid "Confirm Replication to Two Replica Set Members"
msgstr ""

#: ../source/reference/command/getLastError.txt:139
msgid ""
"The following example ensures the operation has replicated to two members "
"(the primary and one other member):"
msgstr ""

#: ../source/reference/command/getLastError.txt:147
msgid "Confirm Replication to a Majority of a Replica Set"
msgstr ""

#: ../source/reference/command/getLastError.txt:149
msgid ""
"The following example ensures the write operation has replicated to a "
"majority of the configured members of the set."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr ""

#: ../source/reference/command/getLastError.txt:159
msgid "Set a Timeout for a ``getLastError`` Response"
msgstr ""

#: ../source/reference/command/getLastError.txt:161
msgid ""
"Unless you specify a timeout, a :dbcommand:`getLastError` command may block "
"forever if MongoDB cannot satisfy the requested write concern. To specify a "
"timeout of 5000 milliseconds, use an invocation that resembles the "
"following:"
msgstr ""

#: ../source/reference/command/getLastError.txt:170
msgid ""
"When ``wtimeout`` is ``0``, the :dbcommand:`getLastError` operation will "
"never time out."
msgstr ""
