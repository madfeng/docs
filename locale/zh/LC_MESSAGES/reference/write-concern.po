# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/write-concern.txt:6
msgid "Write Concern Reference"
msgstr ""

#: ../source/reference/write-concern.txt:10
msgid ""
":doc:`Write concern </core/write-concern>` describes the guarantee that "
"MongoDB provides when reporting on the success of a write operation."
msgstr ""

#: ../source/reference/write-concern.txt:13
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations and eliminates the need "
"to call the :dbcommand:`getLastError` command. Previous versions required a "
":dbcommand:`getLastError` command immediately after a write operation to "
"specify the write concern."
msgstr ""

#: ../source/reference/write-concern.txt:22
msgid "Read Isolation Behavior"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/reference/write-concern.txt:27
msgid "Available Write Concern"
msgstr ""

#: ../source/reference/write-concern.txt:29
msgid ""
"Write concern can include the :ref:`w <wc-w>` option to specify the required"
" number of acknowledgments before returning, the :ref:`j <wc-j>` option to "
"require writes to the journal before returning, and :ref:`wtimeout <wc-"
"wtimeout>` option to specify a time limit to prevent write operations from "
"blocking indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:35
msgid ""
"In sharded clusters, :program:`mongos` instances will pass the write concern"
" on to the shard."
msgstr ""

#: ../source/reference/write-concern.txt:41
msgid "``w`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:43
msgid ""
"The ``w`` option provides the ability to disable write concern entirely *as "
"well as* specify the write concern for :term:`replica sets <replica set>`."
msgstr ""

#: ../source/reference/write-concern.txt:47
msgid ""
"MongoDB uses ``w: 1`` as the default write concern. ``w: 1`` provides basic "
"receipt acknowledgment."
msgstr ""

#: ../source/reference/write-concern.txt:50
msgid "The ``w`` option accepts the following values:"
msgstr ""

#: ../source/reference/write-concern.txt:56
msgid "Value"
msgstr ""

#: ../source/reference/write-concern.txt:58
msgid "Description"
msgstr ""

#: ../source/reference/write-concern.txt:60
msgid "``1``"
msgstr ""

#: ../source/reference/write-concern.txt:62
msgid ""
"Provides acknowledgment of write operations on a standalone "
":program:`mongod` or the :term:`primary` in a replica set."
msgstr ""

#: ../source/reference/write-concern.txt:65
msgid "This is the default write concern for MongoDB."
msgstr ""

#: ../source/reference/write-concern.txt:67
msgid "``0``"
msgstr ""

#: ../source/reference/write-concern.txt:69
msgid ""
"Disables basic acknowledgment of write operations, but returns information "
"about socket exceptions and networking errors to the application."
msgstr ""

#: ../source/reference/write-concern.txt:73
msgid ""
"If you disable basic write operation acknowledgment but require journal "
"commit acknowledgment, the journal commit prevails, and the server will "
"require that :program:`mongod` acknowledge the write operation."
msgstr ""

#: ../source/reference/write-concern.txt:78
msgid "<Number greater than 1>"
msgstr ""

#: ../source/reference/write-concern.txt:80
msgid ""
"Guarantees that write operations have propagated successfully to the "
"specified number of replica set members including the primary."
msgstr ""

#: ../source/reference/write-concern.txt:84
msgid ""
"For example, ``w: 2`` indicates acknowledgements from the primary and at "
"least one secondary."
msgstr ""

#: ../source/reference/write-concern.txt:87
msgid ""
"If you set ``w`` to a number that is greater than the number of set members "
"that hold data, MongoDB waits for the non-existent members to become "
"available, which means MongoDB blocks indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:92
msgid "``\"majority\"``"
msgstr ""

#: ../source/reference/write-concern.txt:94
msgid ""
"Confirms that write operations have propagated to the majority of configured"
" replica set: a majority of the set's configured members must acknowledge "
"the write operation before it succeeds. This allows you to avoid hard coding"
" assumptions about the size of your replica set into your application."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr ""

#: ../source/reference/write-concern.txt:102
msgid "<tag set>"
msgstr ""

#: ../source/reference/write-concern.txt:104
msgid ""
"By specifying a :ref:`tag set <replica-set-configuration-tag-sets>`, you can"
" have fine-grained control over which replica set members must acknowledge a"
" write operation to satisfy the required level of write concern."
msgstr ""

#: ../source/reference/write-concern.txt:112
msgid "``j`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:114
msgid ""
"The ``j`` option confirms that the :program:`mongod` instance has written "
"the data to the on-disk journal. This ensures that data is not lost if the "
":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
"enable."
msgstr ""

#: ../source/reference/write-concern.txt:119
msgid ""
"Specifying a write concern that includes ``j: true`` to a :program:`mongod` "
"or :program:`mongos` running with :option:`--nojournal` option now errors. "
"Previous versions would ignore the ``j: true``."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"Requiring *journaled* write concern in a replica set only requires a journal"
" commit of the write operation to the :term:`primary` of the set regardless "
"of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/reference/write-concern.txt:130
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:132
msgid ""
"This option specifies a time limit, in milliseconds, for the write concern. "
"``wtimeout`` is only applicable for ``w`` values greater than ``1``."
msgstr ""

#: ../source/reference/write-concern.txt:136
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern is not fulfilled. When "
"these write operations return, MongoDB **does not** undo successful data "
"modifications performed before the write concern exceeded the ``wtimeout`` "
"time limit."
msgstr ""

#: ../source/reference/write-concern.txt:142
msgid ""
"If you do not specify the ``wtimeout`` option and the level of write concern"
" is unachievable, the write operation will block indefinitely. Specifying a "
"``wtimeout`` value of ``0`` is equivalent to a write concern without the "
"``wtimeout`` option."
msgstr ""

#: ../source/reference/write-concern.txt:147
msgid ""
":doc:`Write Concern Introduction </core/write-concern>` and :ref:`Write "
"Concern for Replica Sets <replica-set-write-concern>`."
msgstr ""
