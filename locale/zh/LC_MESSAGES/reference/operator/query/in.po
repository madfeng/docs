# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/in.txt:3
msgid "$in"
msgstr ""

#: ../source/reference/operator/query/in.txt:9
msgid ""
"The :query:`$in` operator selects the documents where the value of a field "
"equals any value in the specified array. To specify an :query:`$in` "
"expression, use the following prototype:"
msgstr ""

#: ../source/includes/fact-comparison-order.rst:1
msgid ""
"For comparison of different BSON type values, see the :ref:`specified BSON "
"comparison order <bson-types-comparison-order>`."
msgstr ""

#: ../source/reference/operator/query/in.txt:19
msgid ""
"If the ``field`` holds an array, then the :query:`$in` operator selects the "
"documents whose ``field`` holds an array that contains at least one element "
"that matches a value in the specified array (e.g. ``<value1>``, "
"``<value2>``, etc.)"
msgstr ""

#: ../source/reference/operator/query/in.txt:26
msgid ""
"MongoDB 2.6 removes the combinatorial limit for the :query:`$in` operator "
"that exists for :v2.4:`earlier versions </reference/operator/query/in>` of "
"the operator."
msgstr ""

#: ../source/reference/operator/query/in.txt:31
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/in.txt:34
msgid "Use the ``$in`` Operator to Match Values"
msgstr ""

#: ../source/reference/operator/query/in.txt:36
#: ../source/reference/operator/query/in.txt:78
msgid "Consider the following example:"
msgstr ""

#: ../source/reference/operator/query/in.txt:42
msgid ""
"This query selects all documents in the ``inventory`` collection where the "
"``qty`` field value is either ``5`` or ``15``. Although you can express this"
" query using the :query:`$or` operator, choose the :query:`$in` operator "
"rather than the :query:`$or` operator when performing equality checks on the"
" same field."
msgstr ""

#: ../source/reference/operator/query/in.txt:50
msgid "Use the ``$in`` Operator to Match Values in an Array"
msgstr ""

#: ../source/reference/operator/query/in.txt:52
msgid ""
"The collection ``inventory`` contains documents that include the field "
"``tags``, as in the following:"
msgstr ""

#: ../source/reference/operator/query/in.txt:59
msgid ""
"Then, the following :method:`~db.collection.update()` operation will set the"
" ``sale`` field value to ``true`` where the ``tags`` field holds an array "
"with at least one element matching either ``\"appliances\"`` or "
"``\"school\"``."
msgstr ""

#: ../source/reference/operator/query/in.txt:72
msgid "Use the ``$in`` Operator with a Regular Expression"
msgstr ""

#: ../source/reference/operator/query/in.txt:74
msgid ""
"The :query:`$in` operator can specify matching values using regular "
"expressions of the form ``/pattern/``. You *cannot* use :query:`$regex` "
"operator expressions inside an :query:`$in`."
msgstr ""

#: ../source/reference/operator/query/in.txt:84
msgid ""
"This query selects all documents in the ``inventory`` collection where the "
"``tags`` field holds an array that contains at least one element that starts"
" with either ``be`` or ``st``."
msgstr ""

#: ../source/reference/operator/query/in.txt:90
msgid ""
":method:`~db.collection.find()`, :method:`~db.collection.update()`, "
":query:`$or`, :update:`$set`."
msgstr ""
