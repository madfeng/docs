# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:9
msgid ""
"The :query:`$regex` operator provides regular expression capabilities for "
"pattern matching *strings* in queries. MongoDB uses Perl compatible regular "
"expressions (i.e. \"PCRE.\")"
msgstr ""

#: ../source/reference/operator/query/regex.txt:13
msgid ""
"You can specify regular expressions using regular expression objects (i.e. "
"``/pattern/`` ) or using the :query:`$regex` operator. The following "
"examples are equivalent:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:22
msgid ""
"These expressions match all documents in ``collection`` where the value of "
"``field`` matches the case-insensitive regular expression ``acme.*corp``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:28
msgid ":query:`$regex` provides four option flags:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:30
msgid ""
"``i`` toggles case insensitivity, and allows all letters in the pattern to "
"match upper and lower cases."
msgstr ""

#: ../source/reference/operator/query/regex.txt:33
msgid ""
"``m`` toggles multiline regular expression. Without this option, all regular"
" expression match within one line."
msgstr ""

#: ../source/reference/operator/query/regex.txt:36
msgid ""
"If there are no newline characters (e.g. ``\\n``) or no start/end of line "
"construct, the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:39
msgid ""
"``x`` toggles an \"extended\" capability. When set, :query:`$regex` ignores "
"all white space characters unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:43
msgid ""
"Additionally, it ignores characters between an un-escaped ``#`` character "
"and the next new line, so that you may include comments in complicated "
"patterns. This only applies to data characters; white space characters may "
"never appear within special character sequences in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:49
msgid ""
"The ``x`` option does not affect the handling of the VT character (i.e. code"
" 11.)"
msgstr ""

#: ../source/reference/operator/query/regex.txt:52
msgid ""
"``s`` allows the dot (e.g. ``.``) character to match all characters "
"*including* newline characters."
msgstr ""

#: ../source/reference/operator/query/regex.txt:55
msgid ""
"Only the ``i`` and ``m`` options are available for the native JavaScript "
"regular expression objects (e.g. ``/acme.*corp/i``). To use ``x`` and ``s`` "
"options, you must use the \":query:`$regex`\" operator with the "
"\":operator:`$options`\" syntax."
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
msgid ""
"To combine a regular expression match with other operators, you need to use "
"the \":query:`$regex`\" operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:67
msgid ""
"This expression returns all instances of ``field`` in ``collection`` that "
"match the case insensitive regular expression ``acme.*corp`` that *don't* "
"match ``acmeblahcorp``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/regex.txt:75
msgid "PCRE Matching Engine"
msgstr ""

#: ../source/reference/operator/query/regex.txt:77
msgid ""
":query:`$regex` uses \"Perl Compatible Regular Expressions\" (PCRE) as the "
"matching engine."
msgstr ""

#: ../source/reference/operator/query/regex.txt:81
msgid "``$in`` Expressions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:83
msgid ""
"To include a regular expression in an ``$in`` query expression, you can only"
" use JavaScript regular expression objects (i.e. ``/pattern/`` ). You "
"*cannot* use :query:`$regex` operator expressions inside an :query:`$in`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:89
msgid "Index Use"
msgstr ""

#: ../source/reference/operator/query/regex.txt:91
msgid ""
"If an index exists for the field, then MongoDB matches the regular "
"expression against the values in the index, which can be faster than a "
"collection scan. Further optimization can occur if the regular expression is"
" a \"prefix expression\", which means that all potential matches start with "
"the same string. This allows MongoDB to construct a \"range\" from that "
"prefix and only match against those values from the index that fall within "
"that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:99
msgid ""
"A regular expression is a \"prefix expression\" if it starts with a caret "
"(``^``) or a left anchor (``\\A``), followed by a string of simple symbols. "
"For example, the regex ``/^abc.*/`` will be optimized by matching only "
"against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:104
msgid ""
"Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent "
"strings, they have different performance characteristics. All of these "
"expressions use an index if an appropriate index exists; however, "
"``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after "
"matching the prefix."
msgstr ""
