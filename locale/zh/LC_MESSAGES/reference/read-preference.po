# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-preference.txt:3
msgid "Read Preference Reference"
msgstr ""

#: ../source/includes/introduction-read-preference.rst:1
msgid ""
"Read preference describes how MongoDB clients route read operations to "
"members of a :term:`replica set`."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:4
msgid ""
"By default, an application directs its read operations to the "
":term:`primary` member in a :term:`replica set`. Reading from the primary "
"guarantees that read operations reflect the latest version of a document. "
"However, by distributing some or all reads to secondary members of the "
"replica set, you can improve read throughput or reduce latency for an "
"application that does not require fully up-to-date data."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:5
msgid "Read Preference Mode"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:6
msgid "Description"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:7
msgid ":readmode:`primary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:8
msgid ""
"Default mode. All operations read from the current replica set "
":term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:10
msgid ":readmode:`primaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:11
msgid ""
"In most situations, operations read from the :term:`primary` but if it is "
"unavailable, operations read from :term:`secondary` members."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:14
msgid ":readmode:`secondary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:15
msgid ""
"All operations read from the :term:`secondary` members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:17
msgid ":readmode:`secondaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:18
msgid ""
"In most situations, operations read from :term:`secondary` members but if no"
" :term:`secondary` members are available, operations read from the "
":term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:21
msgid ":readmode:`nearest`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:22
msgid ""
"Operations read from member of the :term:`replica set` with the least "
"network latency, irrespective of the member's type."
msgstr ""

#: ../source/reference/read-preference.txt:17
msgid "Read Preference Modes"
msgstr ""

#: ../source/reference/read-preference.txt:21
msgid ""
"All read operations use only the current replica set :term:`primary`. This "
"is the default. If the primary is unavailable, read operations produce an "
"error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:25
msgid ""
"The :readmode:`primary` read preference mode is not compatible with read "
"preference modes that use :ref:`tag sets <replica-set-read-preference-tag-"
"sets>`. If you specify a tag set with :readmode:`primary`, the driver will "
"produce an error."
msgstr ""

#: ../source/reference/read-preference.txt:32
msgid ""
"In most situations, operations read from the :term:`primary` member of the "
"set. However, if the primary is unavailable, as is the case during "
":term:`failover` situations, operations read from secondary members."
msgstr ""

#: ../source/reference/read-preference.txt:37
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client reads first from the primary, if "
"available, and then from :term:`secondaries <secondary>` that match the "
"specified tags. If no secondaries have matching tags, the read operation "
"produces an error."
msgstr ""

#: ../source/reference/read-preference.txt:43
msgid ""
"Since the application may receive data from a secondary, read operations "
"using the :readmode:`primaryPreferred` mode may return stale data in some "
"situations."
msgstr ""

#: ../source/reference/read-preference.txt:49
msgid ":program:`mongos` added full support for read preferences."
msgstr ""

#: ../source/reference/read-preference.txt:52
msgid ""
"When connecting to a :program:`mongos` instance older than 2.2, using a "
"client that supports read preference modes, :readmode:`primaryPreferred` "
"will send queries to secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:58
msgid ""
"Operations read *only* from the :term:`secondary` members of the set. If no "
"secondaries are available, then this read operation produces an error or "
"exception."
msgstr ""

#: ../source/reference/read-preference.txt:62
msgid ""
"Most sets have at least one secondary, but there are situations where there "
"may be no available secondary. For example, a set with a primary, a "
"secondary, and an :term:`arbiter` may not have any secondaries if a member "
"is in recovering state or unavailable."
msgstr ""

#: ../source/reference/read-preference.txt:67
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client attempts to find secondary members that "
"match the specified tag set and directs reads to a random secondary from "
"among the :ref:`nearest group <replica-set-read-preference-behavior-"
"nearest>`. If no secondaries have matching tags, the read operation produces"
" an error. [#capacity-planning]_"
msgstr ""

#: ../source/reference/read-preference.txt:75
msgid ""
"Read operations using the :readmode:`secondary` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:79
msgid ""
"In most situations, operations read from :term:`secondary` members, but in "
"situations where the set consists of a single :term:`primary` (and no other "
"members), the read operation will use the set's primary."
msgstr ""

#: ../source/reference/read-preference.txt:84
msgid ""
"When the read preference includes a :ref:`tag set <replica-set-read-"
"preference-tag-sets>`, the client attempts to find a secondary member that "
"matches the specified tag set and directs reads to a random secondary from "
"among the :ref:`nearest group <replica-set-read-preference-behavior-"
"nearest>`. If no secondaries have matching tags, the client ignores tags and"
" reads from the primary."
msgstr ""

#: ../source/reference/read-preference.txt:91
msgid ""
"Read operations using the :readmode:`secondaryPreferred` mode may return "
"stale data."
msgstr ""

#: ../source/reference/read-preference.txt:96
msgid ""
"The driver reads from the *nearest* member of the :term:`set <replica set>` "
"according to the :ref:`member selection <replica-set-read-preference-"
"behavior-nearest>` process. Reads in the :readmode:`nearest` mode do not "
"consider the member's *type*. Reads in :readmode:`nearest` mode may read "
"from both primaries and secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:103
msgid ""
"Set this mode to minimize the effect of network latency on read operations "
"without preference for current or stale data."
msgstr ""

#: ../source/reference/read-preference.txt:106
msgid ""
"If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, the "
"client attempts to find a replica set member that matches the specified tag "
"set and directs reads to an arbitrary member from among the :ref:`nearest "
"group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/reference/read-preference.txt:112
msgid ""
"Read operations using the :readmode:`nearest` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:117
msgid ""
"All operations read from a member of the nearest group of the replica set "
"that matches the specified read preference mode. The :readmode:`nearest` "
"mode prefers low latency reads over a member's :term:`primary` or "
":term:`secondary` status."
msgstr ""

#: ../source/reference/read-preference.txt:122
msgid ""
"For :readmode:`nearest`, the client assembles a list of acceptable hosts "
"based on tag set and then narrows that list to the host with the shortest "
"ping time and all other members of the set that are within the \"local "
"threshold,\" or acceptable latency. See :ref:`replica-set-read-preference-"
"behavior-nearest` for more information."
msgstr ""

#: ../source/reference/read-preference.txt:129
msgid ""
"If your set has more than one secondary, and you use the "
":readmode:`secondary` read preference mode, consider the following effect. "
"If you have a :ref:`three member replica set <replica-set-three-members>` "
"with a primary and two secondaries, and if one secondary becomes "
"unavailable, all :readmode:`secondary` queries must target the remaining "
"secondary. This will double the load on this secondary. Plan and provide "
"capacity to support this as needed."
msgstr ""

#: ../source/reference/read-preference.txt:139
msgid "Use Cases"
msgstr ""

#: ../source/reference/read-preference.txt:141
msgid ""
"Depending on the requirements of an application, you can configure different"
" applications to use different read preferences, or use different read "
"preferences for different queries in the same application. Consider the "
"following applications for different read preference strategies."
msgstr ""

#: ../source/reference/read-preference.txt:148
msgid "Maximize Consistency"
msgstr ""

#: ../source/reference/read-preference.txt:150
msgid ""
"To avoid *stale* reads under all circumstances, use :readmode:`primary`. "
"This prevents all queries when the set has no :term:`primary`, which happens"
" during elections, or when a majority of the replica set is not accessible."
msgstr ""

#: ../source/reference/read-preference.txt:156
msgid "Maximize Availability"
msgstr ""

#: ../source/reference/read-preference.txt:158
msgid ""
"To permit read operations when possible, Use :readmode:`primaryPreferred`. "
"When there's a primary you will get consistent reads, but if there is no "
"primary you can still query :term:`secondaries <secondary>`."
msgstr ""

#: ../source/reference/read-preference.txt:164
msgid "Minimize Latency"
msgstr ""

#: ../source/reference/read-preference.txt:166
msgid ""
"To always read from a low-latency node, use :readmode:`nearest`. The driver "
"or :program:`mongos` will read from the nearest member and those no more "
"than 15 milliseconds [#secondary-acceptable-latency]_ further away than the "
"nearest member."
msgstr ""

#: ../source/reference/read-preference.txt:171
msgid ""
":readmode:`nearest` does *not* guarantee consistency. If the nearest member "
"to your application server is a secondary with some replication lag, queries"
" could return stale data. :readmode:`nearest` only reflects network distance"
" and does not reflect I/O or CPU load."
msgstr ""

#: ../source/reference/read-preference.txt:176
msgid ""
"This threshold is configurable. See "
":setting:`~replication.localPingThresholdMs` for :program:`mongos` or your "
"driver documentation for the appropriate setting."
msgstr ""

#: ../source/reference/read-preference.txt:182
msgid "Query From Geographically Distributed Members"
msgstr ""

#: ../source/reference/read-preference.txt:184
msgid ""
"If the members of a replica set are geographically distributed, you can "
"create replica tags based that reflect the location of the instance and then"
" configure your application to query the members nearby."
msgstr ""

#: ../source/reference/read-preference.txt:188
msgid ""
"For example, if members in \"east\" and \"west\" data centers are "
":ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and "
"``{'dc': 'west'}``, your application servers in the east data center can "
"read from nearby members with the following read preference:"
msgstr ""

#: ../source/reference/read-preference.txt:198
msgid ""
"Although :readmode:`nearest` already favors members with low network "
"latency, including the tag makes the choice more predictable."
msgstr ""

#: ../source/reference/read-preference.txt:202
msgid "Reduce load on the primary"
msgstr ""

#: ../source/reference/read-preference.txt:204
msgid ""
"To shift read load from the primary, use mode :readmode:`secondary`. "
"Although :readmode:`secondaryPreferred` is tempting for this use case, it "
"carries some risk: if all secondaries are unavailable and your set has "
"enough :term:`arbiters <arbiter>` to prevent the primary from stepping down,"
" then the primary will receive all traffic from clients. If the primary is "
"unable to handle this load, queries will compete with writes. For this "
"reason, use :readmode:`secondary` to distribute read load to replica sets, "
"not :readmode:`secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:214
msgid "Read Preferences for Database Commands"
msgstr ""

#: ../source/reference/read-preference.txt:216
msgid ""
"Because some :term:`database commands <database command>` read and return "
"data from the database, all of the official drivers support full :ref:`read "
"preference mode semantics <replica-set-read-preference-modes>` for the "
"following commands:"
msgstr ""

#: ../source/reference/read-preference.txt:221
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-preference.txt:222
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

#: ../source/reference/read-preference.txt:223
msgid ":dbcommand:`aggregate` [#aggregation-out]_"
msgstr ""

#: ../source/reference/read-preference.txt:224
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/reference/read-preference.txt:225
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/reference/read-preference.txt:226
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-preference.txt:227
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-preference.txt:228
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-preference.txt:229
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-preference.txt:230
msgid ":dbcommand:`geoWalk`"
msgstr ""

#: ../source/reference/read-preference.txt:231
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

#: ../source/reference/read-preference.txt:233
msgid ""
":program:`mongos` adds support for routing commands to shards using read "
"preferences. Previously :program:`mongos` sent all commands to shards' "
"primaries."
msgstr ""

#: ../source/reference/read-preference.txt:238
msgid ""
"Only \"inline\" :dbcommand:`mapReduce` operations that do not write data "
"support read preference, otherwise these operations must run on the "
":term:`primary` members."
msgstr ""

#: ../source/reference/read-preference.txt:243
msgid ""
"Using the ``$out`` pipeline operator forces the aggregation pipeline to run "
"on the primary."
msgstr ""

#: ../source/reference/read-preference.txt:11
#: ../source/reference/read-preference.txt:13
msgid "read preference"
msgstr ""

#: ../source/reference/read-preference.txt:11
msgid "semantics"
msgstr ""

#: ../source/reference/read-preference.txt:13
msgid "modes"
msgstr ""
