# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/meta/build.txt:3
msgid "MongoDB Documentation Build System"
msgstr ""

#: ../source/meta/build.txt:5
msgid ""
"This document contains more direct instructions for building the MongoDB "
"documentation."
msgstr ""

#: ../source/meta/build.txt:9
msgid "Getting Started"
msgstr ""

#: ../source/meta/build.txt:12
msgid "Install Dependencies"
msgstr ""

#: ../source/meta/build.txt:14
msgid "The MongoDB Documentation project depends on the following tools:"
msgstr ""

#: ../source/meta/build.txt:16
msgid "GNU Make"
msgstr ""

#: ../source/meta/build.txt:17
msgid "GNU Tar"
msgstr ""

#: ../source/meta/build.txt:18
msgid "Python"
msgstr ""

#: ../source/meta/build.txt:19
msgid "Git"
msgstr ""

#: ../source/meta/build.txt:20
msgid "Sphinx (documentation management toolchain)"
msgstr ""

#: ../source/meta/build.txt:21
msgid "Pygments (syntax highlighting)"
msgstr ""

#: ../source/meta/build.txt:22
msgid "PyYAML (for the generated tables)"
msgstr ""

#: ../source/meta/build.txt:23
msgid "Droopy (Python package for static text analysis)"
msgstr ""

#: ../source/meta/build.txt:24
msgid "Fabric (Python package for scripting and orchestration)"
msgstr ""

#: ../source/meta/build.txt:25
msgid "Inkscape (Image generation.)"
msgstr ""

#: ../source/meta/build.txt:26
msgid "python-argparse (For Python 2.6.)"
msgstr ""

#: ../source/meta/build.txt:27
msgid "LaTeX/PDF LaTeX (typically texlive; for building PDFs)"
msgstr ""

#: ../source/meta/build.txt:28
msgid "Common Utilities (rsync, tar, gzip, sed)"
msgstr ""

#: ../source/meta/build.txt:31
msgid "OS X"
msgstr ""

#: ../source/meta/build.txt:33
msgid ""
"Install Sphinx, Docutils, and their dependencies with ``easy_install`` the "
"following command:"
msgstr ""

#: ../source/meta/build.txt:40
msgid ""
"Feel free to use ``pip`` rather than ``easy_install`` to install python "
"packages."
msgstr ""

#: ../source/meta/build.txt:43
msgid ""
"To generate the images used in the documentation, `download and install "
"Inkscape <http://inkscape.org/download/>`_."
msgstr ""

#: ../source/meta/build.txt:0 ../source/meta/build.txt:0
#: ../source/meta/build.txt:0
msgid "Optional"
msgstr ""

#: ../source/meta/build.txt:48
msgid ""
"To generate PDFs for the full production build, install a TeX distribution "
"(for building the PDF.) If you do not have a LaTeX installation, use `MacTeX"
" <http://www.tug.org/mactex/2011/>`_. This is **only** required to build "
"PDFs."
msgstr ""

#: ../source/meta/build.txt:54
msgid "Arch Linux"
msgstr ""

#: ../source/meta/build.txt:56
msgid ""
"Install packages from the system repositories with the following command:"
msgstr ""

#: ../source/meta/build.txt:62 ../source/meta/build.txt:86
msgid "Then install the following Python packages:"
msgstr ""

#: ../source/meta/build.txt:70 ../source/meta/build.txt:94
msgid ""
"To generate PDFs for the full production build, install the following "
"packages from the system repository:"
msgstr ""

#: ../source/meta/build.txt:78
msgid "Debian/Ubuntu"
msgstr ""

#: ../source/meta/build.txt:80
msgid "Install the required system packages with the following command:"
msgstr ""

#: ../source/meta/build.txt:102
msgid "Setup and Configuration"
msgstr ""

#: ../source/meta/build.txt:104
msgid "Clone the repository:"
msgstr ""

#: ../source/meta/build.txt:110
msgid ""
"Then run the ``bootstrap.py`` script in the ``docs/`` repository, to "
"configure the build dependencies:"
msgstr ""

#: ../source/meta/build.txt:117
msgid ""
"This downloads and configures the `mongodb/docs-tools "
"<http://github.com/mongodb/docs-tools/>`_ repository, which contains the "
"authoritative build system shared between branches of the MongoDB Manual and"
" other MongoDB documentation projects."
msgstr ""

#: ../source/meta/build.txt:122
msgid "You can run ``bootstrap.py`` regularly to update build system."
msgstr ""

#: ../source/meta/build.txt:125
msgid "Building the Documentation"
msgstr ""

#: ../source/meta/build.txt:127
msgid ""
"The MongoDB documentation build system is entirely accessible via ``make`` "
"targets. For example, to build an HTML version of the documentation issue "
"the following command:"
msgstr ""

#: ../source/meta/build.txt:135
msgid ""
"You can find the build output in ``build/<branch>/html``, where ``<branch>``"
" is the name of the current branch."
msgstr ""

#: ../source/meta/build.txt:138
msgid ""
"In addition to the ``html`` target, the build system provides the following "
"targets:"
msgstr ""

#: ../source/meta/build.txt:145
msgid "``publish``"
msgstr ""

#: ../source/meta/build.txt:142
msgid ""
"Builds and integrates all output for the production build. Build output is "
"in ``build/public/<branch>/``. When you run ``publish`` in the ``master``, "
"the build will generate some output in ``build/public/``."
msgstr ""

#: ../source/meta/build.txt:150
msgid "``push``; ``stage``"
msgstr ""

#: ../source/meta/build.txt:148
msgid ""
"Uploads the production build to the production or staging web servers. "
"Depends on ``publish``. Requires access production or staging environment."
msgstr ""

#: ../source/meta/build.txt:154
msgid "``push-all``; ``stage-all``"
msgstr ""

#: ../source/meta/build.txt:153
msgid ""
"Uploads the entire content of ``build/public/`` to the web servers. Depends "
"on ``publish``. Not used in common practice."
msgstr ""

#: ../source/meta/build.txt:158
msgid "``push-with-delete``; ``stage-with-delete``"
msgstr ""

#: ../source/meta/build.txt:157
msgid ""
"Modifies the action of ``push`` and ``stage`` to remove remote file that "
"don't exist in the local build. Use with caution."
msgstr ""

#: ../source/meta/build.txt:171
msgid ""
"``html``; ``latex``; ``dirhtml``; ``epub``; ``texinfo``; ``man``; ``json``"
msgstr ""

#: ../source/meta/build.txt:161
msgid ""
"These are standard targets derived from the default Sphinx Makefile, with "
"adjusted dependencies. Additionally, for all of these targets you can append"
" ``-nitpick`` to increase Sphinx's verbosity, or ``-clean`` to remove all "
"Sphinx build artifacts."
msgstr ""

#: ../source/meta/build.txt:166
msgid ""
"``latex`` performs several additional post-processing steps on ``.tex`` "
"output generated by Sphinx. This target will also compile PDFs using "
"``pdflatex``."
msgstr ""

#: ../source/meta/build.txt:170
msgid ""
"``html`` and ``man`` also generates a ``.tar.gz`` file of the build outputs "
"for inclusion in the final releases."
msgstr ""

#: ../source/meta/build.txt:174
msgid "Build Mechanics and Tools"
msgstr ""

#: ../source/meta/build.txt:176
msgid ""
"Internally the build system has a number of components and processes. See "
"the `docs-tools README <https://github.com/mongodb/docs-"
"tools/blob/master/README.rst>`_ for more information on the internals. This "
"section documents a few of these components from a very high level and lists"
" useful operations for contributors to the documentation."
msgstr ""

#: ../source/meta/build.txt:186
msgid "Fabric"
msgstr ""

#: ../source/meta/build.txt:188
msgid ""
"Fabric is an orchestration and scripting package for Python. The "
"documentation uses Fabric to handle the deployment of the build products to "
"the web servers and also unifies a number of independent build operations. "
"Fabric commands have the following form:"
msgstr ""

#: ../source/meta/build.txt:197
msgid ""
"The ``<argument>`` is optional in most cases. Additionally some tasks are "
"available at the root level, without a module. To see a full list of fabric "
"tasks, use the following command:"
msgstr ""

#: ../source/meta/build.txt:205
msgid ""
"You can chain fabric tasks on a single command line, although this doesn't "
"always make sense."
msgstr ""

#: ../source/meta/build.txt:208
msgid "Important fabric tasks include:"
msgstr ""

#: ../source/meta/build.txt:212
msgid "``tools.bootstrap``"
msgstr ""

#: ../source/meta/build.txt:211
msgid ""
"Runs the ``bootstrap.py`` script. Useful for re-initializing the repository "
"without needing to be in root of the repository."
msgstr ""

#: ../source/meta/build.txt:218
msgid "``tools.dev``; ``tools.reset``"
msgstr ""

#: ../source/meta/build.txt:215
msgid ""
"``tools.dev`` switches the ``origin`` remote of the ``docs-tools`` checkout "
"in ``build`` directory, to ``../docs-tools`` to facilitate build system "
"testing and development. ``tools.reset`` resets the ``origin`` remote for "
"normal operation."
msgstr ""

#: ../source/meta/build.txt:222
msgid "``tools.conf``"
msgstr ""

#: ../source/meta/build.txt:221
msgid ""
"``tools.conf`` returns the content of the configuration object for the "
"current project. These data are useful during development."
msgstr ""

#: ../source/meta/build.txt:226
msgid "``stats.report:<filename>``"
msgstr ""

#: ../source/meta/build.txt:225
msgid ""
"Returns, a collection of readability statistics. Specify file names relative"
" to ``source/`` tree."
msgstr ""

#: ../source/meta/build.txt:230
msgid "``make``"
msgstr ""

#: ../source/meta/build.txt:229
msgid ""
"Provides a thin wrapper around Make calls. Allows you to start make builds "
"from different locations in the project repository."
msgstr ""

#: ../source/meta/build.txt:235
msgid "``process.refresh_dependencies``"
msgstr ""

#: ../source/meta/build.txt:233
msgid ""
"Updates the time stamp of ``.txt`` source files with changed include files, "
"to facilitate Sphinx's incremental rebuild process. This task runs "
"internally as part of the build process."
msgstr ""

#: ../source/meta/build.txt:238
msgid "Buildcloth"
msgstr ""

#: ../source/meta/build.txt:240
msgid ""
"`Buildcloth <https://pypi.python.org/pypi/buildcloth/>`_ is a meta-build "
"tool, used to generate Makefiles programmatically. This makes the build "
"system easier to maintain, and makes it easier to use the same fundamental "
"code to generate various branches of the Manual as well as related "
"documentation projects. See `makecloth/ in the docs-tools repository "
"<https://github.com/mongodb/docs-tools/tree/master/makecloth>`_ for the "
"relevant code."
msgstr ""

#: ../source/meta/build.txt:249
msgid ""
"Running ``make`` with no arguments will regenerate these parts of the build "
"system automatically."
msgstr ""

#: ../source/meta/build.txt:253
msgid "Rstcloth"
msgstr ""

#: ../source/meta/build.txt:255
msgid ""
"`Rstcloth <https://pypi.python.org/pypi/rstcloth>`_ is a library for "
"generating reStructuredText programmatically. This makes it possible to "
"generate content for the documentation, such as tables, tables of contents, "
"and API reference material programmatically and transparently. See "
"`rstcloth/ in the docs-tools repository <https://github.com/mongodb/docs-"
"tools/tree/master/rstcloth>`_ for the relevant code."
msgstr ""
