# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/developers.txt:5
# 8b82fe83e40044a89d8c85f8bc4e0514
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

#: ../source/faq/developers.txt:9
# 9e5eb95d3daa43ceb9220b45ed53b2fc
msgid "This document answers common questions about application development using MongoDB."
msgstr ""

#: ../source/faq/developers.txt:12
# f804b81405c243e79532cf320984469d
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/developers.txt:19
# a2537fb12a4749a39dc001bb24582b0e
msgid "What is a namespace in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:21
# 344e81ca9775427b8c9b8d2a17572b77
msgid "A \"namespace\" is the concatenation of the :term:`database` name and the :term:`collection` names [#indexes-are-namespaces]_ with a period character in between."
msgstr ""

#: ../source/faq/developers.txt:25
# 5a0459b9732c43678fefdb972d2cac08
msgid "Collections are containers for documents that share one or more indexes. Databases are groups of collections stored on disk using a single set of data files. [#ns-limit]_"
msgstr ""

#: ../source/faq/developers.txt:29
# a34302c06c794072ab45bb4f7f393515
msgid "For an example ``acme.users`` namespace, ``acme`` is the database name and ``users`` is the collection name. Period characters **can** occur in collection names, so that ``acme.user.history`` is a valid namespace, with ``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

#: ../source/faq/developers.txt:35
# 80f97e0e084047a2b4deca03a1a5faa4
msgid "While data models like this appear to support nested collections, the collection namespace is flat, and there is no difference from the perspective of MongoDB between ``acme``, ``acme.users``, and ``acme.records``."
msgstr ""

#: ../source/faq/developers.txt:40
# c91d7dda495a42f8be08b9c695eee878
msgid "Each index also has its own namespace."
msgstr ""

#: ../source/faq/developers.txt:42
# 97a69e7034294cd3971f2f93d3101bc6
msgid "MongoDB database have a configurable limit on the :limit:`number of namespaces <Number of Namespaces>` in a database."
msgstr ""

#: ../source/faq/developers.txt:46
# 93dce7a9b48a46229fade007d8b9ad83
msgid "How do you copy all objects from one collection to another?"
msgstr ""

#: ../source/faq/developers.txt:48
# 56380ae773bf41ac8afb815ebc660bfb
msgid "In the :program:`mongo` shell, you can use the following operation to duplicate the entire collection:"
msgstr ""

#: ../source/includes/warning-copyto-loss-of-type-fidelity.rst:3
# 3573b4e296c4473c980a7c90cd7c17f5
msgid "When using :method:`db.collection.copyTo()` check field types to ensure that the operation does not remove type information from documents during the translation from :term:`BSON` to :term:`JSON`. Consider using :method:`~db.cloneCollection()` to maintain type fidelity."
msgstr ""

#: ../source/includes/warning-copyto-loss-of-type-fidelity.rst:9
# e63c373719ef479db89a1c0c9b5bc526
msgid "The :method:`db.collection.copyTo()` method uses the :dbcommand:`eval` command internally. As a result, the :method:`db.collection.copyTo()` operation takes a global lock that blocks all other read and write operations until the :method:`db.collection.copyTo()` completes."
msgstr ""

#: ../source/faq/developers.txt:57
# fe6ce57c9e094cbeae2095615c5e5eb4
msgid "Also consider the :dbcommand:`cloneCollection` :term:`command <database command>` that may provide some of this functionality."
msgstr ""

#: ../source/faq/developers.txt:61
# c0ac1b4cd31f4533b1b805e5fce50c29
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

#: ../source/faq/developers.txt:63
#: ../source/faq/developers.txt:140
# 8af349a4df7244648748201eade355f4
# f9b087a1fb67488d8889c4673d65c6d1
msgid "Yes."
msgstr ""

#: ../source/faq/developers.txt:65
# 72f06e3f04214d3d8312268e83a1fc4e
msgid "When you use :method:`~db.collection.remove()`, the object will no longer exist in MongoDB's on-disk data storage."
msgstr ""

#: ../source/faq/developers.txt:69
# 5113a8df39ac4ff19ddd1d963ab5dbfe
msgid "When does MongoDB write updates to disk?"
msgstr ""

#: ../source/faq/developers.txt:71
# d1e28b30f04548ba80de429da3ad4bd9
msgid "MongoDB flushes writes to disk on a regular interval. In the default configuration, MongoDB writes data to the main data files on disk every 60 seconds and commits the :term:`journal` roughly every 100 milliseconds. These values are configurable with the :setting:`~storage.journal.commitIntervalMs` and :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/developers.txt:77
# ba7d61c5d3df49f7a956f6a77ffb9b79
msgid "These values represent the *maximum* amount of time between the completion of a write operation and the point when the write is durable in the journal, if enabled, and when MongoDB flushes data to the disk. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/developers.txt:84
# 7e0f58d047b340a8b0bd3ee049cb47b2
msgid "However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This is advantageous in situations where the database receives a thousand increments to an object within one second, MongoDB only needs to flush this data to disk once. In addition to the aforementioned configuration options, you can also use :dbcommand:`fsync` and :doc:`/reference/write-concern` to modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:92
# e91206c39aa94773ab2d4a2fcd63d98c
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:94
# 4441a5765fcd468da980203e82d587e9
msgid "MongoDB does not have support for traditional locking or complex transactions with rollback. MongoDB aims to be lightweight, fast, and predictable in its performance. This is similar to the MySQL MyISAM autocommit model. By keeping transaction support extremely simple, MongoDB can provide greater performance especially for :term:`partitioned <partition>` or :term:`replicated <replication>` systems with a number of database server processes."
msgstr ""

#: ../source/faq/developers.txt:102
# cc056c34b6094d0ea98cc08f2a1e05ce
msgid "MongoDB *does* have support for atomic operations *within* a single document. Given the possibilities provided by nested documents, this feature provides support for a large number of use-cases."
msgstr ""

#: ../source/faq/developers.txt:106
# ef7c359f56324ea1a1dc5d573fb0ba9c
msgid "The :doc:`/tutorial/isolate-sequence-of-operations` page."
msgstr ""

#: ../source/faq/developers.txt:109
# 399e2fa4586c4acc8947a45d1a7f6848
msgid "How do you aggregate data with MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:111
# d51eb106a83244c0841acdaa13d3b8f8
msgid "In version 2.1 and later, you can use the new :doc:`aggregation framework </core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/faq/developers.txt:115
# 79581c21ac164de1be312f895e07e8ea
msgid "MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` command, as well as basic aggregation with the :dbcommand:`group`, :dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

#: ../source/faq/developers.txt:120
# 8b95d8914f234e7886289b67aae2fa30
msgid "The :doc:`/aggregation` page."
msgstr ""

#: ../source/faq/developers.txt:123
# b055ec231d4441ddbb5959393b192e44
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

#: ../source/faq/developers.txt:125
# 3bb25179d71f46ac8234b88edade6b1d
msgid "If you see a very large number connection and re-connection messages in your MongoDB log, then clients are frequently connecting and disconnecting to the MongoDB server. This is normal behavior for applications that do not use request pooling, such as CGI. Consider using FastCGI, an Apache Module, or some other kind of persistent application server to decrease the connection overhead."
msgstr ""

#: ../source/faq/developers.txt:132
# 538075f3d58541368b30cf7f8f3c3f65
msgid "If these connections do not impact your performance you can use the run-time :setting:`~systemLog.quiet` option or the command-line option :option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

#: ../source/faq/developers.txt:138
# 48d19f365cfe4173bbc8d9cd31d9d5d6
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

#: ../source/faq/developers.txt:142
# c20dfcff83fb4beaa526be0c9f13cd52
msgid "MongoDB users of all sizes have had a great deal of success using MongoDB on the EC2 platform using EBS disks."
msgstr ""

#: ../source/faq/developers.txt:145
# 4c465e86d0a7403c95347255b2cc9511
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

#: ../source/faq/developers.txt:148
# 8ebf89a572da4c59a876e24b15bf8b19
msgid "Why are MongoDB's data files so large?"
msgstr ""

#: ../source/faq/developers.txt:150
# 19ae1a17531d4351b13cc7beefaec4b4
msgid "MongoDB aggressively preallocates data files to reserve space and avoid file system fragmentation. You can use the :setting:`storage.smallFiles` setting to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:154
# 69316c94f8294717bbdec0139f03a954
msgid ":ref:`faq-disk-size`"
msgstr ""

#: ../source/faq/developers.txt:159
# c9601227192a4c98bd5ecb74c079ce2b
msgid "How do I optimize storage use for small documents?"
msgstr ""

#: ../source/faq/developers.txt:161
# 693342dd73d64347ab931987a686c0e8
msgid "Each MongoDB document contains a certain amount of overhead. This overhead is normally insignificant but becomes significant if all documents are just a few bytes, as might be the case if the documents in your collection only have one or two fields."
msgstr ""

#: ../source/faq/developers.txt:166
# 7790d14e416d421d80e86f1cd4ea4537
msgid "Consider the following suggestions and strategies for optimizing storage utilization for these collections:"
msgstr ""

#: ../source/faq/developers.txt:169
# 92cfc46871c1480dbfdaa5103f98a98e
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/faq/developers.txt:171
# e8f9aa393b6c41e0804a4e01c048beb8
msgid "MongoDB clients automatically add an ``_id`` field to each document and generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents this may account for a significant amount of space."
msgstr ""

#: ../source/faq/developers.txt:177
# 17b63667773748f380782ee67861a3bb
msgid "To optimize storage use, users can specify a value for the ``_id`` field explicitly when inserting documents into the collection. This strategy allows applications to store a value in the ``_id`` field that would have occupied space in another portion of the document."
msgstr ""

#: ../source/faq/developers.txt:182
# 70006d1937ad48fab81b140b79c8f39a
msgid "You can store any value in the ``_id`` field, but because this value serves as a primary key for documents in the collection, it must uniquely identify them. If the field's value is not unique, then it cannot serve as a primary key as there would be collisions in the collection."
msgstr ""

#: ../source/faq/developers.txt:188
# 56268b7a8414406dbbbd0cac67876ea6
msgid "Use shorter field names."
msgstr ""

#: ../source/faq/developers.txt:190
# 48e39397e71f42918ec5d142f74f6c1e
msgid "MongoDB stores all field names in every document. For most documents, this represents a small fraction of the space used by a document; however, for small documents the field names may represent a proportionally large amount of space. Consider a collection of documents that resemble the following:"
msgstr ""

#: ../source/faq/developers.txt:200
# 8eea400b46254a0785044db4d74f0bda
msgid "If you shorten the field named ``last_name`` to ``lname`` and the field named ``best_score`` to ``score``, as follows, you could save 9 bytes per document."
msgstr ""

#: ../source/faq/developers.txt:208
# 6e015673506547bd922bc924ac583a98
msgid "Shortening field names reduces expressiveness and does not provide considerable benefit for larger documents and where document overhead is not of significant concern. Shorter field names do not reduce the size of indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/faq/developers.txt:214
# b09a4656610e4519ae25001ad6660d68
msgid "In general it is not necessary to use short field names."
msgstr ""

#: ../source/faq/developers.txt:216
# aff9d38f44c441b6b18b00db0908ab45
msgid "Embed documents."
msgstr ""

#: ../source/faq/developers.txt:218
# 624c7143fc5244c892eb1a951fbd20da
msgid "In some cases you may want to embed documents in other documents and save on the per-document overhead."
msgstr ""

#: ../source/faq/developers.txt:224
# 972738ec17a4473f8b6c3f2e98d10fc6
msgid "When should I use GridFS?"
msgstr ""

#: ../source/faq/developers.txt:226
# 1e9f86fba8ab4eb28fb948a29a83ace7
msgid "For documents in a MongoDB collection, you should always use :term:`GridFS` for storing files larger than 16 MB."
msgstr ""

#: ../source/faq/developers.txt:229
# 9ecc96e2522744aa96fde5364aa8a388
msgid "In some situations, storing large files may be more efficient in a MongoDB database than on a system-level filesystem."
msgstr ""

#: ../source/faq/developers.txt:232
# 33a860378e834a099c6bebb4fbce3288
msgid "If your filesystem limits the number of files in a directory, you can use GridFS to store as many files as needed."
msgstr ""

#: ../source/faq/developers.txt:235
# 4c0a1789498e425a8da5875bc64ec59f
msgid "When you want to keep your files and metadata automatically synced and deployed across a number of systems and facilities.  When using :ref:`geographically distributed replica sets <replica-set-geographical-distribution>` MongoDB can distribute files and their metadata automatically to a number of :program:`mongod` instances and facilities."
msgstr ""

#: ../source/faq/developers.txt:242
# 9cd0ddbcca204c3581b048fbf11b9767
msgid "When you want to access information from portions of large files without having to load whole files into memory, you can use GridFS to recall sections of files without reading the entire file into memory."
msgstr ""

#: ../source/faq/developers.txt:247
# 69b773c8f826458696d200140576c5db
msgid "Do not use GridFS if you need to update the content of the entire file atomically. As an alternative you can store multiple versions of each file and specify the current version of the file in the metadata. You can update the metadata field that indicates \"latest\" status in an atomic update after uploading the new version of the file, and later remove previous versions if needed."
msgstr ""

#: ../source/faq/developers.txt:254
# 72d0f5027e8849e2bba2a04836c362f4
msgid "Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document Size` limit, consider storing the file manually within a single document. You may use the BinData data type to store the binary data. See your :doc:`drivers </applications/drivers>` documentation for details on using BinData."
msgstr ""

#: ../source/faq/developers.txt:260
# 6488b200ed35489dbfd8e8d0ad29cb1a
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

#: ../source/faq/developers.txt:263
# 8b7490796c7546b89b2cb2669b949492
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/developers.txt:266
# 53c90f4de7e34d6faabc87c54cb175a5
msgid "BSON"
msgstr ""

#: ../source/faq/developers.txt:268
# c09fb875114546d89e1a51bdd2409634
msgid "As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/developers.txt:272
# 7f9c253e7a0f44b9b966a8a3c8df06f5
msgid "MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client libraries </applications/drivers>` provide a convenient, injection free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/developers.txt:282
# 07b6b5a93bad4f569d73677c88ed6cbd
msgid "Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If ``my_query`` contained special characters, for example ``,``, ``:``, and ``{``, the query simply wouldn't match any documents. For example, users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/developers.txt:289
# 429ec3efdb6d4a76bc7cec304a0bb9e3
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
# 9ab43066e1b84cec9f63b8034f93e0e4
msgid "You can disable all server-side execution of JavaScript, by passing the :option:`--noscripting <mongod --noscripting>` option on the command line or setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/faq/developers.txt:295
# ca3c34aae2ce44658dcf9a958aef06a1
msgid "All of the following MongoDB operations permit you to run arbitrary JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/developers.txt:298
# 16b9cea8c9a048859bc613f87cfc3c3c
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/developers.txt:299
# 7391b8d6f54b444cb63723049508181a
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/faq/developers.txt:300
# 2f59062b0f3740569a8dacc3ee68ad9d
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/developers.txt:301
# 6cca540f7fbd405497f606e891fac8ef
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/developers.txt:303
# f5a6b92a85b94b2ebb79e65b60856339
msgid "You must exercise care in these cases to prevent users from submitting malicious JavaScript."
msgstr ""

#: ../source/faq/developers.txt:306
# 42991e4dda964943914b14bde51d8856
msgid "Fortunately, you can express most queries in MongoDB without JavaScript and for queries that require JavaScript, you can mix JavaScript and non-JavaScript in a single query. Place all the user-supplied fields directly in a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/developers.txt:312
# 454d1f6c4bf54550844f38a8459ce028
msgid "If you need to pass user-supplied values in a :query:`$where` clause, you may escape these values with the ``CodeWScope`` mechanism. When you set user-submitted values as variables in the scope document,  you can avoid evaluating them on the database server."
msgstr ""

#: ../source/faq/developers.txt:318
# 008d687824254321b4b014752c776b08
msgid "If you need to use :method:`db.eval()` with user supplied values, you can either use a ``CodeWScope`` or you can supply extra arguments to your function. For instance:"
msgstr ""

#: ../source/faq/developers.txt:327
# 9a8d91aaf3474861bb49bacd42e0f9af
msgid "This will ensure that your application sends ``user_value`` to the database server as data rather than code."
msgstr ""

#: ../source/faq/developers.txt:333
# 1bb1d7bc976a4039babb32f9f15e809e
msgid "Dollar Sign Operator Escaping"
msgstr ""

#: ../source/faq/developers.txt:335
# 99be2fc721794b039e41aad585775326
msgid "Field names in MongoDB's query language have semantic meaning. The dollar sign (i.e ``$``) is a reserved character used to represent :doc:`operators </reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that your application's users cannot inject operators into their inputs."
msgstr ""

#: ../source/faq/developers.txt:341
# 9a9d53e11720485ab98bc88be0f38274
msgid "In some cases, you may wish to build a BSON object with a user-provided key.  In these situations, keys will need to substitute the reserved ``$`` and ``.`` characters. Any character is sufficient, but consider using the Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e. \"．\")."
msgstr ""

#: ../source/faq/developers.txt:347
# e79547226fd14ec18b7e6959037f9b24
msgid "Consider the following example:"
msgstr ""

#: ../source/faq/developers.txt:353
# 9611ca77f81d496497e75ccbdf81a950
msgid "The user may have supplied a ``$`` value in the ``a_key`` value. At the same time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the following cases:"
msgstr ""

#: ../source/faq/developers.txt:357
# e0991f8b30b146c5b58d83c95165b98a
msgid "**Insert**. Inserting this into the database does no harm. The insert process does not evaluate the object as a query."
msgstr ""

#: ../source/faq/developers.txt:362
# 523549fc5380414bbe741c3422320847
msgid "MongoDB client drivers, if properly implemented, check for reserved characters in keys on inserts."
msgstr ""

#: ../source/faq/developers.txt:365
# 025a19e82a474c0589d4c4ef4f2a722b
msgid "**Update**.  The :method:`~db.collection.update()` operation permits ``$`` operators in the update argument but does not support the :query:`$where` operator. Still, some users may be able to inject operators that can manipulate a single document only. Therefore your application should escape keys, as mentioned above, if reserved characters are possible."
msgstr ""

#: ../source/faq/developers.txt:372
# 5da4c2b0684845aeb40d3269e5f10759
msgid "**Query** Generally this is not a problem for queries that resemble ``{ x : user_obj }``: dollar signs are not top level and have no effect. Theoretically it may be possible for the user to build a query themselves. But checking the user-submitted content for ``$`` characters in key names may help protect against this kind of injection."
msgstr ""

#: ../source/faq/developers.txt:380
# 5e6ece08bda84bbca8765b6ab37bb060
msgid "Driver-Specific Issues"
msgstr ""

#: ../source/faq/developers.txt:382
# 1ab5537b4b0e4fabab9e70e5d1013886
msgid "See the \"`PHP MongoDB Driver Security Notes <http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver documentation for more information"
msgstr ""

#: ../source/faq/developers.txt:389
# 1384caf891ef46ee983d4984c39bf6a4
msgid "How does MongoDB provide concurrency?"
msgstr ""

#: ../source/faq/developers.txt:391
# 61992d0186e540bdb4369490dec245e3
msgid "MongoDB implements a readers-writer lock. This means that at any one time, only one client may be writing or any number of clients may be reading, but that reading and writing cannot occur simultaneously."
msgstr ""

#: ../source/faq/developers.txt:396
# b403956497d34bcd96e24846b5fe1d13
msgid "In standalone and :term:`replica sets <replica set>` the lock's scope applies to a single :program:`mongod` instance or :term:`primary` instance. In a sharded cluster, locks apply to each individual shard, not to the whole cluster."
msgstr ""

#: ../source/faq/developers.txt:401
# 3372be3bf2054c53aab23fc1e0d42b6c
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

#: ../source/faq/developers.txt:406
# 90946445c31a4db197ce9e7ba56130af
msgid "What is the compare order for BSON types?"
msgstr ""

#: ../source/faq/developers.txt:408
# 316e5cc7778c429fab83ada7c72c97e7
msgid "MongoDB permits documents within a single collection to have fields with different :term:`BSON` types. For instance, the following documents may exist within a single collection."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# cb8accbc747149d8b9c65ac1d356a391
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# 5c41eb2ec97044b89117c8c737b733ee
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# 45f6da3898fb40f2a23609707b0fbe46
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# c947054f424b4bb8bad13654c85a772e
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# eeb90167fc7342ae9f85a4292575bb53
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 0ce9f7237d784fa28f5658eeb736cb91
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# ed7bfba7744540d1b3eed6f00182e63d
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# cc1dcd85c333462795ad15e643f74bf1
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 6e3583b80c03430eaef66831a64d15c6
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# 050f631e1b834b398860b63651ca8324
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 2b523a8b905547a39ca03880fde2d4b4
msgid "Date, Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# 570f1128902d47e98fe99af3dd65a72e
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# fbbd8e07f88849b399df3305897ba0d4
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:17
# c4ada870760747ea86d4ba0c0a749415
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:20
# 24a4dffa50cb4fa58dc3a15e5b02a71d
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:24
# 9472ee9746c846e38c81fa8c4f46e9ba
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:32
# afbe38bbaaba4a3d879fbe8a051e8e20
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:34
# face757777414f6fb23d8e4461caa568
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:36
# db7e88aff244421384286f9a0abade94
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:38
# c7ea9389e0504075a340f52cbdc68275
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/faq/developers.txt:419
# 6a49be71c1fe497dbcc24515e474be99
msgid "Consider the following :program:`mongo` example:"
msgstr ""

#: ../source/faq/developers.txt:434
# 1092e293f24f497a8eb643fddd2547c8
msgid "The :query:`$type` operator provides access to :term:`BSON type <BSON types>` comparison in the MongoDB query syntax. See the documentation on :term:`BSON types` and the :query:`$type` operator for additional information."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
# d3a3fec34dc640f6a3197e61d0ca3b84
msgid "Storing values of the different types in the same field in a collection is *strongly* discouraged."
msgstr ""

#: ../source/faq/developers.txt:443
# e34c8d84979c4805b4bc8c131f1c18ab
msgid "The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an example of a C++ use of ``MinKey``."
msgstr ""

#: ../source/faq/developers.txt:455
# 5a00af4d0e8c4de786d312422825e843
msgid "When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

#: ../source/faq/developers.txt:457
# 16c4d2a034724757a43088ed2d962533
msgid "The :update:`$mul` multiplies the numeric value of a field by a number. For multiplication with values of mixed numeric types (32-bit integer, 64-bit integer, float), the following type conversion rules apply:"
msgstr ""

#: ../source/faq/developers.txt:466
# 1dfe6abddb5c4bd3a8bc236afcd4cfc2
msgid "32-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:467
#: ../source/faq/developers.txt:472
#: ../source/faq/developers.txt:476
#: ../source/faq/developers.txt:477
# 269f5608b00c44c6b424b60ad67d81c4
# 9ff2506c5a32409ebdb17125c169e636
# d4a31d15749d4a4da8629ae15fc33162
# 488bbe19634e4bd9a61c2a070bd03694
msgid "64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:468
#: ../source/faq/developers.txt:473
#: ../source/faq/developers.txt:478
#: ../source/faq/developers.txt:481
#: ../source/faq/developers.txt:482
#: ../source/faq/developers.txt:483
# cd5ca6df790c4a8c9e65ae50441cbea2
# 1ea93494fd224d6a87b35445675c67df
# 6d47de7fa97747628a5aab13f477647d
# 06ebac27d73e49d9a885d2e1c6ca0991
# fb9f2bdf96c346a89be4374ad74bd710
# 5a2814d5f317453c8ca2e385f23b2684
msgid "Float"
msgstr ""

#: ../source/faq/developers.txt:470
# 0ef612a009bf48bb950b749a5af735f1
msgid "**32-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:471
# af7b98a67b124adbbff8a1eb201a6900
msgid "32-bit or 64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:475
# 216d3a1b721a421081b623133a00f3a3
msgid "**64-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:480
# e10917de4b314eb58863e3f73822bd2d
msgid "**Float**"
msgstr ""

#: ../source/faq/developers.txt:487
# 1153fb3ec39f4728b5ac5951a6770da1
msgid "If the product of two 32-bit integers exceeds the maximum value for a 32-bit integer, the result is a 64-bit integer."
msgstr ""

#: ../source/faq/developers.txt:490
# 9c10f343e09744ae8297d628c6b05106
msgid "Integer operations of any type that exceed the maximum value for a 64-bit integer produce an error."
msgstr ""

#: ../source/faq/developers.txt:496
# 3fa347a299334057886367085b7a0732
msgid "How do I query for fields that have null values?"
msgstr ""

#: ../source/faq/developers.txt:498
# 9fc45c343e1a4f269cdf4bfdb4695dfa
msgid "Fields in a document may store ``null`` values, as in a notional collection, ``test``, with the following documents:"
msgstr ""

#: ../source/faq/developers.txt:506
# bdc1039561a74a1594ec6af0427bfe06
msgid "Different query operators treat ``null`` values differently:"
msgstr ""

#: ../source/faq/developers.txt:508
# 940684a8b56f4a1db61c7926125ff383
msgid "The ``{ cancelDate : null }`` query matches documents that either contains the ``cancelDate`` field whose value is ``null`` *or* that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:516
# 4451dda146b24d2a8985c37a6dc661ed
msgid "The query returns both documents:"
msgstr ""

#: ../source/faq/developers.txt:523
# 80f78d663c084e20b65f4402c8b3e3fb
msgid "The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

#: ../source/faq/developers.txt:532
# cf89352d816f41a4814fa9ce233caf07
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

#: ../source/faq/developers.txt:538
# 78d6f186721c4cfd874a9cf0aff4e14b
msgid "The ``{ cancelDate : { $exists: false } }`` query matches documents that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:545
# cd55d045d8154a26aadb69b6abc6a823
msgid "The query returns only the document that does *not* contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:552
# 702411e5a4874518b19e573feb0a8439
msgid "The reference documentation for the :query:`$type` and :query:`$exists` operators."
msgstr ""

#: ../source/faq/developers.txt:558
# ff3d00689c4a45cda64183261dbda1f4
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

#: ../source/faq/developers.txt:560
# 78f989b8e9c14e599e64e02b69b687fc
msgid "Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

#: ../source/faq/developers.txt:563
# 26231726347f4cddb14f94dade57e029
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

#: ../source/faq/developers.txt:565
# 2be185b7bef14215934d30c41bb0835c
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

#: ../source/faq/developers.txt:567
# 8715fe3678b449df800a130f07f4f83d
msgid "Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

#: ../source/faq/developers.txt:569
# 6c84286c3eb04f2b901bed3369eee6e0
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

#: ../source/faq/developers.txt:571
# 4aeae5cdb22743e7a6bacc19524f9c9e
msgid "Do not name a collection using the ``system.`` prefix. MongoDB reserves ``system.`` for system collections, such as the ``system.indexes`` collection."
msgstr ""

#: ../source/faq/developers.txt:576
# a8afee6e31a14bafb4d3c64998a95b1a
msgid "The maximum size of a collection name is 128 characters, including the name of the database. However, for maximum flexibility, collections should have names less than 80 characters."
msgstr ""

#: ../source/faq/developers.txt:580
# 5097d86a5a6444749ec1531b3c4905bd
msgid "If your collection name includes special characters, such as the underscore character, then to access the collection use the :method:`db.getCollection()` method or a :api:`similar method for your driver <>`."
msgstr ""

#: ../source/faq/developers.txt:0
# dc521065cc1a4231a751e214ec419847
msgid "Example"
msgstr ""

#: ../source/faq/developers.txt:592
# 672c90886b284b56a79f1325fba25da0
msgid "To perform a query, use the :method:`~db.collection.find()` method, in as the following:"
msgstr ""

#: ../source/faq/developers.txt:602
# dc785fb03bdc4ee49eaeb7b80ecd4b4a
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

#: ../source/faq/developers.txt:604
# 28b392aaef2a4e5f9ca759b1bfc79c2f
msgid "MongoDB cursors can return the same document more than once in some situations. [#duplicate-document-in-result-set]_ You can use the :method:`~cursor.snapshot()` method on a cursor to isolate the operation for a very specific case."
msgstr ""

#: ../source/faq/developers.txt:609
# a0ad998be6a34a99ab5fd0b69a9d5cb9
msgid ":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and guarantees that the query will return each document (with respect to the value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

#: ../source/faq/developers.txt:613
# a5e4146c3d304356bb641a5a33c3a7e0
msgid "The :method:`~cursor.snapshot()` does not guarantee that the data returned by the query will reflect a single moment in time *nor* does it provide isolation from insert or delete operations."
msgstr ""

#: ../source/faq/developers.txt:619
# 360be456c7b24c12bbd24a7b84e46777
msgid "You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded collections <sharding>`."
msgstr ""

#: ../source/faq/developers.txt:622
# a7755c1c0a8c49df8bd84fba75d49bce
msgid "You **cannot** use :method:`~cursor.snapshot()` with :method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/faq/developers.txt:626
# 82024893bc55452f977d97302b40a8b0
msgid "As an alternative, if your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields to achieve a similar result as the :method:`~cursor.snapshot()`. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/faq/developers.txt:632
# 1c38fa2696d442f8a070f5d6cfb7fdc4
msgid "As a cursor returns documents other operations may interleave with the query: if some of these operations are :doc:`updates </core/write-operations>` that cause the document to move (in the case of a table scan, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:640
# 9986129281244fce977209b658525abb
msgid "MongoDB does not permit changes to the value of the ``_id`` field; it is not possible for a cursor that transverses this index to pass the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:647
# 80087e9dce73456f9052ab1c50b1c673
msgid "When should I embed documents within other documents?"
msgstr ""

#: ../source/faq/developers.txt:649
# c5894f0d75d94797a3bbd828f590c39b
msgid "When :doc:`modeling data in MongoDB </core/data-models>`, embedding is frequently the choice for:"
msgstr ""

#: ../source/faq/developers.txt:652
# d4de29d55eee4105a2a3f34efb69e370
msgid "\"contains\" relationships between entities."
msgstr ""

#: ../source/faq/developers.txt:654
# bc67670a8c164032960bb54e9ef2cc7b
msgid "one-to-many relationships when the \"many\" objects *always* appear with or are viewed in the context of their parents."
msgstr ""

#: ../source/faq/developers.txt:657
# 705987ba0ff5430c982e92cc32136d91
msgid "You should also consider embedding for performance reasons if you have a collection with a large number of small documents. Nevertheless, if small, separate documents represent the natural model for the data, then you should maintain that model."
msgstr ""

#: ../source/faq/developers.txt:662
# 33188dc43f7a40b194eb22cd7a65d821
msgid "If, however, you can group these small documents by some logical relationship *and* you frequently retrieve the documents by this grouping, you might consider \"rolling-up\" the small documents into larger documents that contain an array of subdocuments. Keep in mind that if you often only need to retrieve a subset of the documents within the group, then \"rolling-up\" the documents may not provide better performance."
msgstr ""

#: ../source/faq/developers.txt:670
# b9ca367a1b434a9798924a16acfdb4ae
msgid "\"Rolling up\" these small documents into logical groupings means that queries to retrieve a group of documents involve sequential reads and fewer random disk accesses."
msgstr ""

#: ../source/faq/developers.txt:676
# 4a60bbfaac0d4da9910fe7f3289851d5
msgid "Additionally, \"rolling up\" documents and moving common fields to the larger document benefit the index on these fields. There would be fewer copies of the common fields *and* there would be fewer associated key entries in the corresponding index. See :doc:`/core/indexes` for more information on indexes."
msgstr ""

#: ../source/faq/developers.txt:690
# 8f53f6c862154d5380b99d1c5bb2df5c
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:692
# 721d2872035642628075447bc29e14c7
msgid "Begin by reading the documents in the :doc:`/data-modeling` section. These documents contain a high level introduction to data modeling considerations in addition to practical examples of data models targeted at particular issues."
msgstr ""

#: ../source/faq/developers.txt:697
# be3ee59e56dd438192e9a88b125d9075
msgid "Additionally, consider the following external resources that provide additional examples:"
msgstr ""

#: ../source/faq/developers.txt:708
# 92db773611ff4e2098edd0b1319ec088
msgid "`Schema Design by Example <http://www.10gen.com/presentations/mongodb-melbourne-2012/schema-design-example>`_"
msgstr ""

#: ../source/faq/developers.txt:710
# 0af56ac7bb5c40479d8e9086f2f60062
msgid "`Dynamic Schema Blog Post <http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

#: ../source/faq/developers.txt:713
# b223842940b04f1abb09b22458aea767
msgid ":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-on-rails/>`"
msgstr ""

#: ../source/faq/developers.txt:716
# b24d3473b5e34c0b978ee2d3696c2a61
msgid "`Ruby Example of Materialized Paths <http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

#: ../source/faq/developers.txt:719
# b759ffd69a8745e48efe237dc892cc35
msgid "`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database>`_ which was the source for much of the :ref:`data-modeling-trees` content."
msgstr ""

#: ../source/faq/developers.txt:727
# 49426f45903442cc92289dd64fd17c46
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/developers.txt:729
# 6eff72d193fe4050916a6c2ef9c5ee0e
msgid "An update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/developers.txt:733
# a752ea46dde847f187405e663d94520b
msgid "You should not have to pad manually because MongoDB adds :ref:`padding automatically <record-allocation-strategies>` and can adaptively adjust the amount of padding added to documents to prevent document relocations following updates. You can change the default :data:`~collStats.paddingFactor` calculation by using the :dbcommand:`collMod` command with the :collflag:`usePowerOf2Sizes` flag. The :collflag:`usePowerOf2Sizes` flag ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation."
msgstr ""

#: ../source/faq/developers.txt:744
# b325db85b2484a7bb68bd3a7672299cf
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/developers.txt:748
# aa42ce4aa6e44f338e8642d574c8fdb5
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/developers.txt:772
# 75aebe0da86f477d896db7394083aef7
msgid ":ref:`record-allocation-strategies`"
msgstr ""

