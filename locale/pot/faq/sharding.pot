# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
# 9a050e7aa78840dd9a078a3f053e3bfe
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:7
# b517c169efc44e1cad3c6655725586f4
msgid "This document answers common questions about horizontal scaling using MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:10
# 07b3f3baeb894a519333f5d5aa5eaf1c
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:15
# 7a8074ea7beb40158990589f89a5cdea
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:17
# 1808d4b7a71843b39ab569cd7912f525
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:19
# c2960d1d22ec4052b7af9c5bf6551a0d
msgid "If your data set fits on a single server, you should begin with an unsharded deployment."
msgstr ""

#: ../source/faq/sharding.txt:22
# 3cfacdb54fa543818b0e632eaad572b0
msgid "Converting an unsharded database to a :term:`sharded cluster` is easy and seamless, so there is *little advantage* in configuring sharding while your data set is small."
msgstr ""

#: ../source/faq/sharding.txt:26
# 8c4a8484d3224ee78f8f4f10d1d94afc
msgid "Still, all production deployments should use :term:`replica sets <replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:30
# 71373bd11c1a4dae88f6e3bf82af04be
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:32
# dd8b1cfed7e0434983eaebf871a51643
msgid "To use replication with sharding, deploy each :term:`shard` as a :term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:38
# 182fa8719a9041a7b2d25fa23e45d9ea
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:40
# 2e4dd6e7b6914231bc7d6e19aa6390f6
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:42
# 20a85e687408414ba7c2e78459174086
msgid "There is no automatic support in MongoDB for changing a shard key after sharding a collection. This reality underscores the importance of choosing a good :ref:`shard key <shard-key>`. If you *must* change a shard key after sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:47
# 47f6143d7bac435eb76daaeaec47ee57
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:49
# 30ec91743fd942d5bbc4eb998cf095b9
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:51
# 01f699637ff84a628d29936309a413f3
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:53
# 4ae40a9c242243dd84139bd875d40e8e
msgid ":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:56
# 314aac2abb5a48c3ad681db1def57aac
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:58
# 4ba04c383b2241b0a82bb7b0ab9e2b7e
msgid "See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the :ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:64
# 2fecb6e1b3e84194915bfc260be9a3fb
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:66
# b0bf8f71f3d5412d8d0db5be644275d1
msgid "In the current implementation, all databases in a :term:`sharded cluster` have a \"primary :term:`shard`.\" All unsharded collection within that database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:71
# 36e43fe6e07743c5b2f52c35342f01cb
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:73
# 80266b28f78e4ba4a1af296c2b3d7885
msgid "Sharding must be specifically enabled on a collection. After enabling sharding on the collection, MongoDB will assign various ranges of collection data to the different shards in the cluster. The cluster automatically corrects imbalances between shards by migrating ranges of data from one shard to another."
msgstr ""

#: ../source/faq/sharding.txt:80
# a69139e7bbfa4dd4b2b37b842747567c
msgid "What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:82
# 2879e194ab364fd68b52b0b5965f0c43
msgid "The :program:`mongos` routes the operation to the \"old\" shard, where it will succeed immediately. Then the :term:`shard` :program:`mongod` instances will replicate the modification to the \"new\" shard before the :term:`sharded cluster` updates that chunk's \"ownership,\" which effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:89
# 9539656ea9e64a19b725eb110947a6ac
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:91
# c226b08ae3fb4c36bfab8fcc23b482c0
msgid "If a :term:`shard` is inaccessible or unavailable, queries will return with an error."
msgstr ""

#: ../source/faq/sharding.txt:94
# 2a75ce44b5284073b594e43e1919c531
msgid "However, a client may set the ``partial`` query bit, which will then return results from all available shards, regardless of whether a given shard is unavailable."
msgstr ""

#: ../source/faq/sharding.txt:98
# 2a25c8eac7744adbaaf1bc869bcefce5
msgid "If a shard is responding slowly, :program:`mongos` will merely wait for the shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:102
# 9f05dc273bb44f76a3dea452c4992847
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:106
# 4513649f82f1417f9366670c500e51a3
msgid "The exact method for distributing queries to :term:`shards <shard>` in a :term:`cluster <sharded cluster>` depends on the nature of the query and the configuration of the sharded cluster. Consider a sharded collection, using the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` attributes:"
msgstr ""

#: ../source/faq/sharding.txt:112
# ddaa3ee6511d44f592b11f26f320776b
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:115
# a318d5f873b74d0caf336d5d49562e87
msgid ":program:`mongos` determines which shard or shards contains the relevant data, based on the cluster metadata, and directs a query to the required shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:120
# b1f261f36ebb42bcadb822c602a308be
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:122
# 066a936e0f124dfa87d27ffa8d185cd8
msgid ":program:`mongos` can make a straightforward translation of this operation into a number of queries against the relevant shards, ordered by ``user_id``. When the sorted queries return from all shards, the :program:`mongos` merges the sorted results and returns the complete result to the client."
msgstr ""

#: ../source/faq/sharding.txt:128
# 87e0a7d17b3b42af98ed585782994cbb
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:130
# 21bade466663494283bc5a658672627f
msgid "These queries must run on all shards: :program:`mongos` must parallelize the query over the shards and perform a merge-sort on the ``email`` of the documents found."
msgstr ""

#: ../source/faq/sharding.txt:135
# 76de3333cafb4999811819625ba98413
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:137
# 1d27dcbf468040cfbb5270825d21cd4e
msgid "If you call the :method:`cursor.sort()` method on a query in a sharded environment, the :program:`mongod` for each shard will sort its results, and the :program:`mongos` merges each shard's results before returning them to the client."
msgstr ""

#: ../source/faq/sharding.txt:143
# b659bf44eea7476186015b2e739ed36f
msgid "How does MongoDB ensure unique ``_id`` field values when using a shard key *other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:145
# 8fec57d72e7f4111b48bf3922f5fb482
msgid "If you do not use ``_id`` as the shard key, then your application/client layer must be responsible for keeping the ``_id`` field unique. It is problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:150
# ad0e880b9f06430db0c0fe1fa69a8a5e
msgid "If you're not sharding your collection by the ``_id`` field, then you should be sure to store a globally unique identifier in that field. The default :doc:`BSON ObjectId </reference/object-id>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:156
# eb7361380d0f4adcb89291b0a4908422
msgid "I've enabled sharding and added a second shard, but all the data is still on one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:158
# 592f2e3eebee40b6a50bea9f21e4e2c3
msgid "First, ensure that you've declared a :term:`shard key` for your collection. Until you have configured the shard key, MongoDB will not create :term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:162
# 41b3bfe4d59b46bfa7ecddf7e08f145c
msgid "Next, keep in mind that the default chunk size is 64 MB. As a result, in most situations, the collection needs to have at least 64 MB of data before a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:166
# 8373b92762344961a15413ad495b7d72
msgid "Additionally, the system which balances chunks among the servers attempts to avoid superfluous migrations. Depending on the number of shards, your shard key, and the amount of data, systems often require at least 10 chunks of data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:171
# 9262591f9f754bb0bec58e78407b9037
msgid "You can run :method:`db.printShardingStatus()` to see all the chunks present in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:175
# 78555003ff0a46fba14d5f865329cf78
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:177
# 534f8088062b430abbf4f2f127f973c5
msgid "Yes. :program:`mongod` creates these files as backups during normal :term:`shard` balancing operations."
msgstr ""

#: ../source/faq/sharding.txt:180
# c8dfdd240aaf4b528ac155bb286dea80
msgid "Once these migrations are complete, you may delete these files."
msgstr ""

#: ../source/faq/sharding.txt:183
# 978ccea3a5364f8cb77501062a3cfc99
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:185
# 4a82af6b840d4ca7bd9f72e38286044c
msgid "Each client maintains a connection to a :program:`mongos` instance. Each :program:`mongos` instance maintains a pool of connections to the members of a replica set supporting the sharded cluster.  Clients use connections between :program:`mongos` and :program:`mongod` instances one at a time. Requests are not multiplexed or pipelined. When client requests complete, the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:193
# b0cb95132a324de697f9b7ec20252c48
msgid "See the :ref:`System Resource Utilization <system-resource-utilization>` section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:198
# a9583fc5f11d4ae99142d72b5497b527
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:200
# 5fcb64933f4e45ef8931f489876e0829
msgid ":program:`mongos` uses a set of connection pools to communicate with each :term:`shard`.  These pools do not shrink when the number of clients decreases."
msgstr ""

#: ../source/faq/sharding.txt:204
# f3c69a70f2ba40529c561d397c257a25
msgid "This can lead to an unused :program:`mongos` with a large number of open connections. If the :program:`mongos` is no longer in use, it is safe to restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:209
# f8d2719c3fa64828a8539c9f5fa74ac1
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:211
# 74bd0ba0669d439db880cced469a06a3
msgid "Connect to the :program:`mongos` with the :program:`mongo` shell, and run the following command:"
msgstr ""

#: ../source/faq/sharding.txt:221
# 2e0e31337fa24c0bb23c68ed334d7fe9
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:223
# 83d57a0cb12c40928012204f8d413b67
msgid "The writeback listener is a process that opens a long poll to relay writes back from a :program:`mongod` or :program:`mongos` after migrations to make sure they have not gone to the wrong server.  The writeback listener sends writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:229
# 6db21011b8b54801a179c9bbe0b8c243
msgid "These messages are a key part of the sharding infrastructure and should not cause concern."
msgstr ""

#: ../source/faq/sharding.txt:233
# 8a375f3cb375417f8ffe165a3b2a3e22
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:235
# e914aab291ad4fa38e2b06029a5b0da9
msgid "Failed migrations require no administrative intervention. Chunk migrations always preserve a consistent state. If a migration fails to complete for some reason, the :term:`cluster` retries the operation. When the migration completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:242
# 5fb6761979914df4803a9e2bb93cf44d
msgid "What is the process for moving, renaming, or changing the number of config servers?"
msgstr ""

#: ../source/faq/sharding.txt:244
# 320d5eec301e4dfca42115b6b0605c2e
msgid "See :doc:`/administration/sharded-clusters` for information on migrating and replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:248
# 524e5062ccc849059e3a05723e1e7c06
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:250
# 469d7938cd554ee18826da470d15a94e
msgid ":program:`mongos` instances maintain a cache of the :term:`config database` that holds the metadata for the :term:`sharded cluster`. This metadata includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:255
# 34da7a418f35405f8b538a2d4c97e2ac
msgid ":program:`mongos` updates its cache lazily by issuing a request to a shard and discovering that its metadata is out of date.  There is no way to control this behavior from the client, but you can run the :dbcommand:`flushRouterConfig` command against any :program:`mongos` to force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:262
# 275ca3577e174cc1b72efaa5d53f31c8
msgid "Is it possible to quickly update ``mongos`` servers after updating a replica set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:264
# ea83628c121a4453908c0a9eca2789a5
msgid "The :program:`mongos` instances will detect these changes without intervention over time. However, if you want to force the :program:`mongos` to reload its configuration, run the :dbcommand:`flushRouterConfig` command against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:271
# 38ba401bf64245e48c2f4b48d66c9111
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:273
# 5dbf0958a11f41d9b393a6453a5c3a72
msgid "The :setting:`~net.maxIncomingConnections` option limits the number of connections accepted by :program:`mongos`."
msgstr ""

#: ../source/faq/sharding.txt:276
# b46e573ce5d249c285e990854794c2a3
msgid "If your client driver or application creates a large number of connections but allows them to time out rather than closing them explicitly, then it might make sense to limit the number of connections at the :program:`mongos` layer."
msgstr ""

#: ../source/faq/sharding.txt:281
# c6febc1535e54313a3aeedace9f85bb1
msgid "Set :setting:`~net.maxIncomingConnections` to a value slightly higher than the maximum number of connections that the client creates, or the maximum size of the connection pool. This setting prevents the :program:`mongos` from causing connection spikes on the individual :term:`shards <shard>`. Spikes like these may disrupt the operation and memory allocation of the :term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:289
# 242e3cd1fde7488fa192db820d777ecf
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:291
# 499574ca903745019519abc2a7e510c5
msgid "If the query does not include the :term:`shard key`, the :program:`mongos` must send the query to all shards as a \"scatter/gather\" operation. Each shard will, in turn, use *either* the shard key index or another more efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:296
# ad7bdb571d5d40fbb324c4ab43cbc95b
msgid "If the query includes multiple sub-expressions that reference the fields indexed by the shard key *and* the secondary index, the :program:`mongos` can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently. See `this presentation <http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for more information."
msgstr ""

#: ../source/faq/sharding.txt:304
# 1a84b77ddd4c4e3a97cee98e67ac49dc
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:306
# 821059f12a4a4642996ac00e871ec25f
msgid ":term:`Shard keys <shard key>` can be random. Random keys ensure optimal distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:309
# 91664666a0a7460684f654e4a491be58
msgid ":term:`Sharded clusters <sharded cluster>`, attempt to route queries to *specific* shards when queries include the shard key as a parameter, because these directed queries are more efficient. In many cases, random keys can make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:318
# 78e15da3fd024848af2d2e8b8c0c2b05
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:320
# b92269d2733644acad6429ceb685ad8e
msgid "Yes. There is no requirement that documents be evenly distributed by the shard key."
msgstr ""

#: ../source/faq/sharding.txt:323
# ce1297dad33d48e1a2f307a46a56bce3
msgid "However, documents that have the same shard key *must* reside in the same *chunk* and therefore on the same server. If your sharded data set has too many documents with the exact same shard key you will not be able to distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:331
# ca7bc37e9a174e2488f10f1c8c405015
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:333
# b808976f89da4c43b41dbfdbc8ea1cd9
msgid "You can use any field for the shard key. The ``_id`` field is a common shard key."
msgstr ""

#: ../source/faq/sharding.txt:336
# f9d3f055e2aa42ad87f0c5b3f4d1cd8c
msgid "Be aware that ``ObjectId()`` values, which are the default value of the ``_id`` field, increment as a timestamp. As a result, when used as a shard key, all new documents inserted into the collection will initially belong to the same chunk on a single shard. Although the system will eventually divide this chunk and migrate its contents to distribute data more evenly, at any moment the cluster can only direct insert operations at a single shard. This can limit the throughput of inserts. If most of your write operations are updates, this limitation should not impact your performance. However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:347
# 15f92a81665f4d3a8df245f32d5dce0e
msgid "To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys <sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:351
# 3e63581a5d76421ca7e19c4099d84300
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:353
# 46951381f75d41b5ac8275320d879b8a
msgid "At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the :term:`shard` must connect to the :term:`config database` to update the chunk's record in the cluster metadata. If the :term:`shard` fails to connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:364
# e3fecaa6240b4be0a79234754fd8ca66
msgid "When this happens, the :term:`primary` member of the shard's replica set then terminates to protect data consistency. If a :term:`secondary` member can access the config database, data on the shard becomes accessible again after an election."
msgstr ""

#: ../source/faq/sharding.txt:369
# d500193cbd0744c4acbab0ff79b30372
msgid "The user will need to resolve the chunk migration failure independently. If you encounter this issue, contact the `MongoDB User Group <http://groups.google.com/group/mongodb-user>`_ or :about:`MongoDB Support </support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:375
# d8d9154f9ebf488aabe7be4c8d39cadf
msgid "How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:377
# 02c452e415d24a67941b6470881deedc
msgid "The sharded cluster balancing process controls both migrating chunks from decommissioned shards (i.e. draining) and normal cluster balancing activities. Consider the following behaviors for different versions of MongoDB in situations where you remove a shard in a cluster with an uneven chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:383
# f7f683f9dcf141aa99755ded6e5d46b0
msgid "After MongoDB 2.2, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:387
# 8434f4e371be497a939c2d514bdaeaab
msgid "Before MongoDB 2.2, the balancer handles the uneven chunk distribution and *then* removes the chunks from the draining shard."
msgstr ""

