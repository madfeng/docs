# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/fundamentals.txt:3
# 8ebf84bff3244972a31b5a124a12a7cc
msgid "FAQ: MongoDB Fundamentals"
msgstr ""

#: ../source/faq/fundamentals.txt:7
# 7aa2c87fc83a4f9e87d236062c998522
msgid "This document addresses basic high level questions about MongoDB and its use."
msgstr ""

#: ../source/faq/fundamentals.txt:10
# 78502b69061d42fd850189a184974ac0
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/fundamentals.txt:15
# 6607a0ce51094e1e9f7f031434470624
msgid "What kind of database is MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:17
# c1f437cb1dfe4e189e486ff967685135
msgid "MongoDB is a :term:`document`\\-oriented DBMS. Think of MySQL but with :term:`JSON`-like objects comprising the data model, rather than RDBMS tables. Significantly, MongoDB supports neither joins nor transactions. However, it features secondary indexes, an expressive query language, atomic writes on a per-document level, and fully-consistent reads."
msgstr ""

#: ../source/faq/fundamentals.txt:23
# c03483458de745eb9345b3bb714b9341
msgid "Operationally, MongoDB features master-slave replication with automated failover and built-in horizontal scaling via automated range-based partitioning."
msgstr ""

#: ../source/faq/fundamentals.txt:29
# 324328f29cd649e4a551784dd391a8f8
msgid "MongoDB uses :term:`BSON`, a binary object format similar to, but more expressive than :term:`JSON`."
msgstr ""

#: ../source/faq/fundamentals.txt:33
# 2793d5fb15bd46b285e74b3c28796179
msgid "Do MongoDB databases have tables?"
msgstr ""

#: ../source/faq/fundamentals.txt:35
# 46b85144d32148cdb87f7529772c19c2
msgid "Instead of tables, a MongoDB database stores its data in :term:`collections <collection>`, which are the rough equivalent of RDBMS tables. A collection holds one or more :term:`documents <document>`, which corresponds to a record or a row in a relational database table, and each document has one or more fields, which corresponds to a column in a relational database table."
msgstr ""

#: ../source/faq/fundamentals.txt:43
# 5fca7c2f4dff4fd0b91102a6bfc0d371
msgid "Collections have important differences from RDBMS tables. Documents in a single collection may have a unique combination and set of fields. Documents need not have identical fields. You can add a field to some documents in a collection without adding that field to all documents in the collection."
msgstr ""

#: ../source/faq/fundamentals.txt:0
#: ../source/faq/fundamentals.txt:0
# f63d5a636b6e42ca872d60d3e727b329
# 4b1c44e1f7b1478cbe793cc923f3d5d8
msgid "See"
msgstr ""

#: ../source/faq/fundamentals.txt:54
# 9f0895b1fb344c3e9afb8e4d1378214e
msgid "Do MongoDB databases have schemas?"
msgstr ""

#: ../source/faq/fundamentals.txt:56
# 1e69206837004a1c8cd5edf61fa23396
msgid "MongoDB uses dynamic schemas. You can create collections without defining the structure, i.e. the fields or the types of their values, of the documents in the collection. You can change the structure of documents simply by adding new fields or deleting existing ones. Documents in a collection need not have an identical set of fields."
msgstr ""

#: ../source/faq/fundamentals.txt:62
# 86aa4dd0081f461b9849457fe77c5817
msgid "In practice, it is common for the documents in a collection to have a largely homogeneous structure; however, this is not a requirement. MongoDB's flexible schemas mean that schema migration and augmentation are very easy in practice, and you will rarely, if ever, need to write scripts that perform \"alter table\" type operations, which simplifies and facilitates iterative software development with MongoDB."
msgstr ""

#: ../source/faq/fundamentals.txt:73
# 1bd356cb5b7247f280ca19faaddd4ce0
msgid "What languages can I use to work with MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:75
# 017d34138a1e45e7910b277eb4d33c66
msgid "MongoDB :term:`client drivers <driver>` exist for all of the most popular programming languages, and many other ones. See the :ecosystem:`latest list of drivers </drivers>` for details."
msgstr ""

#: ../source/faq/fundamentals.txt:81
# 2b54b09f38784b7a94d83b721a63c162
msgid ":doc:`/applications/drivers`."
msgstr ""

#: ../source/faq/fundamentals.txt:84
# f00643770b7d4a6bb3c620d36054258d
msgid "Does MongoDB support SQL?"
msgstr ""

#: ../source/faq/fundamentals.txt:86
# 68c9bc738fc84af8b10b874c0c2eec82
msgid "No."
msgstr ""

#: ../source/faq/fundamentals.txt:88
# 85aa47bc17ba42d493721ffc765a8c58
msgid "However, MongoDB does support a rich, ad-hoc query language of its own."
msgstr ""

#: ../source/faq/fundamentals.txt:91
# d225b200a27a4351ac338da7162a15db
msgid ":doc:`/reference/operator`"
msgstr ""

#: ../source/faq/fundamentals.txt:94
# 81c549b894ea4e8ca6db8a680039f960
msgid "What are typical uses for MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:96
# 64a46c6f057c43aba18c9c801ce2846f
msgid "MongoDB has a general-purpose design, making it appropriate for a large number of use cases. Examples include content management systems, mobile applications, gaming, e-commerce, analytics, archiving, and logging."
msgstr ""

#: ../source/faq/fundamentals.txt:101
# d64625a29253458f8f91c64571cea5fb
msgid "Do not use MongoDB for systems that require SQL, joins, and multi-object transactions."
msgstr ""

#: ../source/faq/fundamentals.txt:105
# dbf2bf6797c54c64953f3a3fed804c76
msgid "Does MongoDB support ACID transactions?"
msgstr ""

#: ../source/faq/fundamentals.txt:107
# 23d17aa0504a4b39a8e9719648b525c8
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/fundamentals.txt:109
# 47d1a834b1e34c43a0f188a768b6ec94
msgid "However, MongoDB does provide atomic operations on a single document. Often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/fundamentals.txt:114
# 005870956ef14a488d2d3789bd59aa82
msgid "For example, in MongoDB, you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation. Relational databases might represent the same kind of data with multiple tables and rows, which would require transaction support to update the data atomically."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
# da13e82733034ff182cb1e9c878af8fd
msgid "MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration. As a result, applications may observe two classes of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
# 9aa8ff80e7fd45fc80cee3d27d6f3d8e
msgid "For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
# 9964c4579b1d4e47850edbc045f56592
msgid "If the :program:`mongod` terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
# f35827f59bd544359b78aa08fb41946e
msgid "Other database systems refer to these isolation semantics as *read uncommitted*. For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states. For multi-document operations, MongoDB does not provide any multi-document transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
# 420e09401f794e9ba384398606025a5a
msgid "When :program:`mongod` returns a successful *journaled write concern*, the data is fully committed to disk and will be available after :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
# 87aeb77e2298413fa6bac6d31dbe7087
msgid "For replica sets, write operations are durable only after a write replicates and commits to the journal of a majority of the members of the set. MongoDB regularly commits data to the journal regardless of journaled write concern: use the :setting:`~storage.journal.commitIntervalMs` to control how often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/faq/fundamentals.txt:123
# 515034603db24d559d1c5732cb252a6a
msgid "Does MongoDB require a lot of RAM?"
msgstr ""

#: ../source/faq/fundamentals.txt:125
# 5102023857d44f4eaf06d1285674b341
msgid "Not necessarily. It's certainly possible to run MongoDB on a machine with a small amount of free RAM."
msgstr ""

#: ../source/faq/fundamentals.txt:128
# cd7ce37770f1414d80cb6b751079222b
msgid "MongoDB automatically uses all free memory on the machine as its cache. System resource monitors show that MongoDB uses a lot of memory, but its usage is dynamic. If another process suddenly needs half the server's RAM, MongoDB will yield cached memory to the other process."
msgstr ""

#: ../source/faq/fundamentals.txt:133
# cc004ee3fe5e46968b4653fbbe16f254
msgid "Technically, the operating system's virtual memory subsystem manages MongoDB's memory. This means that MongoDB will use as much free memory as it can, swapping to disk as needed. Deployments with enough memory to fit the application's working data set in RAM will achieve the best performance."
msgstr ""

#: ../source/faq/fundamentals.txt:139
# 2a82e686b78a4423aa570493dd2bedac
msgid ":doc:`/faq/diagnostics` for answers to additional questions about MongoDB and Memory use."
msgstr ""

#: ../source/faq/fundamentals.txt:143
# 8b9ff7bce6154e3aaa6a4401f211508e
msgid "How do I configure the cache size?"
msgstr ""

#: ../source/faq/fundamentals.txt:145
# 629f7826e6604b35ba35252234b93fcc
msgid "MongoDB has no configurable cache. MongoDB uses all *free* memory on the system automatically by way of memory-mapped files. Operating systems use the same approach with their file system caches."
msgstr ""

#: ../source/faq/fundamentals.txt:152
# 9d8f4097b7574beaa6e1c9bb5b83578f
msgid "Does MongoDB require a separate caching layer for application-level caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:154
# 240ec8a4c55c499c9065a91ace5ed165
msgid "No. In MongoDB, a document's representation in the database is similar to its representation in application memory. This means the database already stores the usable form of data, making the data usable in both the persistent store and in the application cache. This eliminates the need for a separate caching layer in the application."
msgstr ""

#: ../source/faq/fundamentals.txt:160
# 1e925c59cd594fd196a16a548ed6625d
msgid "This differs from relational databases, where caching data is more expensive. Relational databases must transform data into object representations that applications can read and must store the transformed data in a separate cache: if these transformation from data to application objects require joins, this process increases the overhead related to using the database which increases the importance of the caching layer."
msgstr ""

#: ../source/faq/fundamentals.txt:169
# 23525291d2164131b42697d92f5e8556
msgid "Does MongoDB handle caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:171
# 2c06405367834228baf50ad03ee457d5
msgid "Yes. MongoDB keeps all of the most recently used data in RAM. If you have created indexes for your queries and your working data set fits in RAM, MongoDB serves all queries from memory."
msgstr ""

#: ../source/faq/fundamentals.txt:175
# feaa5389cd1a4bf69037eb6d935e0e1a
msgid "MongoDB does not implement a query cache: MongoDB serves all queries directly from the indexes and/or data files."
msgstr ""

#: ../source/faq/fundamentals.txt:179
# 57ae7c8a699a46b0b556d5410ecf2922
msgid "Are writes written to disk immediately, or lazily?"
msgstr ""

#: ../source/faq/fundamentals.txt:181
# cb980d18a22c43fba358fed80a8c8c62
msgid "Writes are physically written to the :doc:`journal </core/journaling>` within 100 milliseconds, by default. At that point, the write is \"durable\" in the sense that after a pull-plug-from-wall event, the data will still be recoverable after a hard restart. See :setting:`~storage.journal.commitIntervalMs` for more information on the journal commit window."
msgstr ""

#: ../source/faq/fundamentals.txt:187
# bda66c58246140af956bf126a8e91714
msgid "While the journal commit is nearly instant, MongoDB writes to the data files lazily. MongoDB may wait to write data to the data files for as much as one minute by default. This does not affect durability, as the journal has enough information to ensure crash recovery. To change the interval for writing to the data files, see :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/fundamentals.txt:194
# c1b8a3ebbcd1414da605ec6c0e3b8802
msgid "What language is MongoDB written in?"
msgstr ""

#: ../source/faq/fundamentals.txt:196
# e469bee8ab174af7934ec293f3067409
msgid "MongoDB is implemented in C++. :term:`Drivers <driver>` and client libraries are typically written in their respective languages, although some drivers use C extensions for better performance."
msgstr ""

#: ../source/faq/fundamentals.txt:203
# 2cbb3d88b20f4025afaf2629f4d95182
msgid "What are the limitations of 32-bit versions of MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:205
# 1d6a58f0e2244127890ed851b50e613c
msgid "MongoDB uses :ref:`memory-mapped files <faq-storage-memory-mapped-files>`. When running a 32-bit build of MongoDB, the total storage size for the server, including data and indexes, is 2 gigabytes. For this reason, do not deploy MongoDB to production on 32-bit machines."
msgstr ""

#: ../source/faq/fundamentals.txt:211
# 29cd4ab5e53144d79f840a7ce3035d11
msgid "If you're running a 64-bit build of MongoDB, there's virtually no limit to storage size. For production deployments, 64-bit builds and operating systems are strongly recommended."
msgstr ""

#: ../source/faq/fundamentals.txt:215
# f106bc87ab844c15ac0cd31b6202bce5
msgid "\"`Blog Post: 32-bit Limitations <http://blog.mongodb.org/post/137788967/32-bit-limitations>`_\""
msgstr ""

#: ../source/faq/fundamentals.txt:219
# 0dabb29e8cd1414fb7ad1449d6a6ffb3
msgid "32-bit builds disable :term:`journaling <journal>` by default because journaling further limits the maximum amount of data that the database can store."
msgstr ""

