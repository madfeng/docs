# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-monetary-data.txt:3
# 5557320935344cf78ded4a2c69949b85
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:8
# e2741e5378ae40bd8f84f0bbb79ea93c
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:10
# 01edcf2af4e14b83b50196a35d285832
msgid "MongoDB stores numeric data as either IEEE 754 standard 64-bit floating point numbers or as 32-bit or 64-bit signed integers. Applications that handle monetary data often require capturing fractional units of currency. However, arithmetic on floating point numbers, as implemented in modern hardware, often does not conform to requirements for monetary arithmetic. In addition, some fractional numeric quantities, such as one third and one tenth, have no exact representation in binary floating point numbers."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:21
# 67737b9b965b4be89237c69ba8c1319e
msgid "Arithmetic mentioned on this page refers to server-side arithmetic performed by :program:`mongod` or :program:`mongos`, and not to client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:25
# b60b779d0ebc4def8d3584b13657ee72
msgid "This document describes two ways to model monetary data in MongoDB:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:27
# 35091083d28c4f95a464737a9f96fb51
msgid ":ref:`monetary-value-exact-precision` which multiplies the monetary value by a power of 10."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:30
# 5744688222b44843af1e928fc2232d80
msgid ":ref:`monetary-value-arbitrary-precision` which uses two fields for the value: one field to store the exact monetary value as a non-numeric and another field to store a floating point approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:38
# 45a07ba7b44d45bc841774c378bd22a4
msgid "Use Cases for Exact Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:40
# 37e90f98f22d478e82a6c4bc073a0c2f
msgid "If you regularly need to perform server-side arithmetic on monetary data, the exact precision model may be appropriate. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:43
# f395d1fdc4bb436c85aff95329c4b123
msgid "If you need to query the database for exact, mathematically valid matches, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:46
# 445528d399244858a1cd39120ae03c54
msgid "If you need to be able to do server-side arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation framework arithmetic </reference/operator/aggregation-arithmetic>`, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:54
# e612501dfe964bbea240f02ec09f763c
msgid "Use Cases for Arbitrary Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:56
# 87ca8bb432844a7e8526f24cce9a193c
msgid "If there is no need to perform server-side arithmetic on monetary data, modeling monetary data using the arbitrary precision model may be suitable. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:60
# 8ae3ceaca4c843448e10ae0f60a72c80
msgid "If you need to handle arbitrary or unforeseen number of precision, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:63
# 3a162334902840439f1ea53e2e0cf290
msgid "If server-side approximations are sufficient, possibly with client-side post-processing, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:70
# e4b74cbcaecb4c31a93a85046d9d0713
msgid "Exact Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:72
# 1339480f2309464a9d5247f2cbf80142
msgid "To model monetary data using the exact precision model:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:74
# b9a960ce490f4ddca50edfa30f472c7e
msgid "Determine the maximum precision needed for the monetary value. For example, your application may require precision down to the tenth of one cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
# 359da7e11a9c41c29b4b503bb3131b3d
msgid "Convert the monetary value into an integer by multiplying the value by a power of 10 that ensures the maximum precision needed becomes the least significant digit of the integer. For example, if the required maximum precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:84
# ad5f254a468e422bbb7fa932500c7dd5
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:86
# 1c20d3b80c714f78a1684df4f668b434
msgid "For example, the following scales ``9.99 USD`` by 1000 to preserve precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:93
# 79807880a83b453bb9de478609a05a98
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:95
# f2d71570b8b24f1e99cdcdcb9db4d838
msgid "The scale factor is consistent for a currency; i.e. same scaling factor for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:98
# 32050d7178094b0582889abd7a35f412
msgid "The scale factor is a constant and known property of the currency; i.e applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:101
# f5b5e37fb0da46b8a48daa188fce972a
msgid "When using this model, applications must be consistent in performing the appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:104
# c2358e7f84194e4d98d1c513eeee9266
msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:109
# 66e7ff9e0f5e49ba8718348bd36b481a
msgid "Arbitrary Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:111
# c01a1e35416a497eadbc71815a5a989e
msgid "To model monetary data using the arbitrary precision model, store the value in two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:114
# ca988be9902e4c77b967d1c0041c96de
msgid "In one field, encode the exact monetary value as a non-numeric data type; e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:117
# 64accce547224a88b1d1a8272aa0b4ec
msgid "In the second field, store a double-precision floating point approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
# 9689560f89e34572896f2be67f5f9045
msgid "The following example uses the arbitrary precision model to store ``9.99 USD`` for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:130
# 34106ca71d634d3c98806c48038a2d77
msgid "With some care, applications can perform range and sort queries on the field with the numeric approximation. However, the use of the approximation field for the query and sort operations requires that applications perform client-side post-processing to decode the non-numeric representation of the exact value and then filter out the returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:137
# 7f2f84dbf725465f985414012d0810ef
msgid "For use cases of this model, see :ref:`arbitrary-precision-model-use-case`."
msgstr ""

