# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/build-a-2dsphere-index.txt:5
#: ../source/tutorial/build-a-2dsphere-index.txt:54
# ffe0b81c07f74f5c95535d2255387816
# ab641394f4e14fae9ac2d2befdc0e25f
msgid "Create a ``2dsphere`` Index"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:9
# 6274cd55d2624ecc950ddf055c8dcfce
msgid "To create a geospatial index for GeoJSON-formatted data, use the :method:`db.collection.ensureIndex()` method to create a :doc:`2dsphere index </core/2dsphere>`. In the index specification document for the :method:`db.collection.ensureIndex()` method, specify the location field as the index key and specify the string literal ``\"2dsphere\"`` as the value:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:20
# c289fbbe3a5d4fbaaa70f63e69fb48fa
msgid "The following procedure presents steps to populate a collection with documents that contain a GeoJSON data field and create :doc:`2dsphere indexes </core/2dsphere>`. Although the procedure populates the collection first, you can also create the indexes before populating the collection."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:27
# 38ab774f303540408b5f5dd50a29bc4f
msgid "Procedure"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:29
# d1b657176edb4af5933c8a2fc7f8f3e2
msgid "First, populate a collection ``places`` with documents that store location data as :ref:`GeoJSON Point <geojson-point>` in a field named ``loc``. The coordinate order is longitude, then latitude."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:51
# 37f2a668a46b4caf94ed73d155848a39
msgid "Then, create the :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:56
# 9f811f2a0ff745da957e39a3097cb9f4
msgid "For example, the following creates a :doc:`2dsphere </core/2dsphere>` index on the location field ``loc``:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:64
# 231bd6bcaae54fd59ccae5ae0017c317
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:66
# b2f85d0c89024141acc2bb69af596909
msgid "A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` index key in combination with non-geospatial index keys. For example, the following operation creates a compound index where the first key ``loc`` is a ``2dsphere`` index key, and the remaining keys ``category`` and ``names`` are non-geospatial index keys, specifically descending (``-1``) and ascending (``1``) keys respectively."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:78
# 0bc9ea23b93f4b709ce862cf51596a52
msgid "Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does not require the location field to be the first field indexed. For example:"
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:87
# 3bcd63eb4769476a8c3eb246566e0478
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# de0b4671ff224732a656cd7781838c25
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# 89fae79e8f5e43619ee7726521c3dcd0
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# 03e81e6cc73c403ab4770e52362bddff
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:93
# c9fece436309494a9d6fb7d5fd7e7092
msgid "As such, although this tutorial creates multiple ``2dsphere`` indexes, to use the :dbcommand:`geoNear` command or the :pipeline:`$geoNear` pipeline stage against the example collection, you will need to :method:`drop <db.collection.dropIndex()>` all but one of the ``2dsphere`` indexes."
msgstr ""

#: ../source/tutorial/build-a-2dsphere-index.txt:99
# 43d7e20d187f42eda00720e50abe93ca
msgid "To query using the ``2dsphere`` index, see :doc:`/tutorial/query-a-2dsphere-index`."
msgstr ""

