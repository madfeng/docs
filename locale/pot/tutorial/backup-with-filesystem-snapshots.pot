# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:3
# e2bc36ea305044d8977e71a6dd3fcf60
msgid "Backup and Restore with Filesystem Snapshots"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:7
# dae08be25154410c89e9f1455f7976a5
msgid "This document describes a procedure for creating backups of MongoDB systems using system-level tools, such as :term:`LVM` or storage appliance, as well as the corresponding restoration strategies."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:11
# e042ec8887c84df6bb40a04353c47c46
msgid "These filesystem snapshots, or \"block-level\" backup methods use system level tools to create copies of the device that holds MongoDB's data files. These methods complete quickly and work reliably, but require more system configuration outside of MongoDB."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:16
# e3064523fc184582a39de9db4356ce57
msgid ":doc:`/core/backups` and :doc:`/tutorial/backup-with-mongodump`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:22
# afbcd5ccca5b49c88f071ee92795b2ba
msgid "Snapshots Overview"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:24
# 4bb01f13f3154899be1e595f8d8b3a06
msgid "Snapshots work by creating pointers between the live data and a special snapshot volume. These pointers are theoretically equivalent to \"hard links.\" As the working data diverges from the snapshot, the snapshot process uses a copy-on-write strategy. As a result the snapshot only stores modified data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:30
# 2a601239f943452ebd363975a2686219
msgid "After making the snapshot, you mount the snapshot image on your file system and copy data from the snapshot. The resulting backup contains a full copy of all data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:34
# 6d09090afa714661a65ef7f1d37a3625
msgid "Snapshots have the following limitations:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:36
# 9f342236e26f42c98219d3d44a253c67
msgid "The database must be valid when the snapshot takes place. This means that all writes accepted by the database need to be fully written to disk: either to the :term:`journal` or to data files."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:41
# f4424e39623341e88f4396010091e169
msgid "If all writes are not on disk when the backup occurs, the backup will not reflect these changes. If writes are *in progress* when the backup occurs, the data files will reflect an inconsistent state. With :term:`journaling <journal>` all data-file states resulting from in-progress writes are recoverable; without journaling you must flush all pending writes to disk before running the backup operation and must ensure that no writes occur during the entire backup procedure."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:50
# ff02318d6fb2429aa068d770f25262de
msgid "If you do use journaling, the journal **must** reside on the same volume as the data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:53
# 9c0124cbdd2d473e8a665d9695b3638e
msgid "Snapshots create an image of an entire disk image. Unless you need to back up your entire system, consider isolating your MongoDB data files, journal (if applicable), and configuration on one logical disk that doesn't contain any other data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:58
# dd47bcdcacdd4aabadfeefca210e8c91
msgid "Alternately, store all MongoDB data files on a dedicated device so that you can make backups without duplicating extraneous data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:61
# 9956c991d5ff44529b4c69599c43dce6
msgid "Ensure that you copy data from snapshots and onto other systems to ensure that data is safe from site failures."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:64
# 9a0c3d49132343038b5a63a84c3ee05d
msgid "Although different snapshots methods provide different capability, the LVM method outlined below does not provide any capacity for capturing incremental backups."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:71
# 9ede052cd875469b9e146ca1f56cf511
msgid "Snapshots With Journaling"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:73
# 51a80820527644f6a3cdd976de1a82ff
msgid "If your :program:`mongod` instance has journaling enabled, then you can use any kind of file system or volume/block level snapshot tool to create backups."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:77
# d51829df98cb4975b6e2375a91e6d7dd
msgid "If you manage your own infrastructure on a Linux-based system, configure your system with :term:`LVM` to provide your disk packages and provide snapshot capability. You can also use LVM-based setups *within* a cloud/virtualized environment."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:84
# 9a57eadef7d446799f13b530f2e6eeeb
msgid "Running :term:`LVM` provides additional flexibility and enables the possibility of using snapshots to back up MongoDB."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:88
# fe9bbecca4664179a78df1cd3380f1c1
msgid "Snapshots with Amazon EBS in a RAID 10 Configuration"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:90
# b63f20446d0345b789861784799cc376
msgid "If your deployment depends on Amazon's Elastic Block Storage (EBS) with RAID configured within your instance, it is impossible to get a consistent state across all disks using the platform's snapshot tool. As an alternative, you can do one of the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:95
# 256dbd1bb6d5437d8399b1434bee666b
msgid "Flush all writes to disk and create a write lock to ensure consistent state during the backup process."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:98
# ebaab5ab137b4c5f80f1bc265ec812b3
msgid "If you choose this option see :ref:`backup-without-journaling`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:100
# ad3c0cbbda2f4c13816681ead4811558
msgid "Configure :term:`LVM` to run and hold your MongoDB data files on top of the RAID within your system."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:103
# a9c20c2586cb423cb531816d9d2e1673
msgid "If you choose this option, perform the LVM backup operation described in :ref:`lvm-backup-operation`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:109
# aa4771d9413a4cc98fbf3123d9bfc29f
msgid "Backup and Restore Using LVM on a Linux System"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:111
# 4973cec148494d5d826c29dfc1a95e3c
msgid "This section provides an overview of a simple backup process using :term:`LVM` on a Linux system. While the tools, commands, and paths may be (slightly) different on your system the following steps provide a high level overview of the backup operation."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:118
# 0b58e19e29814bd19e42d4a4266033db
msgid "Only use the following procedure as a guideline for a backup system and infrastructure. Production backup systems must consider a number of application specific requirements and factors unique to specific environments."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:126
# 2897806e3c604b4d9c0d793ebed71164
msgid "Create a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:128
# b6bcc1afd27142a89d2a305b436cbbba
msgid "To create a snapshot with :term:`LVM`, issue a command as root in the following format:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:135
# c1d685e999fe4136a0aa06819d20f0c7
msgid "This command creates an :term:`LVM` snapshot (with the ``--snapshot`` option) named ``mdb-snap01`` of the ``mongodb`` volume in the ``vg0`` volume group."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:139
# 174de2b35fe5422285c44b6a4d1e2bf9
msgid "This example creates a snapshot named ``mdb-snap01`` located at ``/dev/vg0/mdb-snap01``. The location and paths to your systems volume groups and devices may vary slightly depending on your operating system's :term:`LVM` configuration."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:144
# e386547198bd4a4e8e692570e14cde3a
msgid "The snapshot has a cap of at 100 megabytes, because of the parameter ``--size 100M``. This size does not reflect the total amount of the data on the disk, but rather the quantity of differences between the current state of ``/dev/vg0/mongodb`` and the creation of the snapshot (i.e. ``/dev/vg0/mdb-snap01``.)"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:152
# e03372f18f2c47f8beeea26fdfaeadc5
msgid "Ensure that you create snapshots with enough space to account for data growth, particularly for the period of time that it takes to copy data out of the system or to a temporary image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:156
# f9ed40a50f9f412b9d4001dc38c1b28d
msgid "If your snapshot runs out of space, the snapshot image becomes unusable. Discard this logical volume and create another."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:159
# 7dbd9c075214447faee0a715945355a6
msgid "The snapshot will exist when the command returns. You can restore directly from the snapshot at any time or by creating a new logical volume and restoring from this snapshot to the alternate image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:163
# 313b09808a0647709f02be7a087feee7
msgid "While snapshots are great for creating high quality backups very quickly, they are not ideal as a format for storing backup data. Snapshots typically depend and reside on the same storage infrastructure as the original disk images. Therefore, it's crucial that you archive these snapshots and store them elsewhere."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:170
# 18fc8f061c9c41cdb9a3d9e3e64b36b0
msgid "Archive a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:172
# 78f6a5a4ab40444393dca004bf60f58e
msgid "After creating a snapshot, mount the snapshot and copy the data to separate storage. Your system might try to compress the backup images as you move the offline. Alternatively, take a block level copy of the snapshot image, such as with the following procedure:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:182
# 9acf3cb14c9142b89899b7b155906a5b
msgid "The above command sequence does the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:184
# d1d4981924654f5d9b9cc6265d8999d7
msgid "Ensures that the ``/dev/vg0/mdb-snap01`` device is not mounted.  Never take a block level copy of a filesystem or filesystem snapshot that is mounted."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:188
# f9724a72b9d84d4fb2db8c54df3d75f1
msgid "Performs a block level copy of the entire snapshot image using the ``dd`` command and compresses the result in a gzipped file in the current working directory."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:194
# 3c2312a1684843fe9371777a632d3ff0
msgid "This command will create a large ``gz`` file in your current working directory. Make sure that you run this command in a file system that has enough free space."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:201
# 3f43b87f1ca54d3db5bcf0e482621ca8
msgid "Restore a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:203
# 8445c55858ef441e8a8cf35a976c711c
msgid "To restore a snapshot created with the above method, issue the following sequence of commands:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:212
# 3c950563ef7146b8a1a27dee1b5fab78
msgid "The above sequence does the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:214
# a27ee7e8b22b4b119cc50eea889801a4
msgid "Creates a new logical volume named ``mdb-new``, in the ``/dev/vg0`` volume group. The path to the new device will be ``/dev/vg0/mdb-new``."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:219
# e0eb900161cb4c4590eae601bd29c953
msgid "This volume will have a maximum size of 1 gigabyte. The original file system must have had a total size of 1 gigabyte or smaller, or else the restoration will fail."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:223
# b6e8e7776e2747a999a5cf711ed0bdeb
msgid "Change ``1G`` to your desired volume size."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:225
# ddcabf6111e844ad9eb90c9274e12e85
msgid "Uncompresses and unarchives the ``mdb-snap01.gz`` into the ``mdb-new`` disk image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:228
# f4841e27767043179d655cd3866e7626
msgid "Mounts the ``mdb-new`` disk image to the ``/srv/mongodb`` directory. Modify the mount point to correspond to your MongoDB data file location, or other location as needed."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:234
# d445461919574c2f995c7428bba0da1c
msgid "The restored snapshot will have a stale ``mongod.lock`` file. If you do not remove this file from the snapshot, and MongoDB may assume that the stale lock file indicates an unclean shutdown. If you're running with :setting:`storage.journal.enabled` enabled, and you *do not* use :method:`db.fsyncLock()`, you do not need to remove the ``mongod.lock`` file. If you use :method:`db.fsyncLock()` you will need to remove the lock."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:245
# 1b1c269daa4543b6b01ec5a9f5b3308c
msgid "Restore Directly from a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:247
# 29503b4443194a8ba23e5177387a6b7a
msgid "To restore a backup without writing to a compressed ``gz`` file, use the following sequence of commands:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:258
# bd39693c6e2045758d760453a6172ca9
msgid "Remote Backup Storage"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:260
# 96f3cedd175c4941b1e24e90ed13fae6
msgid "You can implement off-system backups using the :ref:`combined process <backup-restore-from-snapshot>` and SSH."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:263
# 9b6c350430f1484ca5846c5e81b38da2
msgid "This sequence is identical to procedures explained above, except that it archives and compresses the backup on a remote system using SSH."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:266
# ca5a9536bc53476b86297c69a2cb0170
msgid "Consider the following procedure:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:279
# 0e63c49594fe4c9fafcfa351e49797e4
msgid "Create Backups on Instances that do not have Journaling Enabled"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:281
# 2ecfba51e823457fbebb2fecb260c8bd
msgid "If your :program:`mongod` instance does not run with journaling enabled, or if your journal is on a separate volume, obtaining a functional backup of a consistent state is more complicated. As described in this section, you must flush all writes to disk and lock the database to prevent writes during the backup process. If you have a :term:`replica set` configuration, then for your backup use a :term:`secondary` which is not receiving reads (i.e. :term:`hidden member`)."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:291
# a57028ea3f26436f8078ef007096191f
msgid "To flush writes to disk and to \"lock\" the database (to prevent further writes), issue the :method:`db.fsyncLock()` method in the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:299
# a26d24536fb04f40b50d665ed9e8feb1
msgid "Perform the backup operation described in :ref:`lvm-backup-operation`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:301
# c234d2a3a5a144bfb12265bc75ed9c4d
msgid "To unlock the database after the snapshot has completed, use the following command in the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:310
# faf162c4cabd428fa4b03316147591f9
msgid "MongoDB 2.0 added :method:`db.fsyncLock()` and :method:`db.fsyncUnlock()` helpers to the :program:`mongo` shell.  Prior to this version, use the :dbcommand:`fsync` command with the ``lock`` option, as follows:"
msgstr ""

#: ../source/includes/warning-fsync-lock-mongodump.rst:3
# 4adb635f4c2341a38d2c60c9a1d5b1cc
msgid "When used in combination with :dbcommand:`fsync` or :method:`db.fsyncLock()`, :program:`mongod` may block some reads, including those from :program:`mongodump`, when queued write operation waits behind the :dbcommand:`fsync` lock."
msgstr ""

