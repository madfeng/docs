# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/store-javascript-function-on-server.txt:3
# fbed997bdab94b76a9ed15b7857e8b25
msgid "Store a JavaScript Function on the Server"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:9
# 583f4c73fd1444a1a5f0716217813f79
msgid "Do not store application logic in the database. There are performance limitations to running JavaScript inside of MongoDB. Application code also is typically most effective when it shares version control with the application itself."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:14
# ac94c99c48954c9c839f82afd04a60a8
msgid "There is a special system collection named ``system.js`` that can store JavaScript functions for reuse."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:17
# d0ecc71d207b4e62939a320a11b70324
msgid "To store a function, you can use the :method:`db.collection.save()`, as in the following example:"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:29
# 99b33e3f08e641a39709c239b017f506
msgid "The ``_id`` field holds the name of the function and is unique per database."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:32
# b0793b7b6b5246619b568839d5db6504
msgid "The ``value`` field holds the function definition"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:34
# bdf62cafeba9483a8802c83b4e4dadc7
msgid "Once you save a function in the ``system.js`` collection, you can use the function from any JavaScript context (e.g. :dbcommand:`eval` command or the :program:`mongo` shell method :method:`db.eval()`, :query:`$where` operator, :dbcommand:`mapReduce` or :program:`mongo` shell method :method:`db.collection.mapReduce()`)."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:40
# 9c4f8e56a9704d91aa852f8a6cd1e359
msgid "Consider the following example from the :program:`mongo` shell that first saves a function named ``echoFunction`` to the ``system.js`` collection and calls the function using :method:`db.eval()` method:"
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:55
# 9975b87711c34d9fb5a4e083426091fb
msgid "See `<http://github.com/mongodb/mongo/tree/master/jstests/core/storefunc.js>`_ for a full example."
msgstr ""

#: ../source/tutorial/store-javascript-function-on-server.txt:57
# aa4aec4dea22403c88489c7f0fa37cd3
msgid "In the :program:`mongo` shell, you can use :method:`db.loadServerScripts()` to load all the scripts saved in the ``system.js`` collection for the current database. Once loaded, you can invoke the functions directly in the shell, as in the following example:"
msgstr ""

