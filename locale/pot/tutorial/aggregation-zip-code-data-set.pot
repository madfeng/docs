# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# f09cb96f90244ed688c2c06c88675a0c
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
# 82fb47b3c31b4902ad02608493f66681
msgid "The examples in this document use the ``zipcode`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# c197ec314b564ccba00a24ae5af5557b
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
# 3a9e2018cf9445dd88dc5f2bf317d467
msgid "Each document in the ``zipcode`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
# 445c1ea15faf4211a5c540b5308f11b5
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
# 87ec20e691c74270bd301bf8829372ac
msgid "The ``city`` field holds the city name. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# a5f27798e92c497f94c4723da96b7d51
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# 6197919073e34dcc924dd581b43f518b
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
# ff3f4a0ee7d242629e88c51670470a46
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
# f77c8bb3a075443da35a04b76b3bccf2
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell. :method:`aggregate() <db.collection.aggregate()>` provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:50
# dc96ebabbf404d89a0d92c4e86b8707b
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:52
# d02b9185909b469fac929e8ea9db837c
msgid "To return all states with a population greater than 10 million, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
# 271d71ff525a4810a35cfc1cf704092f
msgid "Aggregations operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` connects a number of :ref:`pipeline <aggregation-pipeline>` operators, which define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:69
#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
# b3b08a6a4ed949e6aad3988637775ab6
# c8765c1c4c8d415baa2ef7632e66f299
msgid "In this example, the pipeline passes all documents in the ``zipcodes`` collection through the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:72
# 154335720b104717b3495ed64228a2f5
msgid "the :pipeline:`$group` operator collects all documents and creates documents for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:75
# 0991bae1cdc148d58d753abe3e1318e9
msgid "These new per-state documents have one field in addition to the ``_id`` field: ``totalPop`` which is a generated field using the :group:`$sum` operation to calculate the total value of all ``pop`` fields in the source documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:80
# 8c7fdf23153e4483b74365ca9e87f96f
msgid "After the :pipeline:`$group` operation the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:90
# e270d3c99c994aefaa92901eecebdc7f
msgid "the :pipeline:`$match` operation filters these documents so that the only documents that remain are those where the value of ``totalPop`` is greater than or equal to 10 million."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:94
# 00e8d4e7dd7f4457ad8804ab4c41df7a
msgid "The :pipeline:`$match` operation does not alter the documents, which have the same format as the documents output by :pipeline:`$group`."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
# 09a5a2200dc64171901b503ad6d30522
msgid "The equivalent :term:`SQL` for this operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
# d196017410cc4e78964403d1bbea57d0
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:110
# f7ad2d45de1145c6a8732250e35507bf
msgid "To return the average populations for cities in each state, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:120
# dca0629a42054d69a058c699b6ee9575
msgid "Aggregations operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>`  connects a number of :ref:`pipeline <aggregation-pipeline>` operators that define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:130
# 88c10fc49b004492986af9daebd04b2c
msgid "the :pipeline:`$group` operator collects all documents and creates new documents for every combination of the ``city`` and ``state`` fields in the source document. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:136
# a10a29f933b840c3a4eaffdf71c748fa
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:149
# 86e2029ed8dc44b1bcce9de14820733c
msgid "the second :pipeline:`$group` operator collects documents by the ``state`` field and use the :group:`$avg` expression to compute a value for the ``avgCityPop`` field."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:153
# 6fce82455f6949328d7797881647346d
msgid "The final output of this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
# 00fc645adb6044388aad0ba955090aa4
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:172
# 96037acef68c47639f4d9c94cd2cb30f
msgid "To return the smallest and largest cities by population for each state, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:197
# daeb0953f22c44778edb4e62ed6ebf50
msgid "Aggregation operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` combines a number of :ref:`pipeline <aggregation-pipeline>` operators that define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:204
# 1e402941d88148358f5568bf473ea913
msgid "All documents from the ``zipcodes`` collection pass into the pipeline, which consists of the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:207
# 3d230f9903364b7fa5216339be585afa
msgid "the :pipeline:`$group` operator collects all documents and creates new documents for every combination of the ``city`` and ``state`` fields in the source documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:211
# 2ae29d70a09341d89f5cbc2e8cd2f90b
msgid "By specifying the value of ``_id`` as a sub-document that contains both fields, the operation preserves the ``state`` field for use later in the pipeline. The documents produced by this stage of the pipeline have a second field, ``pop``, which uses the :group:`$sum` operator to provide the total of the ``pop`` fields in the source document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:218
# 10b04206305f4ce9814dbfb16abb82b5
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:230
# 00af75b9632d4e4c9d76a9ad083800f7
msgid ":pipeline:`$sort` operator orders the documents in the pipeline based on the value of the ``pop`` field from largest to smallest. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:234
# 8fb32a22903343778af344626c58a99c
msgid "the second :pipeline:`$group` operator collects the documents in the pipeline by the ``state`` field, which is a field inside the nested ``_id`` document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:238
# dcfb6a6e22554c9e983a42319d4fdd7a
msgid "Within each per-state document this :pipeline:`$group` operator specifies four fields: Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestcity`` and ``biggestpop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestcity`` and ``smallestpop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
# 9fde89a055464001aee3542a449895ee
msgid "The documents, at this stage in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
# e1e3691e06dc43f5acf936309556d3e5
msgid "The final operation is :pipeline:`$project`, which renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` sub-documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
# 1b19f50a847941b99b6d72b501cd28c7
msgid "The output of this aggregation operation is:"
msgstr ""

