# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/manage-mongodb-processes.txt:3
# b01903471178482b8155f9fe5de060a2
msgid "Manage ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:7
# 4d913adf70874b69b66413b3e6195a95
msgid "MongoDB runs as a standard program. You can start MongoDB from a command line by issuing the :program:`mongod` command and specifying options. For a list of options, see :doc:`/reference/program/mongod`. MongoDB can also run as a Windows service. For details, see :ref:`tutorial-mongod-as-windows-service`. To install MongoDB, see :doc:`/installation`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:14
# 4e20fa046ff34238a383c8d1f5585ef0
msgid "The following examples assume the directory containing the :program:`mongod` process is in your system paths. The :program:`mongod` process is the primary database process that runs on an individual server. :program:`mongos` provides a coherent MongoDB interface equivalent to a :program:`mongod` from the perspective of a client. The :program:`mongo` binary provides the administrative shell."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:22
# 60841a2b377c43c1836480a86793751b
msgid "This document  page discusses the :program:`mongod` process; however, some portions of this document may be applicable to :program:`mongos` instances."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:26
# 636af9421a34489d8c396c6816861f79
msgid ":doc:`/administration/configuration`, :doc:`/reference/program/mongod`, :doc:`/reference/program/mongos`, and :doc:`/reference/configuration-options`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:31
# e311f1689d024783b9db244585597e10
msgid "Start ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:33
# 0d067de535be448e8dd99c8fbf3c800a
msgid "By default, MongoDB stores data in the ``/data/db`` directory. On Windows, MongoDB stores data in ``C:\\data\\db``. On all platforms, MongoDB listens for connections from clients on port ``27017``."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:37
# 4c0cf90c8bca490ebdece161db8cc023
msgid "To start MongoDB using all defaults, issue the following command at the system shell:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:45
# d29f5b43dbb7459a9a73e0d829bccde6
msgid "Specify a Data Directory"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:47
# 3a253d8b4f3747ea8d120f8498607dae
msgid "If you want :program:`mongod` to store data files at a path *other than* ``/data/db`` you can specify a :setting:`~storage.dbPath`. The :setting:`~storage.dbPath` must exist before you start :program:`mongod`. If it does not exist, create the directory and the permissions so that :program:`mongod` can read and write data to this path. For more information on permissions, see the :ref:`security operations documentation <security-operations>`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:55
# f3ca3411b10b47329b527da4e8158ccf
msgid "To specify a :setting:`~storage.dbPath` for :program:`mongod` to use as a data directory, use the :option:`--dbpath <mongod --dbpath>` option. The following invocation will start a :program:`mongod` instance and store data in the ``/srv/mongodb`` path"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:65
# ce77144c99e940e4abae76c8ddff606d
msgid "Specify a TCP Port"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:67
# 649cf4a934964af2b09a7b03ace7f88e
msgid "Only a single process can listen for connections on a network interface at a time. If you run multiple :program:`mongod` processes on a single machine, or have other processes that must use this port, you must assign each a different port to listen on for client connections."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:73
# ec9a3ae1c1934e53a83a97a7d360e28d
msgid "To specify a port to :program:`mongod`, use the :option:`--port <mongod --port>` option on the command line. The following command starts :program:`mongod` listening on port ``12345``:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:81
# 6d5e874582cb47e8b1afd07f3def30c4
msgid "Use the default port number when possible, to avoid confusion."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:84
# 82936afdbada440593a1b9eae3a94d4f
msgid "Start ``mongod`` as a Daemon"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:86
# 1c0f08af5de34f9d8baedd63b9563d97
msgid "To run a :program:`mongod` process as a daemon (i.e. :setting:`~processManagement.fork`), *and* write its output to a log file, use the :option:`--fork <mongod --fork>` and :option:`--logpath <mongod --logpath>` options. You must create the log directory; however, :program:`mongod` will create the log file if it does not exist."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:92
# 61ab555e375b4d0a880b691a1151a87a
msgid "The following command starts :program:`mongod` as a daemon and records log output to ``/var/log/mongodb.log``."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:100
# fcf172a1852d46a69e86a44105a17483
msgid "Additional Configuration Options"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:102
# 78d8ec46eb14490594f8e755450f9b42
msgid "For an overview of common configurations and common configuration deployments. configurations for common use cases, see :doc:`/administration/configuration`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:109
# a2cc7ece347346e490e51c369a816771
msgid "Stop ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:111
# d319a287f05f4d02a49cf5390a488385
msgid "In a clean shutdown a :program:`mongod` completes all pending operations, flushes all data to data files, and closes all data files. Other shutdowns are *unclean* and can compromise the validity the data files."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:122
# 4cb6ee09ae2946cfae09b58d225ebd16
msgid "To ensure a clean shutdown, always shutdown :program:`mongod` instances using one of the following methods:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:126
# cd3460a1b5704729afce015c16e2bd6f
msgid "Use ``shutdownServer()``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:128
# 1fbb946609e945e18029b1e1aeffc65e
msgid "Shut down the :program:`mongod` from the :program:`mongo` shell using the :method:`db.shutdownServer()` method as follows:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:136
# 7518960e11024b4291156df86a0d2e7d
msgid "Calling the same method from a control script accomplishes the same result."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:138
# d37d6c2e6b854077bfe979a2f5381b90
msgid "For systems with :setting:`~security.authorization` enabled, users may only issue :method:`db.shutdownServer()` when authenticated to the ``admin`` database or via the localhost interface on systems without authentication enabled."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:144
# cc1a0bf3acc54b0fb9f2de1448285965
msgid "Use ``--shutdown``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:146
# 6ffa6d0435e444f1911b4cde8543cc3a
msgid "From the Linux command line, shut down the :program:`mongod` using the :option:`--shutdown <mongod --shutdown>` option in the following command:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:154
# d5fc2a1d43ae474795f5f3a0b98d68e7
msgid "Use ``CTRL-C``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:156
# 6592bcdc72e64aebab5b07f2ee3ba63a
msgid "When running the :program:`mongod` instance in interactive mode (i.e. without :option:`--fork <mongod --fork>`), issue ``Control-C`` to perform a clean shutdown."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:161
# 1626354e89b149aa9fe7914ff9e16b64
msgid "Use ``kill``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:163
# 4af96ac2a4904af09b6b8a660733b07d
msgid "From the Linux command line, shut down a specific :program:`mongod` instance using the following command:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:172
# ead87e98cf3548c4a50853a9e0ce91ec
msgid "Never use ``kill -9`` (i.e. ``SIGKILL``) to terminate a mongod instance."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:175
# b19d592a431d478eae7ae95838d50586
msgid "Stop a Replica Set"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:178
# 7ae99ed1a79b4dfb8ed9d34f6e7216da
msgid "Procedure"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:180
# e14574fcc53943898cf30d8fd22bdf9c
msgid "If the :program:`mongod` is the :term:`primary` in a :term:`replica set`, the shutdown process for these :program:`mongod` instances has the following steps:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:184
# 712a5c647864404997960351cef3d188
msgid "Check how up-to-date the :term:`secondaries <secondary>` are."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:186
# 42abbdece8ff489b933206ce9418bd22
msgid "If no secondary is within 10 seconds of the primary, :program:`mongod` will return a message that it will not shut down. You can pass the :dbcommand:`shutdown` command a ``timeoutSecs`` argument to wait for a secondary to catch up."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:191
# 20751a3d6693474a9b0ade6e1c200c1f
msgid "If there is a secondary within 10 seconds of the primary, the primary will step down and wait for the secondary to catch up."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:194
# 3ac63828361f4f1fbf435f54e832c4e0
msgid "After 60 seconds or once the secondary has caught up, the primary will shut down."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:198
# 287a9cd084d64e84900bc2388fe5ee30
msgid "Force Replica Set Shutdown"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:200
# 3e185276fd89475db08b8dbf6b15565e
msgid "If there is no up-to-date secondary and you want the primary to shut down, issue the :dbcommand:`shutdown` command with the ``force`` argument, as in the following :program:`mongo` shell operation:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:208
# 738209a6a08c4fbe84c3ae77a471f75f
msgid "To keep checking the secondaries for a specified number of seconds if none are immediately up-to-date, issue :dbcommand:`shutdown` with the ``timeoutSecs`` argument. MongoDB will keep checking the secondaries for the specified number of seconds if none are immediately up-to-date. If any of the secondaries catch up within the allotted time, the primary will shut down. If no secondaries catch up, it will not shut down."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:215
# 637e8b7ccec845bdb019ba79cd22adfa
msgid "The following command issues :dbcommand:`shutdown` with ``timeoutSecs`` set to ``5``:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:222
# 2a25b859a4c243ecb83110d70d5edb3c
msgid "Alternately you can use the ``timeoutSecs`` argument with the :method:`db.shutdownServer()` method:"
msgstr ""

