# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/perform-two-phase-commits.txt:3
# 22c3e32257f8430f8dfafa05b0c93275
msgid "Perform Two Phase Commits"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:8
# b618563ad8aa4e02be20fbc28e366b33
msgid "Synopsis"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:10
# 673cafcefcac46b4ae9ea3a8004fb684
msgid "This document provides a pattern for doing multi-document updates or \"multi-document transactions\" using a two-phase commit approach for writing data to multiple documents. Additionally, you can extend this process to provide a :ref:`rollback-like <2-phase-commits-rollback>` functionality."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:17
# 30124c3faa4e44809ddbd8bc14644eb8
msgid "Background"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:19
# 5865598baa234f8087b78d66766c5e76
msgid "Operations on a single :term:`document` are always atomic with MongoDB databases; however, operations that involve multiple documents, which are often referred to as \"multi-document transactions\", are not atomic. Since documents can be fairly complex and contain multiple \"nested\" documents, single-document atomicity provides necessary support for many practical use cases."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:26
# a46b5e87fe794f338453e73829aa4c39
msgid "Despite the power of single-document atomic operations, there are cases that require multi-document transactions. When executing a transaction composed of sequential operations, certain issues arise, such as:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:30
# 5efb787247f54b95a6f6cb2fa5c6e0d0
msgid "Atomicity: if one operation fails, the previous operation within the transaction must \"rollback\" to the previous state (i.e. the \"nothing,\" in \"all or nothing\")."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:34
# 9540f344c21b4faa9af8416de38588a7
msgid "Consistency: if a major failure (i.e. network, hardware) interrupts the transaction, the database must be able to recover a consistent state."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:38
# 316ed11621064499b8a297521ed0fb7c
msgid "For situations that require multi-document transactions, you can implement two-phase commit in your application to provide support for these kinds of multi-document updates. Using two-phase commit ensures that data is consistent and, in case of an error, the state that preceded the transaction is :ref:`recoverable <2-phase-commits-rollback>`. During the procedure, however, documents can represent pending data and states."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:48
# 38be1b74233e4985bba3d0040f013ede
msgid "Because only single-document operations are atomic with MongoDB, two-phase commits can only offer transaction-*like* semantics. It is possible for applications to return intermediate data at intermediate points during the two-phase commit or rollback."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:54
# de6aca83548e445c82a4f1947bcdc53d
msgid "Pattern"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:57
# 8c5549dd97134705bd0424e90abf3a8f
msgid "Overview"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:59
# fd8f08e5bf0a40c0b553dd90c1598294
msgid "Consider a scenario where you want to transfer funds from account ``A`` to account ``B``. In a relational database system, you can subtract the funds from ``A`` and add the funds to ``B`` in a single multi-statement transaction. In MongoDB, you can emulate a two-phase commit to achieve a comparable result."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:65
# bda977ee83ec4e36a8590f5669838384
msgid "The examples in this tutorial use the following two collections:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:67
# 001fc74912ea4ce792dc7d12249d29b4
msgid "A collection named ``accounts`` to store account information."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:69
# 108dd79f699d479bb57623a158b284fb
msgid "A collection named ``transactions`` to store information on the fund transfer transactions."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:73
# 338df33807ee4251acd247b16641d1c5
msgid "Initialize Source and Destination Accounts"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:75
# 3fe0bfe8673a4421b6ea3073fc3745f8
msgid "Insert into the ``accounts`` collection a document for account ``A`` and a document for account ``B``."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:87
# 09555b2d4b8046938e0af9dc4193832d
msgid "The operation returns a :method:`BulkWriteResult()` object with the status of the operation. Upon successful insert, the :method:`BulkWriteResult()` has :data:`~BulkWriteResult.nInserted` set to ``2`` ."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:95
# 4f070652cb0a4f7ebd424001eda214e1
msgid "Initialize Transfer Record"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:97
# f89b38e9a0604a4b87b21e83fb23e44a
msgid "For each fund transfer to perform, insert into the ``transactions`` collection a document with the transfer information. The document contains the following fields:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:101
# dc79a197741e4bf494ce8063e9c6c376
msgid "``source`` and ``destination`` fields, which refer to the ``_id`` fields from the ``accounts`` collection,"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:104
# c7ffee96af744798a8d55b8cc660c2d8
msgid "``value`` field, which specifies the amount of transfer affecting the ``balance`` of the ``source`` and ``destination`` accounts,"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:107
# a224b74f0bf5433c89ea709eef6351ac
msgid "``state`` field, which reflects the current state of the transfer. The ``state`` field can have the value of ``initial``, ``pending``, ``applied``, ``done``, ``canceling``, and ``canceled``."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:111
# c759bb6664134b5b82f3967e178d00d1
msgid "``lastModified`` field, which reflects last modification date."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:113
# f74ea62aabde4dd08a0f4fc0ad122d3e
msgid "To initialize the transfer of ``100`` from account ``A`` to account ``B``, insert into the ``transactions`` collection a document with the transfer information, the transaction ``state`` of ``\"initial\"``, and the ``lastModified`` field set to the current date:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:124
# 410bfdc0f3d44d349fedc4ac4b9b61cb
msgid "The operation returns a :method:`WriteResult()` object with the status of the operation. Upon successful insert, the :method:`WriteResult()` object has :data:`~WriteResult.nInserted` set to ``1``."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:129
# e656c4a983694b91a17468dc55edd10a
msgid "Transfer Funds Between Accounts Using Two-Phase Commit"
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:8
# 171d8fb7019b4324bcc3cf39b3b050b2
msgid "Retrieve the transaction to start."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:11
# 28d5daa1dada49a984879b30407135f9
msgid "From the ``transactions`` collection, find a transaction in the ``initial`` state. Currently the ``transactions`` collection has only one document, namely the one added in the :ref:`initialize-transfer-record` step. If the collection contains additional documents, the query will return any transaction with an ``initial`` state unless you specify additional query conditions."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:25
# 24c0a6e995e141448044cbcf1a4e7e28
msgid "Type the variable ``t`` in the :program:`mongo` shell to print the contents of the variable. The operation should print a document similar to the following except the ``lastModified`` field should reflect date of your insert operation:"
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:47
# a0caa5d80dc84e21bf7f57b4bf81e092
msgid "Update transaction state to pending."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:50
# d5a0a11596e2414bb853404926cdd72c
msgid "Set the transaction ``state`` from ``initial`` to ``pending`` and use the :update:`$currentDate` operator to set the ``lastModified`` field to the current date."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:66
# 14477a274bc1423baa9059292039ac6c
msgid "The operation returns a :method:`WriteResult()` object with the status of the operation. Upon successful update, the :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` displays ``1``."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:71
# 9c53b6d661e24d84a6ef7bb2a4abfac0
msgid "In the update statement, the ``state: \"initial\"`` condition ensures that no other process has already updated this record. If :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` is ``0``, go back to the first step to get a different transaction and restart the procedure."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:89
# a6d6524e0c1d416b8ad9f3889836e7f9
msgid "Apply the transaction to both accounts."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:92
# 5e1ebcca00e64c35bccdca31b628b31a
msgid "Apply the transaction ``t`` to both accounts using the :method:`~db.collection.update()` method *if* the transaction has not been applied to the accounts. In the update condition, include the condition ``pendingTransactions: { $ne: t._id }`` in order to avoid re-applying the transaction if the step is run more than once."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:98
# 7bd49209df2f4b97b5b75f6eb4b1e855
msgid "To apply the transaction to the account, update both the ``balance`` field and the ``pendingTransactions`` field."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:102
# a2ab2db731244c84aa0c5b554c6dc7d4
msgid "Update the source account, subtracting from its ``balance`` the transaction ``value`` and adding to its ``pendingTransactions`` array the transaction ``_id``."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:115
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:133
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:168
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:202
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:218
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:252
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:25
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:129
# 9fd6f51a56d340cfa294d45a81ef906c
# a08c2317c1ca4735818bc0f69e39f903
# b4619147b6214653a2f5ca0f2bec4b61
# 95e8de564ee9429d8d41fec73edefae4
# af0eb60ccb2e4a1299961ee182078054
# 1a7b9465f85643609a8d31ae45a18791
# 30b9e436d4e147e5a01ead4a3a2ce1c8
# 3f468be1ca4f42dca95685b34fb35af6
msgid "Upon successful update, the method returns a :method:`WriteResult()` object with :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` set to ``1``."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:120
# 0cb9982bf38f494f8109994c30129d12
msgid "Update the destination account, adding to its ``balance`` the transaction ``value`` and adding to its ``pendingTransactions`` array the transaction ``_id`` ."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:149
# 26fb189d2602479f8b01860f2347a2eb
msgid "Update transaction state to applied."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:152
# 07bd4b760bc242499d38b51eeb7361ad
msgid "Use the following :method:`~db.collection.update()` operation to set the transaction's ``state`` to ``applied`` and update the ``lastModified`` field:"
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:184
# 8f009e98c0594df8ac827a26ef8845ae
msgid "Update both accounts' list of pending transactions."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:187
# 3e1b1b6f1d0a4d0f85a30a318b6367ed
msgid "Remove the applied transaction ``_id`` from the ``pendingTransactions`` array for both accounts."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:191
# 2030159287f94d87aedf19371ba182dd
msgid "Update the source account."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:207
# dd905bc0b8144275b54198e6b1c371cd
msgid "Update the destination account."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:234
# 353d9dccee314cc888174e0c758b0aab
msgid "Update transaction state to done."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:237
# 170a937c79f54efab336d83b753c0196
msgid "Complete the transaction by setting the ``state`` of the transaction to ``done`` and updating the ``lastModified`` field:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:136
# f0b1a66b7c23434ebac6619f2e99981c
msgid "Recovering from Failure Scenarios"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:138
# aedb7a852ada447ea3a38c57216b0fc2
msgid "The most important part of the transaction procedure is not the prototypical example above, but rather the possibility for recovering from the various failure scenarios when transactions do not complete successfully. This section presents an overview of possible failures and provides steps to recover from these kinds of events."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:145
# 24d8d2b17e8242958ede8b960a220954
msgid "Recovery Operations"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:147
# d05a48289b3c484f947370aa45874c2a
msgid "The two-phase commit pattern allows applications running the sequence to resume the transaction and arrive at a consistent state. Run the recovery operations at application startup, and possibly at regular intervals, to catch any unfinished transactions."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:152
# cd64f4558ff049188ffc4534dee726df
msgid "The time required to reach a consistent state depends on how long the application needs to recover each transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:155
# d240f9fcfa3b4c1fb70379b95ba0f917
msgid "The following recovery procedures uses the ``lastModified`` date as an indicator of whether the pending transaction requires recovery; specifically, if the pending or applied transaction has not been updated in the last 30 minutes, the procedures determine that these transactions require recovery. You can use different conditions to make this determination."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:163
#: ../source/tutorial/perform-two-phase-commits.txt:215
# 7e9922baf3f749bb9167be112f0f2306
# feb14d6bd8ef4691bf60984b22df1195
msgid "Transactions in Pending State"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:165
# 73c3938e34cf45ec8985b8fd148999ac
msgid "To recover from failures that occur after step \"`Update transaction state to pending.`_\" but before \"`Update transaction state to applied.`_\"step, retrieve from the ``transactions`` collection a pending transaction for recovery:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:177
# 84ca12ff2e40412ba23c6f04951cf2e2
msgid "And resume from step \"`Apply the transaction to both accounts.`_\""
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:180
#: ../source/tutorial/perform-two-phase-commits.txt:207
# d4f633ea3901481fb098a41676adcb2a
# e16de5fadf2d43cfb07490dfcf1ab6fe
msgid "Transactions in Applied State"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:182
# ed525403d5d246aba77539cfd51a7e90
msgid "To recover from failures that occur after step \"`Update transaction state to applied.`_\" but before \"`Update transaction state to done.`_\"step, retrieve from the ``transactions`` collection an applied transaction for recovery:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:194
# 64810c9ebf7a4adf953d770ee95b5bb4
msgid "And resume from \"`Update both accounts' list of pending transactions.`_\""
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:200
# 46281aeffca14323830c8c3c09bf17e6
msgid "Rollback Operations"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:202
# b3e8640847d040cf97c6fe211328fbfc
msgid "In some cases, you may need to \"roll back\" or undo a transaction; e.g., if the application needs to \"cancel\" the transaction or if one of the accounts does not exist or stops existing during the transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:209
# fd129aee49614f70a704ea8f9d17974e
msgid "After the \"`Update transaction state to applied.`_\" step, you should **not** roll back the transaction. Instead, complete that transaction and create a new transaction to reverse the transaction by switching the values in the source and the destination fields."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:217
# 5e471a8e77f44516b9e95300436a2944
msgid "After the \"`Update transaction state to pending.`_\" step, but before the \"`Update transaction state to applied.`_\" step, you can rollback the transaction using the following procedure:"
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:8
# 22f592655edd458b9c6ac9f4b8ddff32
msgid "Update transaction state to canceling."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:11
# 0c86280913ff42b3b5d84bde85e7739e
msgid "Update the transaction ``state`` from ``pending`` to ``canceling``."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:41
# c974061485cf40079fc41e10d6d3f6ec
msgid "Undo the transaction on both accounts."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:44
# e6364e35514a44a585483915dbf6d158
msgid "To undo the transaction on both accounts, reverse the transaction ``t`` if the transaction has been applied. In the update condition, include the condition ``pendingTransactions: t._id`` in order to update the account only if the pending transaction has been applied."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:50
# e732d978155b4b63b60f129df6cc225b
msgid "Update the destination account, subtracting from its ``balance`` the transaction ``value`` and removing the transaction ``_id`` from the ``pendingTransactions`` array."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:66
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:91
# 51955f3f665347c5a33993f4575fc0d0
# 521a18eec05a47288803d9a96977e838
msgid "Upon successful update, the method returns a :method:`WriteResult()` object with :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` set to ``1``. If the pending transaction has not been previously applied to this account, no document will match the update condition and :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` will be ``0``."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:75
# 30a97b868e7b47138483f91bd114d3fa
msgid "Update the source account, adding to its ``balance`` the transaction ``value`` and removing the transaction ``_id`` from the ``pendingTransactions`` array."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:111
# caa26053ac10408ca37b11f4dc7457a7
msgid "Update transaction state to canceled."
msgstr ""

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:114
# 1b32d5c1ccb14c3e896134cb0e78202c
msgid "To finish the rollback, update the transaction ``state`` from ``canceling`` to ``cancelled``."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:226
# de9d5b4d03084d2083cae9d1f8499b7b
msgid "Multiple Applications"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:228
# 607bb6747d834bff88dd94e368ae5ab7
msgid "Transactions exist, in part, so that multiple applications can create and run operations concurrently without causing data inconsistency or conflicts. In our procedure, to update or retrieve the transaction document, the update conditions include a condition on the ``state`` field to prevent reapplication of the transaction by multiple applications."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:235
# 67383262e01a48b9aeb425d548abd5c4
msgid "For example, applications ``App1`` and ``App2`` both grab the same transaction, which is in the ``initial`` state. ``App1`` applies the whole transaction before ``App2`` starts. When ``App2`` attempts to perform the \"`Update transaction state to pending.`_\" step, the update condition, which includes the ``state: \"initial\"`` criterion, will not match any document, and the :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` will be ``0``. This should signal to ``App2`` to go back to the first step to restart the procedure with a different transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:245
# 1487da7ba6be4e6ebb2b9058128ecb72
msgid "When multiple applications are running, it is crucial that only one application can handle a given transaction at any point in time. As such, in addition including the expected state of the transaction in the update condition, you can also create a marker in the transaction document itself to identify the application that is handling the transaction. Use :method:`~db.collection.findAndModify()` method to modify the transaction and get it back in one step:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:267
# 07903f9a462f445e85240f9beee6ebac
msgid "Amend the transaction operations to ensure that only applications that match the identifier in the ``application`` field apply the transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:270
# 1aa041974d7349589ba3efc8573f065e
msgid "If the application ``App1`` fails during transaction execution, you can use the :ref:`recovery procedures <2-phase-commits-recovery>`, but applications should ensure that they \"own\" the transaction before applying the transaction. For example to find and resume the pending job, use a query that resembles the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:292
# 838a4687732f4957b800d55c211cde4f
msgid "Using Two-Phase Commits in Production Applications"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:294
# 80d5759f3426461b907d8e4fc61c9e56
msgid "The example transaction above is intentionally simple. For example, it assumes that it is always possible to roll back operations to an account and that account balances can hold negative values."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:298
# 46fdcf97bd834a87b18420a2b533a132
msgid "Production implementations would likely be more complex. Typically, accounts need information about current balance, pending credits, and pending debits."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:302
# ab769e205b434d3d89cc0e3d330dcd87
msgid "For all transactions, ensure that you use a level of :term:`write concern` appropriate for your deployment."
msgstr ""

