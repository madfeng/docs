# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/generate-test-data.txt:3
# 60f89a47c6bc423a8eeab6a488bbfbb8
msgid "Generate Test Data"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:7
# d2fe9cacce5a4338a4c91039f46340d2
msgid "This tutorial describes how to quickly generate test data as you need to test basic MongoDB operations."
msgstr ""

#: ../source/tutorial/generate-test-data.txt:11
# 61e2b01e3eab47d495ed411a563ddba1
msgid "Insert Multiple Documents Using a For Loop"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:13
# ffe7723e89984d23a1036b825248c64f
msgid "You can add documents to a new or existing collection by using a JavaScript ``for`` loop run from the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/generate-test-data.txt:16
# a378e2f061944648a384e09ed231ce7c
msgid "From the :program:`mongo` shell, insert new documents into the ``testData`` collection using the following ``for`` loop. If the ``testData`` collection does not exist, MongoDB creates the collection implicitly."
msgstr ""

#: ../source/tutorial/generate-test-data.txt:25
# 71d5fa28503442ac97c4f4123e986125
msgid "Use find() to query the collection:"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:31
# 3d8827135a8a412693a3cca89777350a
msgid "The :program:`mongo` shell displays the first 20 documents in the collection. Your :doc:`ObjectId </reference/object-id>` values will be different:"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:60
# 5ac4b168837642efb513972bb6e4aa44
msgid "The :method:`~db.collection.find()` returns a cursor. To iterate the cursor and return more documents use the ``it`` operation in the :program:`mongo` shell. The :program:`mongo` shell will exhaust the cursor, and return the following documents:"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:74
# 41a9543d0228451b910a41dcdfbd153c
msgid "Insert Multiple Documents with a ``mongo`` Shell Function"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:76
# 4f398f40b9af4d59a6e69380c1a1e94a
msgid "You can create a JavaScript function in your shell session to generate the above data. The ``insertData()`` JavaScript function, shown here, creates new data for use in testing or training by either creating a new collection or appending data to an existing collection:"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:95
# d0fe513e55ae420ca3ab5f8512ff217d
msgid "The ``insertData()`` function takes three parameters: a database, a new or existing collection, and the number of documents to create. The function creates documents with an ``x`` field that is set to an incremented integer, as in the following example documents:"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:106
# ae38b3dfda58449d93e752455820a911
msgid "Store the function in your :ref:`.mongorc.js <mongo-mongorc-file>` file. The :program:`mongo` shell loads the function for you every time you start a session."
msgstr ""

#: ../source/tutorial/generate-test-data.txt:0
# 77be4e3fb6ce4b0196bcff51adabf8d8
msgid "Example"
msgstr ""

#: ../source/tutorial/generate-test-data.txt:117
# 89b47c8c08b2479490dc08b34d005f3d
msgid "This operation inserts 400 documents into the ``testData`` collection in the ``test`` database. If the collection and database do not exist, MongoDB creates them implicitly before inserting documents."
msgstr ""

