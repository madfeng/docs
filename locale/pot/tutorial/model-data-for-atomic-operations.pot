# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-data-for-atomic-operations.txt:5
# df6078a2a67a48e8a9852aab9967e2c6
msgid "Model Data for Atomic Operations"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:10
# de2b3ac3bc084f9f82e1de009464d715
msgid "Pattern"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:12
# 8ddf730119a34351975368117dfc4221
msgid "In MongoDB, write operations, e.g. :method:`db.collection.update()`, :method:`db.collection.findAndModify()`, :method:`db.collection.remove()`, are atomic on the level of a single document. For fields that must be updated together, embedding the fields within the same document ensures that the fields can be updated atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:19
# 93340106038043adb413d396824a2b44
msgid "For example, consider a situation where you need to maintain information on books, including the number of copies available for checkout as well as the current checkout information."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:23
# c3751cb55a1c42c2b5573298f23dd68f
msgid "The available copies of the book and the checkout information should be in sync. As such, embedding the ``available`` field and the ``checkout`` field within the same document ensures that you can update the two fields atomically."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:43
# a648269d1647425bbab4edc6d86cca6f
msgid "Then to update with new checkout information, you can use the :method:`db.collection.update()` method to atomically update both the ``available`` field and the ``checkout`` field:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:57
# da3853befea54eb9877f24bc0e139930
msgid "The operation returns a :method:`WriteResult()` object that contains information on the status of the operation:"
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:64
# 8eeb576591144946aeb30af2ef0f1a2f
msgid "The :data:`~WriteResult.nMatched` field shows that ``1`` document matched the update condition, and :data:`~WriteResult.nModified` shows that the operation updated ``1`` document."
msgstr ""

#: ../source/tutorial/model-data-for-atomic-operations.txt:68
# c239be2cf9364a62bfeaaeed66215fa3
msgid "If no document matched the update condition, then :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` would be ``0`` and would indicate that you could not check out the book."
msgstr ""

