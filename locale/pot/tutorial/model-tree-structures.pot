# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
# bece7753ceff4c3faddde885edda2c38
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
# 93d96dbcd329426f89d3384dc9800276
msgid "To model hierarchical or nested data relationships, you can use references to implement tree-like structures. The following *Tree* pattern examples model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
# 1f8228bb6b3e48fbad0a3be2a942b76c
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
# dbd4c86f38024be4b8ac30d6f97ed66f
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
# 6e2780fb77a545408f88d43be79d1630
msgid "The *Child References* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
# f9a2df1a1a064a4db904c752bec24727
# 1c8fef0f9f82443398bc518cc9c24dc4
# 7801f431b8b5416f96a729f9d6c8df4e
# af280c9ca3e842d3b5631378d98cf7bb
# 4873a3249d85444f86bb559fca0a52ec
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
# a5dc6457259d4dcebe31286f6c56f2f3
msgid "The following example models the tree using *Child References*, storing the reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
# b3adce6464d14a4ca46a990aca4a515b
msgid "The query to retrieve the immediate children of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
# 1c1b1d84cc604f78a8ec7aa240ec16de
msgid "You can create an index on the field ``children`` to enable fast search by the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
# 640f0da3e476468194acfed62348196f
msgid "You can query for a node in the ``children`` field to find its parent node as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
# 2aca6a1a339b4f4bbb7711e95367e5ba
msgid "The *Child References* pattern provides a suitable solution to tree storage as long as no operations on subtrees are necessary. This pattern may also provide a suitable solution for storing graphs where a node may have multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
# 647ce2cfbaa84fd482c6cc29ccc23b2b
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
# eb879881f7da45dc8403d9280d8a008f
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
# d7676d385ce34a738d27e65992235f70
msgid "The *Parent References* pattern stores each tree node in a document; in addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
# 27965678bce34597afc767a970d3cc9f
msgid "The following example models the tree using *Parent References*, storing the reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
# f85ac2656c5a47b9af8399526b506448
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
# a231f2953ebc4604ab38fd8222a7c4c1
msgid "You can create an index on the field ``parent`` to enable fast search by the parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
# d55f7eeae0914147a0d0ba242e5095a4
msgid "You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
# 23ba40d1fe7e45b192607e480038b04b
msgid "The *Parent Links* pattern provides a simple solution to tree storage but requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
# 4fac51b71868476185800127e6b049d2
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
# f5631630598c40eaaf72c219f9767f9e
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
# 7077184aa58544adb979a6b25ba44dd3
msgid "The *Array of Ancestors* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
# 01ecbecbda4d4c5aaf7eb16c4d3d59fb
msgid "The following example models the tree using *Array of Ancestors*. In addition to the ``ancestors`` field, these documents also store the reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
# 4aebc1ac7c1748af8cf73a93eac9bffd
msgid "The query to retrieve the ancestors or path of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
# 04220e6eb1314cfd99e51ec150627e3f
msgid "You can create an index on the field ``ancestors`` to enable fast search by the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
# 50a68743519c4bb5b088846ceb414a19
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
# 063c0d191258420893d65bfe19fb633d
msgid "The *Array of Ancestors* pattern provides a fast and efficient solution to find the descendants and the ancestors of a node by creating an index on the elements of the ancestors field. This makes *Array of Ancestors* a good choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
# 1ebaa0783266477f93bf1d04d1591e72
msgid "The *Array of Ancestors* pattern is slightly slower than the :doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
# f7abd72b929a4417b317313637617e58
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
# 68a54c132e07476b94ac449e4f8c11ee
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
# 00cb13941777406d9f6a2f5718ae1bc0
msgid "The *Materialized Paths* pattern stores each tree node in a document; in addition to the tree node, document stores as a string the id(s) of the node's ancestors or path. Although the *Materialized Paths* pattern requires additional steps of working with strings and regular expressions, the pattern also provides more flexibility in working with the path, such as finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
# 087ed3297c4e47868527fe371e735fbe
msgid "The following example models the tree using *Materialized Paths*, storing the path in the field ``path``; the path string uses the comma ``,`` as a delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
# ea6d3c129f9743d0a38887130c405b00
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
# 3229d3a905d545f894a5f2c43fa17692
msgid "You can use regular expressions on the ``path`` field to find the descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
# b0c709d33a68479d87691a4a385345c5
msgid "You can also retrieve the descendants of ``Books`` where the ``Books`` is also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
# ffb664fefe9c4dc9acbb31620bfd88e6
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
# a1c1f9314eff43daa8bcc57deb3183d1
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
# ad1670ab486245eca6c820c70fb0341a
msgid "For queries of the ``Books`` sub-tree (e.g. ``/^,Books,/``) an index on the ``path`` field improves the query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
# 3af89c7b275b4ee1802b5ee3b142215a
msgid "For queries of the ``Programming`` sub-tree (e.g. ``/,Programming,/``), or similar queries of sub-tress, where the node might be in the middle of the indexed string, the query must inspect the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
# 76041535830c4c01ab464c51d63cd7d2
msgid "For these queries an index *may* provide some performance improvement *if* the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
# 9d9e8bd79795438e89f135debda103c2
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
# 03c4e92ef6c54722a9ba146d2085c21f
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
# 69b1f5c9dbe246709e1c1fdffd0a5da9
msgid "The *Nested Sets* pattern identifies each node in the tree as stops in a round-trip traversal of the tree. The application visits each node in the tree twice; first during the initial trip, and second during the return trip. The *Nested Sets* pattern stores each tree node in a document; in addition to the tree node, document stores the id of node's parent, the node's initial stop in the ``left`` field, and its return stop in the ``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
# f378fd49255d4749a195b9850d37539c
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
# 8b69111a178140d8b2c866bc831d2c2b
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
# 850716129f97442d952d76c533aa47c2
msgid "The *Nested Sets* pattern provides a fast and efficient solution for finding subtrees but is inefficient for modifying the tree structure. As such, this pattern is best for static trees that do not change."
msgstr ""

