# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/aggregation/sort.txt:3
# 270837638135471cbf2f12e4f4b6860c
msgid "$sort (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:9
# c8cfe866c4774ca7924a90ba0d631a68
msgid "Sorts all input documents and returns them to the pipeline in sorted order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:12
# 787db90f1c784d85982a0c8b2311018c
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:18
# abe457d635bc4f249d03a5e8735db964
msgid ":pipeline:`$sort` takes a document that specifies the field(s) to sort by and the respective sort order. ``<sort order>`` can have one of the following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:22
# aa9b5158421349bf8a572f862030c6b5
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:24
# c8058a87ab9646d9845a2b009e7df46a
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:26
# 8f231cdfed0642b5ade3b39542fc242e
msgid "``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` metadata in descending order. See :ref:`sort-pipeline-metadata` for an example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:31
# 38252ce976714b2a8d26bd0dfff852f1
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:36
# 12fe4826e259490d9698a067fd0bf575
msgid "Ascending/Descending Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:38
# 01b200d8556b437a925d22b44c374621
msgid "To  ascending order for a field or fields to sort by and a value of ``1`` or ``-1`` to specify an ascending or descending sort respectively, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:50
# 88f153d0277f4721ab8c145fe128ea70
msgid "This operation sorts the documents in the ``users`` collection, in descending order according by the ``age`` field and then in ascending order according to the value in the ``posts`` field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# 270307f050914a8493a40e1fa6e080af
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# c8b4a7b60a6c477c846caaf8acf872ed
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# 0b6b6595ce6d4a55b185f56b1c892bb3
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# eb28b849acf44383ba7715891e38d640
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# 7b14e76999d1483492e7eb10449b5303
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 3915569c0e364a08b10c535a25a60d3f
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# a10db9315c594240aa40fae0c923250a
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# 03eb8343774a457b9156a9877dc07f64
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 28b72e6e6aba4d7caaf45e1c2d3bd0e6
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# d8fbeb1e90d04649a9fc14e73928038b
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 4b5cdd46bfea46019206aea5b33c5434
msgid "Date, Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# ec417db5d0574a36b6d93850640fe7cf
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# 752e7973499a44a68387da98eae35aab
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:17
# ed3be2374fc8433cb56049f43aa80303
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:20
# 4a3ab79d3bcc4b6489c7339be5d84513
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:24
# 7a67a10e0ee048fc90fb080acb9fea0f
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:32
# baa89a0e7e8745b7aa2dfc3c8633a0c2
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:34
# 907c294d14b047f7968b33f5487477b6
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:36
# 1166a5604bca4f068e1c25952597225c
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:38
# fb075f237a3047e1933ead1d97386268
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:59
# 9dde757f0e624c7b93c6ccca652c3bb8
msgid "Metadata Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:61
# 789da8ddcefb4c468c7c7d4599892a75
msgid "Specify in the ``{ <sort-key> }`` document, a new field name for the computed metadata and specify the :expression:`$meta` expression as its value, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:74
# 9986eb3354ad42479319b36e648a7c30
msgid "This operation uses the :query:`$text` operator to match the documents, and then sorts first by the ``\"textScore\"`` metadata and then by descending order of the ``posts`` field. The specified metadata determines the sort order. For example, the ``\"textScore\"`` metadata sorts in descending order. See :expression:`$meta` for more information on metadata."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:84
# 6995db54afd140699163404824381eb1
msgid "``$sort`` Operator and Memory"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:89
# 8c7b07b7ebe848d484a09c2ed17a9e52
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
# 895615c9f11e4d8e87ce905c1406cd5c
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory. This optimization still applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:8
# b25429366c0940048a08cb05dee36985
msgid "Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in memory, and then limit the results to n results."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# c313a292d17d4d73a0fea7c375f7bb34
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:98
# 6cfd31aa291547fa8914c509c493ff7a
msgid "``$sort`` and Memory Restrictions"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:100
# e39dedf2536349b5a62f7e94970e3210
msgid "The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, :pipeline:`$sort` will produce an error. To allow for the handling of large datasets, set the ``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` operations to write to temporary files. See the ``allowDiskUse`` option in :method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` command for details."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:108
# ce65642025ab4d19a5fcd3ff3a1a91e4
msgid "The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to 100 megabytes of RAM."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:113
# 748e5901830641e9b9163633e56796d7
msgid "``$sort`` Operator and Performance"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:115
# d8f412f6d20f4844a19bd5bd90c1a118
msgid ":pipeline:`$sort` operator can take advantage of an index when placed at the **beginning** of the pipeline or placed **before** the following aggregation operators: :pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group`."
msgstr ""

