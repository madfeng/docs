# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/journaling.txt:5
# 9a82b51207d44990b1745c678cbaee71
msgid "Journaling Mechanics"
msgstr ""

#: ../source/core/journaling.txt:9
# 2a2df331ef1e4567993f745efd0012a6
msgid "When running with journaling, MongoDB stores and applies :doc:`write operations </core/write-operations>` in memory and in the on-disk journal before the changes are present in the data files on disk. This document discusses the implementation and mechanics of journaling in MongoDB systems.  See :doc:`/tutorial/manage-journaling` for information on configuring, tuning, and managing journaling."
msgstr ""

#: ../source/core/journaling.txt:19
# ebd5f5f8e88642d1bebe879e1e706af9
msgid "Journal Files"
msgstr ""

#: ../source/core/journaling.txt:21
# 0e1c28db260445aba1de8b52cdcc4e16
msgid "With journaling enabled, MongoDB creates a journal subdirectory within the directory defined by :setting:`~storage.dbPath`, which is :file:`/data/db` by default. The journal directory holds journal files, which contain write-ahead redo logs. The directory also holds a last-sequence-number file. A clean shutdown removes all the files in the journal directory. A dirty shutdown (crash) leaves files in the journal directory; these are used to automatically recover the database to a consistent state when the mongod process is restarted."
msgstr ""

#: ../source/core/journaling.txt:30
# e7b80ab10d2443cab08ba914826abac6
msgid "Journal files are append-only files and have file names prefixed with ``j._``. When a journal file holds 1 gigabyte of data, MongoDB creates a new journal file. Once MongoDB applies all the write operations in a particular journal file to the database data files, it deletes the file, as it is no longer needed for recovery purposes. Unless you write *many* bytes of data per second, the journal directory should contain only two or three journal files."
msgstr ""

#: ../source/core/journaling.txt:38
# bca0cd81f77a4221a7abc7674d9b190c
msgid "You can use the :setting:`storage.smallFiles` run time option when starting :program:`mongod` to limit the size of each journal file to 128 megabytes, if you prefer."
msgstr ""

#: ../source/core/journaling.txt:42
# 6e6a22967cf241a88a023169362b213f
msgid "To speed the frequent sequential writes that occur to the current journal file, you can ensure that the journal directory is on a different filesystem from the database data files."
msgstr ""

#: ../source/core/journaling.txt:48
# 8232afc6d8a74bf6a80805eb55483ca0
msgid "If you place the journal on a different filesystem from your data files you *cannot* use a filesystem snapshot alone to capture valid backups of a :setting:`~storage.dbPath` directory. In this case, use :method:`~db.fsyncLock()` to ensure that database files are consistent before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is complete."
msgstr ""

#: ../source/core/journaling.txt:57
# ba214e80e4bb4b61963d3de7df00ee97
msgid "Depending on your filesystem, you might experience a preallocation lag the first time you start a :program:`mongod` instance with journaling enabled."
msgstr ""

#: ../source/core/journaling.txt:61
# db466f73eed94cc6a0d422cce938e9e9
msgid "MongoDB may preallocate journal files if the :program:`mongod` process determines that it is more efficient to preallocate journal files than create new journal files as needed. The amount of time required to pre-allocate lag might last several minutes, during which you will not be able to connect to the database. This is a one-time preallocation and does not occur with future invocations."
msgstr ""

#: ../source/core/journaling.txt:68
# 987b520cc2884ef7bc1e8487da489a86
msgid "To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""

#: ../source/core/journaling.txt:73
# 2e29de59b8cb4b3988a12253ef361fd4
msgid "Storage Views used in Journaling"
msgstr ""

#: ../source/core/journaling.txt:75
# 041502a5cfb54be4821802023c3df090
msgid "Journaling adds three internal storage views to MongoDB."
msgstr ""

#: ../source/core/journaling.txt:77
# 2fefe2019c6540f78852e109f6622885
msgid "The ``shared view`` stores modified data for upload to the MongoDB data files. The ``shared view`` is the only view with direct access to the MongoDB data files. When running with journaling, :program:`mongod` asks the operating system to map your existing on-disk data files to the ``shared view`` virtual memory view. The operating system maps the files but does not load them. MongoDB later loads data files into the ``shared view`` as needed."
msgstr ""

#: ../source/core/journaling.txt:85
# e4ba8e1bc67d42b6ae831640cafafc13
msgid "The ``private view`` stores data for use with :doc:`read operations </core/read-operations>`.  The ``private view`` is the first place MongoDB applies new :doc:`write operations </core/write-operations>`. Upon a journal commit, MongoDB copies the changes made in the ``private view`` to the ``shared view``, where they are then available for uploading to the database data files."
msgstr ""

#: ../source/core/journaling.txt:91
# 9bb2eb17039b409899c4af4692da26d3
msgid "The journal is an on-disk view that stores new write operations after MongoDB applies the operation to the ``private view`` but before applying them to the data files. The journal provides durability. If the :program:`mongod` instance were to crash without having applied the writes to the data files, the journal could replay the writes to the ``shared view`` for eventual upload to the data files."
msgstr ""

#: ../source/core/journaling.txt:101
# 2c10a06aa0a749eb83b671c4b79de9da
msgid "How Journaling Records Write Operations"
msgstr ""

#: ../source/core/journaling.txt:103
# c2c8cb65021f487cae206cd18bf2a3a2
msgid "MongoDB copies the write operations to the journal in batches called group commits. These \"group commits\" help minimize the performance impact of journaling, since a group commit must block all writers during the commit.  See :setting:`~storage.journal.commitIntervalMs` for information on the default commit interval."
msgstr ""

#: ../source/core/journaling.txt:109
# bcc046ba764e4218a4ac58ebe827bb2b
msgid "Journaling stores raw operations that allow MongoDB to reconstruct the following:"
msgstr ""

#: ../source/core/journaling.txt:112
# 3a6f4630ad244a6ea4218acdd0224f76
msgid "document insertion/updates"
msgstr ""

#: ../source/core/journaling.txt:113
# 66c2d9924bed41d5b8856e106f8818e1
msgid "index modifications"
msgstr ""

#: ../source/core/journaling.txt:114
# 858036a61ae44d83a65f830cd81da872
msgid "metadata changes to the namespace files"
msgstr ""

#: ../source/core/journaling.txt:115
# 636035f9b526442289afe399ba0b204f
msgid "creation and dropping of databases and their associated data files"
msgstr ""

#: ../source/core/journaling.txt:117
# 2705285d5305499090c751f07ee282e8
msgid "As :doc:`write operations </core/write-operations>` occur, MongoDB writes the data to the ``private view`` in RAM and then copies the write operations in batches to the journal. The journal stores the operations on disk to ensure durability.  Each journal entry describes the bytes the write operation changed in the data files."
msgstr ""

#: ../source/core/journaling.txt:123
# 9ea55a62dada4423b4f845954a519e2f
msgid "MongoDB next applies the journal's write operations to the ``shared view``. At this point, the ``shared view`` becomes inconsistent with the data files."
msgstr ""

#: ../source/core/journaling.txt:127
# b8f26ef3cb534d80a243bd5d5e4cc670
msgid "At default intervals of 60 seconds, MongoDB asks the operating system to flush the ``shared view`` to disk. This brings the data files up-to-date with the latest write operations.  The operating system may choose to flush the ``shared view`` to disk at a higher frequency than 60 seconds, particularly if the system is low on free memory."
msgstr ""

#: ../source/core/journaling.txt:133
# 0553b0e5a19b43618c22235fb9cd4afe
msgid "When MongoDB flushes write operations to the data files, MongoDB notes which journal writes have been flushed.  Once a journal file contains only flushed writes, it is no longer needed for recovery, and MongoDB either deletes it or recycles it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:137
# db7a999ad668440fa21268e31eaf680a
msgid "As part of journaling, MongoDB routinely asks the operating system to remap the ``shared view`` to the ``private view``, in order to save physical RAM. Upon a new remapping, the operating system knows that physical memory pages can be shared between the ``shared view`` and the ``private view`` mappings."
msgstr ""

#: ../source/core/journaling.txt:144
# f0812b83693d433baf991a1682af514e
msgid "The interaction between the ``shared view`` and the on-disk data files is similar to how MongoDB works *without* journaling, which is that MongoDB asks the operating system to flush in-memory changes back to the data files every 60 seconds."
msgstr ""

