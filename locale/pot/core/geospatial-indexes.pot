# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/geospatial-indexes.txt:3
# e6aa410850114802b8d22a6bc11f8971
msgid "``2d`` Index Internals"
msgstr ""

#: ../source/core/geospatial-indexes.txt:7
# 13aae1120ff547358e058d6b703e9b46
msgid "This document provides a more in-depth explanation of the internals of MongoDB's ``2d`` geospatial indexes. This material is not necessary for normal operations or application development but may be useful for troubleshooting and for further understanding."
msgstr ""

#: ../source/core/geospatial-indexes.txt:15
# 9a33f19ca89b41eb806bfc70adf38feb
msgid "Calculation of Geohash Values for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:17
# 9df73318142a45fd9ae191cfc1a99e14
msgid "When you create a geospatial index on :term:`legacy coordinate pairs <legacy coordinate pairs>`, MongoDB computes :term:`geohash` values for the coordinate pairs within the specified :ref:`location range <geospatial-indexes-range>` and then indexes the geohash values."
msgstr ""

#: ../source/core/geospatial-indexes.txt:22
# 9f1c75f2463448fda40cf8dbb385f88b
msgid "To calculate a geohash value, recursively divide a two-dimensional map into quadrants. Then assign each quadrant a two-bit value. For example, a two-bit representation of four quadrants would be:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:32
# 92d4abd53c2747a480c069b7446b3366
msgid "These two-bit values (``00``, ``01``, ``10``, and ``11``) represent each of the quadrants and all points within each quadrant. For a geohash with two bits of resolution, all points in the bottom left quadrant would have a geohash of ``00``. The top left quadrant would have the geohash of ``01``. The bottom right and top right would have a geohash of ``10`` and ``11``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:39
# 7eccd61229234342b6717fee78783f5c
msgid "To provide additional precision, continue dividing each quadrant into sub-quadrants. Each sub-quadrant would have the geohash value of the containing quadrant concatenated with the value of the sub-quadrant. The geohash for the upper-right quadrant is ``11``, and the geohash for the sub-quadrants would be (clockwise from the top left): ``1101``, ``1111``, ``1110``, and ``1100``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:56
# 65f29f2a573e441ca0ea87cd68ac5397
msgid "Multi-location Documents for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:58
# a8f63e1570434f639048003e67f4d5d5
msgid "Support for multiple locations in a document."
msgstr ""

#: ../source/core/geospatial-indexes.txt:61
# 7ff7fdfc220c48edb824d803fa6a89fe
msgid "While ``2d`` geospatial indexes do not support more than one set of coordinates in a document, you can use a :ref:`multi-key index <index-type-multi-key>` to index multiple coordinate pairs in a single document. In the simplest example you may have a field (e.g. ``locs``) that holds an array of coordinates, as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:76
# df2d7808b2fa4fc9bfdd78005e8b0cee
msgid "The values of the array may be either arrays, as in ``[ 55.5, 42.3 ]``, or embedded documents, as in ``{ lng : 55.5 , lat : 42.3 }``."
msgstr ""

#: ../source/core/geospatial-indexes.txt:79
# 33b56432fc594359bb7e45b6b2aebb1b
msgid "You could then create a geospatial index on the ``locs`` field, as in the following:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:86
# 8c939cc940c34916892143aab752fb1f
msgid "You may also model the location data as a field inside of a sub-document. In this case, the document would contain a field (e.g. ``addresses``) that holds an array of documents where each document has a field (e.g. ``loc:``) that holds location coordinates. For example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:107
# c18b904c3c2a4febb60004bbff04f6b0
msgid "You could then create the geospatial index on the ``addresses.loc`` field as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:114
# 3efeb1809743496ca9fd4a0e823c4b6d
msgid "To include the location field with the distance field in multi-location document queries, specify ``includeLocs: true`` in the :dbcommand:`geoNear` command."
msgstr ""

