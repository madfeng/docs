# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/2d.txt:3
# ed9044156dcd467e8798fa43623162e7
msgid "``2d`` Indexes"
msgstr ""

#: ../source/core/2d.txt:7
# b588035fea99486ba5f0b21255be8afb
msgid "Use a ``2d`` index for data stored as points on a two-dimensional plane. The ``2d`` index is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier."
msgstr ""

#: ../source/core/2d.txt:11
# 17a74289eea84329a3540f8dbf888192
msgid "Use a ``2d`` index if:"
msgstr ""

#: ../source/core/2d.txt:13
# c975774163334a7fa18a5c597bc284ad
msgid "your database has legacy location data from MongoDB 2.2 or earlier, *and*"
msgstr ""

#: ../source/core/2d.txt:15
# 83fc487902714f699b8eea1c89167cc4
msgid "you do not intend to store any location data as :term:`GeoJSON` objects."
msgstr ""

#: ../source/core/2d.txt:17
# aa34f95673854b43891e2eaa8e30426a
msgid "See the :doc:`/reference/operator/query-geospatial` for the query operators that support geospatial queries."
msgstr ""

#: ../source/core/2d.txt:21
# 16dabde15ce34b7fbeae2461695cc315
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# 089b879f8683418b8e0e3e1027c95d2f
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# 1d388769de7c455193c4a11344d1ab43
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# 4233c3e9ce4f44469163c11f33ff6885
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2d.txt:27
# 7418b7db5476403f9b280d3a1dadca5f
msgid "Do not use a ``2d`` index if your location data includes GeoJSON objects. To index on both legacy coordinate pairs *and* GeoJSON objects, use a :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/core/2d.txt:31
# e71ab6ddb52b48a4be945e55fd2539af
msgid "You cannot use a ``2d`` index as a shard key when sharding a collection. However, you can create and maintain a geospatial index on a sharded collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2d.txt:36
# 64eba46461474c53bda88b11d7cc6342
msgid "Behavior"
msgstr ""

#: ../source/core/2d.txt:38
# 03819e34964b41119d77fb0485bf762b
msgid "The ``2d`` index supports calculations on a flat, Euclidean plane. The ``2d`` index also supports *distance-only* calculations on a sphere, but for *geometric* calculations (e.g. :query:`$geoWithin`) on a sphere, store data as GeoJSON objects and use the ``2dsphere`` index type."
msgstr ""

#: ../source/core/2d.txt:44
# 2019caec82084a75be52e2baa881d573
msgid "A ``2d`` index can reference two fields. The first must be the location field. A ``2d`` compound index constructs queries that select first on the location field, and then filters those results by the additional criteria. A compound ``2d`` index can cover queries."
msgstr ""

#: ../source/core/2d.txt:52
# 5d9e1ce3e74c41c9aa6e6c38c1a628b1
msgid "Points on a 2D Plane"
msgstr ""

#: ../source/core/2d.txt:56
# 780a2118699f482c9af88e0c4cf1062d
msgid "To store location data as legacy coordinate pairs, use an array or an embedded document. When possible, use the array format:"
msgstr ""

#: ../source/core/2d.txt:63
# 4bd3256d22254eb2a94db70255864e38
msgid "Consider the embedded document form:"
msgstr ""

#: ../source/core/2d.txt:69
# 703b9d85babe4718bb708da752a22b89
msgid "Arrays are preferred as certain languages do not guarantee associative map ordering."
msgstr ""

#: ../source/core/2d.txt:72
# 667893f23d784989ad9129c461aa84f3
msgid "For all points, if you use longitude and latitude, store coordinates in **longitude, latitude** order."
msgstr ""

#: ../source/core/2d.txt:76
# 61cc95e65ab6488097bf803dc1428085
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2d.txt:78
# df75d0871904470b8c8bd89a3f7bc4f7
msgid "``2d`` indexes are :doc:`sparse </core/index-sparse>` by default and ignores the :doc:`sparse: true </core/index-sparse>` option. If a document lacks a ``2d`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the ``2d`` index. For inserts, MongoDB inserts the document but does not add to the ``2d`` index."
msgstr ""

#: ../source/core/2d.txt:85
# 839eeb24b56c4fa0b871956c61787463
msgid "For a compound index that includes a ``2d`` index key along with keys of other types, only the ``2d`` index field determines whether the index references a document."
msgstr ""

