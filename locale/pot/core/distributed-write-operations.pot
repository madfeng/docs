# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-write-operations.txt:3
# 3972d69d3ec24546a7fbf89dd88570f5
msgid "Distributed Write Operations"
msgstr ""

#: ../source/core/distributed-write-operations.txt:10
# 3dbb738dc8294172b9f7352209e2aee6
msgid "Write Operations on Sharded Clusters"
msgstr ""

#: ../source/core/distributed-write-operations.txt:12
# 3b343b0642a34c129a7e53c6d11edda0
msgid "For sharded collections in a :term:`sharded cluster`, the :program:`mongos` directs write operations from applications to the shards that are responsible for the specific *portion* of the data set. The :program:`mongos` uses the cluster metadata from the :ref:`config database <sharding-config-server>` to route the write operation to the appropriate shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:21
# eba22b156ca94145be13c9d40b168713
msgid "MongoDB partitions data in a sharded collection into *ranges* based on the values of the :term:`shard key`. Then, MongoDB distributes these chunks to shards. The shard key determines the distribution of chunks to shards. This can affect the performance of write operations in the cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:29
# 2d9a1fafe25b470cab33f8b3a05e0e51
msgid "Update operations that affect a *single* document **must** include the :term:`shard key` or the ``_id`` field. Updates that affect multiple documents are more efficient in some situations if they have the :term:`shard key`, but can be broadcast to all shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:35
# b6379e2878944650b5f631a8c4edc77d
msgid "If the value of the shard key increases or decreases with every insert, all insert operations target a single shard. As a result, the capacity of a single shard becomes the limit for the insert capacity of the sharded cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:40
# f5e6c8d0e35642c5b8d62959ca12c9f0
msgid "For more information, see :doc:`/administration/sharded-clusters` and :ref:`write-operations-bulk-insert`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:46
# 7f9da892d9b84cc78b1afc5e0b72e6fa
msgid "Write Operations on Replica Sets"
msgstr ""

#: ../source/core/distributed-write-operations.txt:48
# 123722d38c9a4223bc9a1747ae29cca3
msgid "In :term:`replica sets <replica set>`, all write operations go to the set's :term:`primary`, which applies the write operation then records the operations on the primary's operation log or :term:`oplog`. The oplog is a reproducible sequence of operations to the data set. :term:`Secondary` members of the set are continuously replicating the oplog and applying the operations to themselves in an asynchronous process."
msgstr ""

#: ../source/core/distributed-write-operations.txt:58
# c2546446fcbc4a2f8793ca105687af06
msgid "Large volumes of write operations, particularly bulk operations, may create situations where the secondary members have difficulty applying the replicating operations from the primary at a sufficient rate: this can cause the secondary's state to fall behind that of the primary. Secondaries that are significantly behind the primary present problems for normal operation of the replica set, particularly :ref:`failover <replica-set-failover-administration>` in the form of :ref:`rollbacks <replica-set-rollback>` as well as general :doc:`read consistency </applications/replication>`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:68
# c3c21128b541459597929231bff1abc3
msgid "To help avoid this issue, you can customize the :ref:`write concern <write-operations-write-concern>` to return confirmation of the write operation to another member [#write-concern-throttling]_ of the replica set every 100 or 1,000 operations. This provides an opportunity for secondaries to catch up with the primary. Write concern can slow the overall progress of write operations but ensure that the secondaries can maintain a largely current state with respect to the primary."
msgstr ""

#: ../source/core/distributed-write-operations.txt:78
# 5d816593158c46d4a0ed97a407ab179c
msgid "For more information on replica sets and write operations, see :ref:`replica-set-write-concern`, :ref:`replica-set-oplog-sizing`, and :doc:`/tutorial/change-oplog-size`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:82
# 7ba57012c10e42a5b2b821cc05ea67e6
msgid "Intermittently issuing a write concern with a ``w`` value of ``2`` or ``majority`` will slow the throughput of write traffic; however, this practice will allow the secondaries to remain current with the state of the primary."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# 2ba59c4ad29a400d9769f1d7aded7be7
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""

