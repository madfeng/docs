# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
# eb5ba16ba90a4a7ab4c88926ee1e2c5b
msgid "Replication Introduction"
msgstr ""

#: ../source/core/replication-introduction.txt:11
# e6cc200ce63e41358f4dc6f4223b1421
msgid "Replication is the process of synchronizing data across multiple servers."
msgstr ""

#: ../source/core/replication-introduction.txt:15
# 6e82eac2c44a4f3baa4ea4601d90552e
msgid "Purpose of Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:17
# 2ea123518af94131bff4775fac22dbb6
msgid "Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions. With additional copies of the data, you can dedicate one to disaster recovery, reporting, or backup."
msgstr ""

#: ../source/core/replication-introduction.txt:24
# 84e3fad429d2458aa84d11529937cbe9
msgid "In some cases, you can use replication to increase read capacity. Clients have the ability to send read and write operations to different servers. You can also maintain copies in different data centers to increase the locality and availability of data for distributed applications."
msgstr ""

#: ../source/core/replication-introduction.txt:31
# 9fd9a5d2b7f449ae882542704e91b05c
msgid "Replication in MongoDB"
msgstr ""

#: ../source/core/replication-introduction.txt:33
# 1880f7ab700c4e13befb3a9bca8b346f
msgid "A replica set is a group of :program:`mongod` instances that host the same data set. One :program:`mongod`, the primary, receives all write operations. All other instances, secondaries, apply operations from the primary so that they have the same data set."
msgstr ""

#: ../source/core/replication-introduction.txt:38
# 00fc713748b048ee8d53fe27f8906bbe
msgid "The **primary** accepts all write operations from clients. Replica set can have only one primary. Because only one member can accept write operations, replica sets provide **strict consistency** for all reads from the primary. To support replication, the primary logs all changes to its data sets in its :doc:`oplog </core/replica-set-oplog>`. See :doc:`primary </core/replica-set-primary>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:47
# a36c7dce96ee49e089d92f21850a6caa
msgid "The **secondaries** replicate the primary's oplog and apply the operations to their data sets. Secondaries' data sets reflect the primary's data set. If the primary is unavailable, the replica set will elect a secondary to be primary. By default, clients read from the primary, however, clients can specify a :doc:`read preferences </core/read-preference>` to send read operations to secondaries. Reads from secondaries may return data that does not reflect the state of the primary. See :doc:`secondaries </core/replica-set-secondary>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:59
# f02eb3ccfb0f42a5adf482ba0428ad33
msgid "You may add an extra :program:`mongod` instance to a replica set as an **arbiter**. Arbiters do not maintain a data set. Arbiters only exist to vote in elections. If your replica set has an even number of members, add an arbiter to obtain a majority of votes in an election for primary. Arbiters do not require dedicated hardware. See :doc:`arbiter </core/replica-set-arbiter>` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:68
# 8ddd094eb0bd450b8cc48fcf8f136a74
msgid "An **arbiter** will always be an arbiter. A **primary** may step down and become a **secondary**. A **secondary** may become the primary during an election."
msgstr ""

#: ../source/core/replication-introduction.txt:73
# 84ade4b16e1a460a9db29533cd910417
msgid "Asynchronous Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:75
# 0fe7ad32fe0b4e209bf19f6e32ff77e9
msgid "Secondaries apply operations from the primary asynchronously. By applying operations after the primary, sets can continue to function without some members. However, as a result secondaries may not return the most current data to clients."
msgstr ""

#: ../source/core/replication-introduction.txt:80
# 374000d268624e2cb39d11b836f58280
msgid "See :ref:`replica-set-oplog` and :ref:`replica-set-sync` for more information. See :ref:`replica-set-read-preference` for more on read operations and secondaries."
msgstr ""

#: ../source/core/replication-introduction.txt:85
# 7daef76539f6434e85eb1115933e79dc
msgid "Automatic Failover"
msgstr ""

#: ../source/core/replication-introduction.txt:87
# 538675169d4f43dca7dbe13adb9eac6e
msgid "When a primary does not communicate with the other members of the set for more than 10 seconds, the replica set will attempt to select another member to become the new primary. The first secondary that receives a majority of the votes becomes primary."
msgstr ""

#: ../source/core/replication-introduction.txt:94
# 19e8742264cc4fd9bed9407b63242232
msgid "See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:100
# 23c7a4921d2f4d499b77ec946cb699bc
msgid "Additional Features"
msgstr ""

#: ../source/core/replication-introduction.txt:102
# a8eec54078e54c3ba063097744659558
msgid "Replica sets provide a number of options to support application needs. For example, you may deploy a replica set with :doc:`members in multiple data centers </core/replica-set-architecture-geographically-distributed>`, or control the outcome of elections by adjusting the :data:`~local.system.replset.members[n].priority` of some members. Replica sets also support dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/core/replication-introduction.txt:111
# 100e40da8e4f45b5a6e90d3ed7b3d514
msgid "See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

