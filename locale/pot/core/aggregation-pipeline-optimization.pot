# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline-optimization.txt:3
# 07c16256a2e7456ebac9ed96b06fc50f
msgid "Aggregation Pipeline Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:7
# f971c39fe09b41209732ebfbf346ce0f
msgid "Aggregation pipeline operations have an optimization phase which attempts to reshape the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:10
# 196976ae49044779b6807b4ec973912c
msgid "To see how the optimizer transforms a particular aggregation pipeline, include the :method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()` method."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# 453bd7115a504954bd79c036999aca62
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:19
# a642a94b2b274630af14d4c19d602942
msgid "Projection Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:21
# 810e7f0130a4433bb27e7196116c879e
msgid "The aggregation pipeline can determine if it requires only a subset of the fields in the documents to obtain the results. If so, the pipeline will only use those required fields, reducing the amount of data passing through the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:29
# 9d151b3c71244b57838b8b49b1f46dfb
msgid "Pipeline Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:34
# 847b2609750a431590ddb413f749266c
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:36
# dcc4ffe8e0f94a6f8087517832de3510
msgid "When you have a sequence with :pipeline:`$sort` followed by a :pipeline:`$match`, the :pipeline:`$match` moves before the :pipeline:`$sort` to minimize the number of objects to sort. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:46
#: ../source/core/aggregation-pipeline-optimization.txt:71
# a6d1329a569849fe91103b993ff1951a
# 4114491074de494bb227b30ddf110ae6
msgid "During the optimization phase, the optimizer transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:57
# 460b2e46653a4c578b98338e13318e77
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:59
# 469ed69a7aea4e00b838bd64fbf9f298
msgid "When you have a sequence with :pipeline:`$skip` followed by a :pipeline:`$limit`, the :pipeline:`$limit` moves before the :pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value increases by the :pipeline:`$skip` amount."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:64
#: ../source/core/aggregation-pipeline-optimization.txt:101
# cdeb6f2217aa4675ab88b9149f400aa6
# 3434e09d56654f5eadff287e070f5476
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:79
# b18976bfa8f44ffbb562961749ec36b7
msgid "This optimization allows for more opportunities for :ref:`agg-sort-limit-coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. See :ref:`agg-sort-limit-coalescence` for details on the coalescence and :ref:`agg-sort-skip-limit-sequence` for an example."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:85
# 794065cfbe704a5480fc7b9e21a0b780
msgid "For aggregation operations on :doc:`sharded collections <aggregation-pipeline-sharded-collections>`, this optimization reduces the results returned from each shard."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:90
# 371de0d6b364410a89885ffb6b52af5a
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:92
# 6717ca2d21ef4f06b3ab9575a0f899ee
msgid "When possible, when the pipeline has the :pipeline:`$redact` stage immediately followed by the :pipeline:`$match` stage, the aggregation can sometimes add a portion of the :pipeline:`$match` stage before the :pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at the start of a pipeline, the aggregation can use an index as well as query the collection to limit the number of documents that enter the pipeline. See :ref:`aggregation-pipeline-operators-and-performance` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:108
# ecfb50e0005046499cda772928684a0f
msgid "The optimizer can add the same :pipeline:`$match` stage before the :pipeline:`$redact` stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:120
# 7c8d68a18bf542539d9020ff88724331
msgid "Pipeline Coalescence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:122
# 1aca73df4de34b78a0bb3220643e782a
msgid "When possible, the optimization phase coalesces a pipeline stage into its predecessor. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:129
# 1da8de8f968a4a83b55c59272b3fdf2c
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:131
# 0c9f90e9bd1e4cf0824483142067dd13
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`. This allows the sort operation to only maintain the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory [#coalescence-allowDiskUse]_. See :ref:`sort-and-memory` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:139
# d1cf0b2ff61541618e6a2c4309b12f7d
msgid "The optimization will still apply when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:146
# 609326ba91e4418e98951103625ef5e8
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:148
# 2051ae3ab4b044518a80c6ac38d82304
msgid "When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`, the two stages can coalesce into a single :pipeline:`$limit` where the limit amount is the *smaller* of the two initial limit amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:159
# a1c043e42aba41469b1c50ef6730e2b8
msgid "Then the second :pipeline:`$limit` stage can coalesce into the first :pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage where the limit amount ``10`` is the minimum of the two initial limits ``100`` and ``10``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:171
# 1535580ad46b4ed49fe1f4deadb0dcec
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:173
# 963d5527fd574209a72963d90f60ef4d
msgid "When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, the two stages can coalesce into a single :pipeline:`$skip` where the skip amount is the *sum* of the two initial skip amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:183
# b7c3901f8a614eeeba949c8656214e86
msgid "Then the second :pipeline:`$skip` stage can coalesce into the first :pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage where the skip amount ``7`` is the sum of the two initial limits ``5`` and ``2``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:195
# dd4c83ee3594426bbc4f8202b62038b0
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:197
# 2ae16a18007f46bbaf614d4d30eeba03
msgid "When a :pipeline:`$match` immediately follows another :pipeline:`$match`, the two stages can coalesce into a single :pipeline:`$match` combining the conditions with an :expression:`$and`. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:208
# f534db7cc2454ee5b0aac25774ebb04e
msgid "Then the second :pipeline:`$match` stage can coalesce into the first :pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:217
# 5f1424420b2e40ebbe0c57faf43ac32d
msgid "Examples"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:219
# 2977f153c6e242779422eb90bd344a88
msgid "The following examples are some sequences that can take advantage of both sequence reordering and coalescence. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:226
# 7e743c5e2f3e489e8db5437e15366554
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:228
# 4f2232401f3d42cf88985819e85436b0
msgid "A pipeline contains a sequence of :pipeline:`$sort` followed by a :pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:237
# 7811ce4f44374e36ad5b8638bed64be7
msgid "First, the optimizer performs the :ref:`agg-skip-limit-optimization` to transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:246
# 0980852513ee4df5b845085b3a713eea
msgid "The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` amount with the reordering. See :ref:`agg-skip-limit-optimization` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:250
# 12bd26b9e18948d48a35342780c99dfd
msgid "The reordered sequence now has :pipeline:`$sort` immediately preceding the :pipeline:`$limit`, and the pipeline can coalesce the two stages to decrease memory usage during the sort operation. See :ref:`agg-sort-limit-coalescence` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:256
# 115bcf7e809747ca955a390c4222eecb
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:258
# 51d5d153e0ad4df189c36e3c84697bf4
msgid "A pipeline contains a sequence of alternating :pipeline:`$limit` and :pipeline:`$skip` stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:268
# 40071d76fdbf4b9a898f9b40c903f3cd
msgid "The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ $skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit amount:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:279
# 25b153716ba444f19b60f29f8d8fee6d
msgid "The optimizer then coalesces the two :pipeline:`$limit` stages into a single :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into a single :pipeline:`$skip` stage. The resulting sequence is the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:289
# 3a7967a112d94a38b933673b9bf7bc2a
msgid "See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-coalescence` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:293
# 0eaa58097596457680f57b6dcf97e1ad
msgid ":method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()`"
msgstr ""

