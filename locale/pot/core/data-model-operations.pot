# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-operations.txt:3
# b07577037995467ea9feae418f488055
msgid "Operational Factors and Data Models"
msgstr ""

#: ../source/core/data-model-operations.txt:7
# 61a553ef16c341e68fa70e6161a88b1d
msgid "Modeling application data for MongoDB depends on both the data itself, as well as the characteristics of MongoDB itself. For example, different data models may allow applications to use more efficient queries, increase the throughput of insert and update operations, or distribute activity to a sharded cluster more effectively."
msgstr ""

#: ../source/core/data-model-operations.txt:13
# 96a1c73ed2eb4defad312aa9b9dfb060
msgid "These factors are *operational* or address requirements that arise outside of the application but impact the performance of MongoDB based applications. When developing a data model, analyze all of your application's :doc:`read operations </core/read-operations>` and :doc:`write operations </core/write-operations>` in conjunction with the following considerations."
msgstr ""

#: ../source/core/data-model-operations.txt:23
# 35f0ddec30604e99b824ee1108ade25e
msgid "Document Growth"
msgstr ""

#: ../source/core/data-model-operations.txt:25
# ddff09e3a5c04a2d95a8d035999e6067
msgid "Some updates to documents can increase the size of documents. These updates include pushing elements to an array (i.e. :update:`$push`) and adding new fields to a document. If the document size exceeds the allocated space for that document, MongoDB will relocate the document on disk. Relocating documents takes longer than *in place updates* and can lead to fragmented storage. Although MongoDB automatically :ref:`adds padding to document allocations <record-allocation-strategies>` to minimize the likelihood of relocation, data models should avoid document growth when possible."
msgstr ""

#: ../source/core/data-model-operations.txt:35
# 40feb789a7d24a569e4196ed06de3555
msgid "For instance, if your applications require updates that will cause document growth, you may want to refactor your data model to use references between data in distinct documents rather than a denormalized data model."
msgstr ""

#: ../source/core/data-model-operations.txt:40
# 5bce309a88e74da88a859ac4e486f918
msgid "MongoDB adaptively adjusts the amount of automatic padding to reduce occurrences of relocation. You may also use a *pre-allocation* strategy to explicitly avoid document growth. Refer to the :ecosystem:`Pre-Aggregated Reports Use Case </use-cases/pre-aggregated-reports>` for an example of the *pre-allocation* approach to handling document growth."
msgstr ""

#: ../source/core/data-model-operations.txt:47
# 4fae74ce0cac4efa856267b0649b8360
msgid "See :doc:`/core/storage` for more information on MongoDB's storage model and record allocation strategies."
msgstr ""

#: ../source/core/data-model-operations.txt:54
# e8ff0b2b20264019b5af1517e672936a
msgid "Atomicity"
msgstr ""

#: ../source/core/data-model-operations.txt:56
# 5254ee789ade48399c98aa785b821481
msgid "In MongoDB, operations are atomic at the :term:`document` level. No **single** write operation can change more than one document. Operations that modify more than a single document in a collection still operate on one document at a time. [#record-atomicity]_ Ensure that your application stores all fields with atomic dependency requirements in the same document. If the application can tolerate non-atomic updates for two pieces of data, you can store these data in separate documents."
msgstr ""

#: ../source/core/data-model-operations.txt:65
# 25325d653c05495194284073f03c5aca
msgid "A data model that embeds related data in a single document facilitates these kinds of atomic operations. For data models that store references between related pieces of data, the application must issue separate read and write operations to retrieve and modify these related pieces of data."
msgstr ""

#: ../source/core/data-model-operations.txt:71
# 353e690f955a433990a361b4f4271444
msgid "See :ref:`data-modeling-atomic-operation` for an example data model that provides atomic updates for a single document."
msgstr ""

#: ../source/core/data-model-operations.txt:74
# 23bd9b59e1d6453b968974980039f238
msgid "Document-level atomic operations include all operations within a single MongoDB document record: operations that affect multiple sub-documents within that single record are still atomic."
msgstr ""

#: ../source/core/data-model-operations.txt:80
# f8c70fb351e94bb7a8ad2fa67eeaf072
msgid "Sharding"
msgstr ""

#: ../source/core/data-model-operations.txt:82
# 886112da082245e78aa05bc432d07e1f
msgid "MongoDB uses :term:`sharding` to provide horizontal scaling. These clusters support deployments with large data sets and high-throughput operations. Sharding allows users to :term:`partition` a :term:`collection` within a database to distribute the collection's documents across a number of :program:`mongod` instances or :term:`shards <shard>`."
msgstr ""

#: ../source/core/data-model-operations.txt:89
# a1272c7853924089ab9125e4d0c64f42
msgid "To distribute data and application traffic in a sharded collection, MongoDB uses the :ref:`shard key <shard-key>`. Selecting the proper :ref:`shard key <shard-key>` has significant implications for performance, and can enable or prevent query isolation and increased write capacity. It is important to consider carefully the field or fields to use as the shard key."
msgstr ""

#: ../source/core/data-model-operations.txt:96
# 89a58976a56b4edcb234603858fc51a5
msgid "See :doc:`/core/sharding-introduction` and :doc:`/core/sharding-shard-key` for more information."
msgstr ""

#: ../source/core/data-model-operations.txt:102
# 25b6c66012b0475083c0b4dc7fcb2637
msgid "Indexes"
msgstr ""

#: ../source/core/data-model-operations.txt:104
# 6a6625c82a3648978850b0e5ad20c846
msgid "Use indexes to improve performance for common queries. Build indexes on fields that appear often in queries and for all operations that return sorted results. MongoDB automatically creates a unique index on the ``_id`` field."
msgstr ""

#: ../source/core/data-model-operations.txt:109
# f2285fa6779a465bbb8dc41971cf0373
msgid "As you create indexes, consider the following behaviors of indexes:"
msgstr ""

#: ../source/core/data-model-operations.txt:111
# 08dd4073ea3f400096b0e4644a5eb192
msgid "Each index requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:113
# a6adf865b6934862a4706b3b281079ae
msgid "Adding an index has some negative performance impact for write operations. For collections with high write-to-read ratio, indexes are expensive since each insert must also update any indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:117
# bef6943ed7a84e5d95b71577e3897755
msgid "Collections with high read-to-write ratio often benefit from additional indexes. Indexes do not affect un-indexed read operations."
msgstr ""

#: ../source/core/data-model-operations.txt:120
# 72464b4b014f4e8e93b2238cd9b7f63b
msgid "When active, each index consumes disk space and memory. This usage can be significant and should be tracked for capacity planning, especially for concerns over working set size."
msgstr ""

#: ../source/core/data-model-operations.txt:124
# 93d22259dbbf4c8cb44a98929b4785fa
msgid "See :doc:`/applications/indexes` for more information on indexes as well as :doc:`/tutorial/analyze-query-plan/`. Additionally, the MongoDB :doc:`database profiler </tutorial/manage-the-database-profiler>` may help identify inefficient queries."
msgstr ""

#: ../source/core/data-model-operations.txt:132
# bf359c1496c245f887af8e89eec1c58f
msgid "Large Number of Collections"
msgstr ""

#: ../source/core/data-model-operations.txt:134
# dc96dbf6b6f94cc68211baa9467ee9fd
msgid "In certain situations, you might choose to store related information in several collections rather than in a single collection."
msgstr ""

#: ../source/core/data-model-operations.txt:137
# df1990cd0a56487a9210850dbcea75b0
msgid "Consider a sample collection ``logs`` that stores log documents for various environment and applications. The ``logs`` collection contains documents of the following form:"
msgstr ""

#: ../source/core/data-model-operations.txt:146
# 2b9efac0ab50431fbed8b97ac10f1189
msgid "If the total number of documents is low, you may group documents into collection by type. For logs, consider maintaining distinct log collections, such as ``logs_dev`` and ``logs_debug``. The ``logs_dev`` collection would contain only the documents related to the dev environment."
msgstr ""

#: ../source/core/data-model-operations.txt:152
# c83f39a539c744a0bf586dcfccae8b9c
msgid "Generally, having a large number of collections has no significant performance penalty and results in very good performance. Distinct collections are very important for high-throughput batch processing."
msgstr ""

#: ../source/core/data-model-operations.txt:156
# 9fdd71bf51e84fddb18ecc8053b70de2
msgid "When using models that have a large number of collections, consider the following behaviors:"
msgstr ""

#: ../source/core/data-model-operations.txt:159
# deb2cc94bf2b47dfba29089a8352481f
msgid "Each collection has a certain minimum overhead of a few kilobytes."
msgstr ""

#: ../source/core/data-model-operations.txt:161
# 25c2fbb7984b4369952abeaf79f1a617
msgid "Each index, including the index on ``_id``, requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:164
# 0f9a6f149c44485f8a2bac5e171ca3f2
msgid "For each :term:`database`, a single namespace file (i.e. ``<database>.ns``) stores all meta-data for that database, and each index and collection has its own entry in the namespace file. MongoDB places :limit:`limits on the size of namespace files <Size of Namespace File>`."
msgstr ""

#: ../source/core/data-model-operations.txt:170
# d796ac64b3e64345ba15ea71adf54832
msgid "MongoDB has :limit:`limits on the number of namespaces <Number of Namespaces>`. You may wish to know the current number of namespaces in order to determine how many additional namespaces the database can support. To get the current number of namespaces, run the following in the :program:`mongo` shell:"
msgstr ""

#: ../source/core/data-model-operations.txt:182
# 4e211c5d97ba4104a0fc556f997e2078
msgid "The limit on the number of namespaces depend on the ``<database>.ns`` size. The namespace file defaults to 16 MB."
msgstr ""

#: ../source/core/data-model-operations.txt:185
# f3047c370c07405799f9d1eba5e4b8df
msgid "To change the size of the *new* namespace file, start the server with the option :option:`--nssize \\<new size MB\\> <--nssize>`. For existing databases, after starting up the server with :option:`--nssize`, run the :method:`db.repairDatabase()` command from the :program:`mongo` shell. For impacts and considerations on running :method:`db.repairDatabase()`, see :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/core/data-model-operations.txt:194
# ef3820fabf3f43e48db834247104a20b
msgid "Data Lifecycle Management"
msgstr ""

#: ../source/core/data-model-operations.txt:196
# 83eeaafe34eb44249a50f9f9cf1164fc
msgid "Data modeling decisions should take data lifecycle management into consideration."
msgstr ""

#: ../source/core/data-model-operations.txt:199
# b2928c1b91984befa5a39ca0a632badd
msgid "The :doc:`Time to Live or TTL feature </tutorial/expire-data>` of collections expires documents after a period of time. Consider using the TTL feature if your application requires some data to persist in the database for a limited period of time."
msgstr ""

#: ../source/core/data-model-operations.txt:204
# c2d3b8d30c104e4da30768b78e8a7617
msgid "Additionally, if your application only uses recently inserted documents, consider :doc:`/core/capped-collections`. Capped collections provide *first-in-first-out* (FIFO) management of inserted documents and efficiently support operations that insert and read documents based on insertion order."
msgstr ""

