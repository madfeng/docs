# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-introduction.txt:5
# 9e0af9329ab74284bbd31dc3524e1960
msgid "Sharding Introduction"
msgstr ""

#: ../source/core/sharding-introduction.txt:11
# 487571cee2e34baf80ad34c79e726459
msgid "Sharding is a method for storing data across multiple machines. MongoDB uses sharding to support deployments with very large data sets and high throughput operations."
msgstr ""

#: ../source/core/sharding-introduction.txt:16
# 7d48a0d7dfb94df48a3de7942a4c353d
msgid "Purpose of Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:18
# f6b6809d5cff4fed96799e2ce001d951
msgid "Database systems with large data sets and high throughput applications can challenge the capacity of a single server. High query rates can exhaust the CPU capacity of the server. Larger data sets exceed the storage capacity of a single machine. Finally, working set sizes larger than the system's RAM stress the I/O capacity of disk drives."
msgstr ""

#: ../source/core/sharding-introduction.txt:24
# 43cf1152e4ca4976967f4d7f63777a00
msgid "To address these issues of scales, database systems have two basic approaches: **vertical scaling** and **sharding**."
msgstr ""

#: ../source/core/sharding-introduction.txt:27
# d45d8541505046c7a670f753004449c0
msgid "**Vertical scaling** adds more CPU and storage resources to increase capacity. Scaling by adding capacity has limitations: high performance systems with large numbers of CPUs and large amount of RAM are disproportionately *more expensive* than smaller systems. Additionally, cloud-based providers may only allow users to provision smaller instances.  As a result there is a *practical maximum* capability for vertical scaling."
msgstr ""

#: ../source/core/sharding-introduction.txt:35
# 684d3c7913334d8b8fcc728891238e59
msgid "**Sharding**, or *horizontal scaling*, by contrast, divides the data set and distributes the data over multiple servers, or **shards**. Each shard is an independent database, and collectively, the shards make up a single logical database."
msgstr ""

#: ../source/core/sharding-introduction.txt:42
# 8aa53d2ba18e464b84738f6f0447d229
msgid "Sharding addresses the challenge of scaling to support high throughput and large data sets:"
msgstr ""

#: ../source/core/sharding-introduction.txt:45
# a076de3619f043a1991cc288c0ffb861
msgid "Sharding reduces the number of operations each shard handles. Each shard processes fewer operations as the cluster grows. As a result, a cluster can increase capacity and throughput *horizontally*."
msgstr ""

#: ../source/core/sharding-introduction.txt:49
# c420015a2804450bb8f5512c4df7ae6b
msgid "For example, to insert data, the application only needs to access the shard responsible for that record."
msgstr ""

#: ../source/core/sharding-introduction.txt:52
# faaa8da62c7d4d06b2792ee29d79b071
msgid "Sharding reduces the amount of data that each server needs to store. Each shard stores less data as the cluster grows."
msgstr ""

#: ../source/core/sharding-introduction.txt:55
# 8572c167161c46de91d885333ca01640
msgid "For example, if a database has a 1 terabyte data set, and there are 4 shards, then each shard might hold only 256GB of data. If there are 40 shards, then each shard might hold only 25GB of data."
msgstr ""

#: ../source/core/sharding-introduction.txt:60
# d3e14ce7c7a14df1a4b9496ce860c242
msgid "Sharding in MongoDB"
msgstr ""

#: ../source/core/sharding-introduction.txt:62
# 92c3f985d5c846f9b2cb417d310c0ae9
msgid "MongoDB supports sharding through the configuration of a :term:`sharded clusters <sharded cluster>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:67
# 4f44b0854b5f496eae328c3b5ccbce40
msgid "Sharded cluster has the following components: :term:`shards <shard>`, :term:`query routers <mongos>` and :term:`config servers <config server>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:70
# e37e75dcaeed474c8c82349e76c16516
msgid "**Shards** store the data. To provide high availability and data consistency, in a production sharded cluster, each shard is a :term:`replica set` [#dev-only-shard-deployment]_. For more information on replica sets, see :doc:`Replica Sets </core/replication>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:76
# f990eafa477645978620a2ed456b13e1
msgid "**Query Routers**, or :program:`mongos` instances, interface with client applications and direct operations to the appropriate shard or shards. The query router processes and targets operations to shards and then returns results to the clients. A sharded cluster can contain more than one query router to divide the client request load. A client sends requests to one query router. Most sharded cluster have many query routers."
msgstr ""

#: ../source/core/sharding-introduction.txt:83
# 951eea9bc3574cde8386edf520d0d4fc
msgid "**Config servers** store the cluster's metadata. This data contains a mapping of the cluster's data set to the shards. The query router uses this metadata to target operations to specific shards. Production sharded clusters have *exactly* 3 config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:88
# 8ea4e792d8914152a6cde91e2f764d4e
msgid "For development and testing purposes only, each **shard** can be a single :program:`mongod` instead of a replica set. Do **not** deploy production clusters without 3 config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:96
# 92f8436e485d4a21a8dfa2d6b54dcda4
msgid "Data Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:98
# a16ca785e63042d3b60654b5b9ead7f2
msgid "MongoDB distributes data, or shards, at the collection level. Sharding partitions a collection's data by the **shard key**."
msgstr ""

#: ../source/core/sharding-introduction.txt:102
# f718b21ab13b42e9b4902380a2583aaa
msgid "Shard Keys"
msgstr ""

#: ../source/core/sharding-introduction.txt:104
# 3e3e8ee7ca43424696b760abe2625024
msgid "To shard a collection, you need to select a **shard key**. A :term:`shard key` is either an indexed field or an indexed compound field that exists in every document in the collection. MongoDB divides the shard key values into **chunks** and distributes the :term:`chunks <chunk>` evenly across the shards. To divide the shard key values into chunks, MongoDB uses either **range based partitioning** or **hash based partitioning**. See the :doc:`Shard Key </core/sharding-shard-key>` documentation for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:114
# 332f15b440654c20bd1e58df50b51962
msgid "Range Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:116
# b7c3b418c697429780547dcc9d939803
msgid "For *range-based sharding*, MongoDB divides the data set into ranges determined by the shard key values to provide **range based partitioning**. Consider a numeric shard key: If you visualize a number line that goes from negative infinity to positive infinity, each value of the shard key falls at some point on that line. MongoDB partitions this line into smaller, non-overlapping ranges called **chunks** where a chunk is range of values from some minimum value to some maximum value."
msgstr ""

#: ../source/core/sharding-introduction.txt:125
# c7dfa4481e65482ba1784a00ecdb5362
msgid "Given a range based partitioning system, documents with \"close\" shard key values are likely to be in the same chunk, and therefore on the same shard."
msgstr ""

#: ../source/core/sharding-introduction.txt:132
# 4d231eb8d25541e4b74f92f416c6a1d6
msgid "Hash Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:134
# 680202344d4e4c6bb5f8239957a1a7a0
msgid "For *hash based partitioning*, MongoDB computes a hash of a field's value, and then uses these hashes to create chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:137
# a76d6f1433a447519cb58f7c28c47b4e
msgid "With hash based partitioning, two documents with \"close\" shard key values are *unlikely* to be part of the same chunk. This ensures a more random distribution of a collection in the cluster."
msgstr ""

#: ../source/core/sharding-introduction.txt:144
# 43ef4d59e1c7417cac8504258a1197e2
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:146
# 1c73841fa9634e38af0012a633e5efc9
msgid "Range based partitioning supports more efficient range queries. Given a range query on the shard key, the query router can easily determine which chunks overlap that range and route the query to only those shards that contain these chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:151
# 73e0d9b95f2a4d4a9e119a681152aae1
msgid "However, range based partitioning can result in an uneven distribution of data, which may negate some of the benefits of sharding. For example, if the shard key is a linearly increasing field, such as time, then all requests for a given time range will map to the same chunk, and thus the same shard. In this situation, a small set of shards may receive the majority of requests and the system would not scale very well."
msgstr ""

#: ../source/core/sharding-introduction.txt:159
# b9f9f0810df74851a35edcebf9087b44
msgid "Hash based partitioning, by contrast, ensures an even distribution of data at the expense of efficient range queries. Hashed key values results in random distribution of data across chunks and therefore shards. But random distribution makes it more likely that a range query on the shard key will not be able to target a few shards but would more likely query every shard in order to return a result."
msgstr ""

#: ../source/core/sharding-introduction.txt:167
# 208c091021a440f4bfe0611baf138af0
msgid "Customized Data Distribution with Tag Aware Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:169
# b9b7cb9012e0401d9899377ebed0676f
msgid "MongoDB allows administrators to direct the balancing policy using **tag aware sharding**. Administrators create and associate tags with ranges of the shard key, and then assign those tags to the shards. Then, the balancer migrates tagged data to the appropriate shards and ensures that the cluster always enforces the distribution of data that the tags describe."
msgstr ""

#: ../source/core/sharding-introduction.txt:176
# a287ccac1a3047d39f2abdfc3cd65828
msgid "Tags are the primary mechanism to control the behavior of the balancer and the distribution of chunks in a cluster.  Most commonly, tag aware sharding serves to improve the locality of data for sharded clusters that span multiple data centers."
msgstr ""

#: ../source/core/sharding-introduction.txt:181
# 9879987699f44187bab19f3e6190153f
msgid "See :doc:`/core/tag-aware-sharding` for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:184
# 01f17a420c144c0a923a9ea51e3cc7d1
msgid "Maintaining a Balanced Data Distribution"
msgstr ""

#: ../source/core/sharding-introduction.txt:186
# af8f3d9196d84295b7979043a5f04c15
msgid "The addition of new data or the addition of new servers can result in data distribution imbalances within the cluster, such as a particular shard contains significantly more chunks than another shard or a size of a chunk is significantly greater than other chunk sizes."
msgstr ""

#: ../source/core/sharding-introduction.txt:191
# b39f5e12b6d144148770521075913a29
msgid "MongoDB ensures a balanced cluster using two background process: splitting and the balancer."
msgstr ""

#: ../source/core/sharding-introduction.txt:195
# 03708084c3434ddf855737394285d152
msgid "Splitting"
msgstr ""

#: ../source/core/sharding-introduction.txt:197
# 3552af7ba7884c6b8dded4897f644b7d
msgid "Splitting is a background process that keeps chunks from growing too large. When a chunk grows beyond a :ref:`specified chunk size <sharding-chunk-size>`, MongoDB splits the chunk in half. Inserts and updates triggers splits. Splits are a efficient meta-data change. To create splits, MongoDB does *not* migrate any data or affect the shards."
msgstr ""

#: ../source/core/sharding-introduction.txt:207
# 68ac2fb72cb044b4aca9b1f3cf54b1a0
msgid "Balancing"
msgstr ""

#: ../source/core/sharding-introduction.txt:209
# f8f139ff409b417e806970da4452e783
msgid "The :ref:`balancer <sharding-balancing-internals>` is a background process that manages chunk migrations. The balancer runs in all of the query routers in a cluster."
msgstr ""

#: ../source/core/sharding-introduction.txt:213
# 96de34b8c70643e2a745fb4fb688072f
msgid "When the distribution of a sharded collection in a cluster is uneven, the balancer process migrates chunks from the shard that has the largest number of chunks to the shard with the least number of chunks until the collection balances. For example: if collection ``users`` has 100 chunks on *shard 1* and 50 chunks on *shard 2*, the balancer will migrate chunks from *shard 1* to *shard 2* until the collection achieves balance."
msgstr ""

#: ../source/core/sharding-introduction.txt:221
# 3586aa3c30a443d9a6c39c244ceba76a
msgid "The shards manage *chunk migrations* as a background operation between an *origin shard* and a *destination shard*.  During a chunk migration, the *destination shard* is sent all the current documents in the chunk from the *origin shard*. Next, the destination shard captures and applies all changes made to the data during the migration process. Finally, the metadata regarding the location of the chunk on *config server* is updated."
msgstr ""

#: ../source/core/sharding-introduction.txt:229
# 1f9f2942d6954f8e8fdb19cfa852e24e
msgid "If there's an error during the migration, the balancer aborts the process leaving the chunk unchanged on the origin shard. MongoDB removes the chunk's data from the origin shard **after** the migration completes successfully."
msgstr ""

#: ../source/core/sharding-introduction.txt:237
# 5723ccd1ab534fa79ef7e13d7b32cc63
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

#: ../source/core/sharding-introduction.txt:239
# 50fa9b6f53e545218d2f12437a4b7936
msgid "Adding a shard to a cluster creates an imbalance  since the new shard has no chunks. While MongoDB begins migrating data to the new shard immediately, it can take some time before the cluster balances."
msgstr ""

#: ../source/core/sharding-introduction.txt:243
# 2f5544ede0bf4c34b4c145e5c6e15e1a
msgid "When removing a shard, the balancer migrates all chunks from a shard to other shards. After migrating all data and updating the meta data, you can safely remove the shard."
msgstr ""

