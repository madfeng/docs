# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-introduction.txt:6
# 03ca8f1c0fac4a2181594a93dac06cac
msgid "Write Operations Overview"
msgstr ""

#: ../source/core/write-operations-introduction.txt:10
# 7079bcdf3b6a4ca985cc33c2f8c67d8a
msgid "A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single :term:`collection`. All write operations in MongoDB are atomic on the level of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
# c4cf93b8145548beabbc015af108c00f
msgid "There are three classes of write operations in MongoDB: :ref:`insert <write-op-insert>`, :ref:`update <write-op-update>`, and :ref:`remove <write-op-remove>`. Insert operations add new data to a collection. Update operations modify existing data, and remove operations delete data from a collection. No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:22
# 20bf028a546547a79bf430d87fbc6abc
msgid "For the update and remove operations, you can specify criteria, or conditions, that identify the documents to update or remove. These operations use the same query syntax to specify the criteria as :doc:`read operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:27
# ff140d0919b345ca9c35be399a042a78
msgid "MongoDB allows applications to determine the acceptable level of acknowledgement required of write operations. See :doc:`/core/write-concern` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
# c28f56b8342b4c658ce6f2f3e482858b
msgid "Insert"
msgstr ""

#: ../source/core/write-operations-introduction.txt:36
# 2847dfd0c3be4381834826a7e4398b32
msgid "In MongoDB, the :method:`db.collection.insert()` method adds new :term:`documents <document>` to a collection."
msgstr ""

#: ../source/core/write-operations-introduction.txt:39
# ded6abcb9df24ee4b5f9417a7a21963b
msgid "The following diagram highlights the components of a MongoDB insert operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:44
#: ../source/core/write-operations-introduction.txt:105
#: ../source/core/write-operations-introduction.txt:180
# 452e23e1d7ff4bd9be365e41fa7f5de7
# 9ae4294fcbf048dd9a4461844214ca8d
# bef661e08cbf4e95b0ff3cfaf8f98daf
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
# 709366ac65614a1d883c1f7811268362
# 134689947c754593bb55fadc7acc2c22
# f7c19f546e33478b843aade9a26e16da
msgid "Example"
msgstr ""

#: ../source/core/write-operations-introduction.txt:50
# 82eea2541bc94544a2fb8ff946cc90d4
msgid "The following operation inserts a new documents into the ``users`` collection. The new document has four fields ``name``, ``age``, and ``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations-introduction.txt:65
# e3c46b1abc2c4689b366e89bb2cd1ac5
msgid "For more information and examples, see :method:`db.collection.insert()`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:68
# 65664b2e1c494fc08c0ffeb4f0e87369
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:70
# 3fc08390adc549e2b450e607599e17aa
msgid "If you add a new document *without* the :term:`_id` field, the client library or the :program:`mongod` instance adds an ``_id`` field and populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:74
# 7fe420e14b6746d58b63f5e05056e072
msgid "If you specify the ``_id`` field, the value must be unique within the collection. For operations with :ref:`write concern <write-concern>`, if you try to create a document with a duplicate ``_id`` value, :program:`mongod` returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations-introduction.txt:80
# abc342c3fc824834abad5b69c6516017
msgid "Other Methods to Add Documents"
msgstr ""

#: ../source/core/write-operations-introduction.txt:82
# 788119d875154ab1a7503ec5eb6c236e
msgid "You can also add new documents to a collection using methods that have an :ref:`upsert <write-operations-upsert-behavior>` option. If the option is set to ``true``, these methods will either modify existing documents or add a new document when no matching documents exist for the query. For more information, see :ref:`write-operations-upsert-behavior`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:91
# 32e69b3abca94faca44c8212bdee2f55
msgid "Update"
msgstr ""

#: ../source/core/write-operations-introduction.txt:93
# cf9cf19083a541439df3358a8888d8c1
msgid "In MongoDB, the :method:`db.collection.update()` method modifies existing :term:`documents <document>` in a :term:`collection`. The :method:`db.collection.update()` method can accept query criteria to determine which documents to update as well as an options document that affects its behavior, such as the ``multi`` option to update multiple documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:100
# 7194735769f74d25a31933ae9bc81cbb
msgid "The following diagram highlights the components of a MongoDB update operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:119
# dcaa4052921c41c5ac51746e0c4cf7e8
msgid "This update operation on the ``users`` collection sets the ``status`` field to ``A`` for the documents that match the criteria of ``age`` greater than ``18``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:123
# f7122f1bbf9f422281247bdca9941a8e
msgid "For more information, see :method:`db.collection.update()` and :ref:`update() Examples <update-method-examples>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:129
# 2237433b847f41788138ab274a0c8008
msgid "Default Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:131
# fedeef1590364c719add5e946186fc43
msgid "By default, the :method:`db.collection.update()` method updates a **single** document. However, with the ``multi`` option, :method:`~db.collection.update()` can update all documents in a collection that match a query."
msgstr ""

#: ../source/core/write-operations-introduction.txt:136
# 57152922285b4039b629fc623a1a6b71
msgid "The :method:`db.collection.update()` method either updates specific fields in the existing document or replaces the document. See :method:`db.collection.update()` for details as well as examples."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
# b23fc07b584e417fa2da41667aed498a
msgid "When performing update operations that increase the document size beyond the allocated space for that document, the update operation relocates the document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
# 0b02ee8ce0674f44b385914f0f5e3a52
msgid "MongoDB preserves the order of the document fields following write operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
# 7def754a38d74718a4dbce0d84c5fb1d
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
# 41a69cc331714e9785c43dae7268dc4b
msgid "Updates that include :update:`renaming <$rename>` of field names may result in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
# 6f011351d08e41c080f9bc34d2cb3c7e
msgid "Starting in version 2.6, MongoDB actively attempts to preserve the field order in a document. Before version 2.6, MongoDB did not actively preserve the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:145
# 73c74b95211846eca1d34040df73a99d
msgid "Update Behavior with the ``upsert`` Option"
msgstr ""

#: ../source/core/write-operations-introduction.txt:147
# 9f34f2e710314f95ab71f953d28d2ad8
msgid "If the :method:`~db.collection.update()` method includes :ref:`upsert: true <upsert-parameter>` *and* no documents match the query portion of the update operation, then the update operation creates a new document. If there are matching documents, then the update operation with the :ref:`upsert: true <upsert-parameter>` modifies the matching document or documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:154
# dfd880d39b6a4903b53caf297ee535c9
msgid "By specifying :term:`upsert: true <upsert>`, applications can indicate, in a *single* operation, that if no matching documents are found for the update, an insert should be performed. See :method:`~db.collection.update()` for details on performing an :ref:`upsert <upsert-parameter>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:162
# 61548c373e414296a9172c982c8579f3
msgid "In 2.6, the new :method:`Bulk()` methods and the underlying :dbcommand:`update` command allow you to perform many updates with ``upsert: true`` operations in a single call."
msgstr ""

#: ../source/core/write-operations-introduction.txt:169
# ca323ad8ba404a4d80a59626ec05bd99
msgid "Remove"
msgstr ""

#: ../source/core/write-operations-introduction.txt:171
# be0773eae1a84432bfab68aaf412366a
msgid "In MongoDB, the :method:`db.collection.remove()` method deletes documents from a collection. The :method:`db.collection.remove()` method accepts a query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:175
# 3af7dc5e7ba545558e3664a210094778
msgid "The following diagram highlights the components of a MongoDB remove operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:192
# cf0d900facea4f4d839a35df8840baed
msgid "This delete operation on the ``users`` collection removes all documents that match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:195
# 6ba31dc9fad44628b21b010b9b76295c
msgid "For more information, see :method:`db.collection.remove()` method and :doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:199
# 1536275e1fa44a34a3ea9e83709f34fe
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:201
# efd7be5478cb44afa873fc307d31291f
msgid "By default, :method:`db.collection.remove()` method removes all documents that match its query. However, the method can accept a flag to limit the delete operation to a single document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:208
# e0bc83f7de554955baacd096736d422e
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:210
# 7379ed06933c4f849fca32119cf91cab
msgid "The modification of a single document is always atomic, even if the write operation modifies multiple sub-documents *within* that document. For write operations that modify multiple documents, the operation as a whole is not atomic, and other operations may interleave."
msgstr ""

#: ../source/core/write-operations-introduction.txt:216
# f32cc76ab18d4502be2cd19610c39086
msgid "No other operations are atomic. You can, however, attempt to isolate a write operation that affects multiple documents using the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:220
# 3c40a211d733496cb9bee4d7933cf147
msgid "To isolate a sequence of write operations from other read and write operations, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:224
# 47e83c56eab049c0b77e4f7406048512
msgid "Additional Methods"
msgstr ""

#: ../source/core/write-operations-introduction.txt:226
# e360df5ca4684cd5aebfe46705d9430c
msgid "The :method:`db.collection.save()` method can either update an existing document or an insert a document if the document cannot be found by the ``_id`` field. See :method:`db.collection.save()` for more information and examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:231
# bd2b487d7ead4dff80c6e628755b278f
msgid "MongoDB also provides methods to perform write operations in bulk. See :method:`Bulk()` for more information."
msgstr ""

#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
# c2a7d344b91148a5be71f99b1035f5ca
# 6104bea5e4454d67b940d24e3053410d
msgid "write operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:2
# 6104bea5e4454d67b940d24e3053410d
msgid "crud"
msgstr ""

