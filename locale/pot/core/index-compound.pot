# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/index-compound.txt:7
# 18a08804b043478a870a5b36e2a0d110
msgid "Compound Indexes"
msgstr ""

#: ../source/core/index-compound.txt:11
# 8e53c3bcc3b24bbdb4cd7c20ea69bd8a
msgid "MongoDB supports *compound indexes*, where a single index structure holds references to multiple fields [#compound-index-field-limit]_ within a collection's documents. The following diagram illustrates an example of a compound index on two fields:"
msgstr ""

#: ../source/core/index-compound.txt:19
# 776fa97cef3948d1bd44e13eddb5c22d
msgid "MongoDB imposes a :limit:`limit of 31 fields for any compound index <Number of Indexed Fields in a Compound Index>`."
msgstr ""

#: ../source/core/index-compound.txt:22
# ce96103637b54d8dbbd320db521859e9
msgid "Compound indexes can support queries that match on multiple fields."
msgstr ""

#: ../source/core/index-compound.txt:0
# 736177da70ae4cc7985073fbba9bc397
msgid "Example"
msgstr ""

#: ../source/core/index-compound.txt:26
# 1bee8548cccf40bb8fc71a7586b13b2c
msgid "Consider a collection named ``products`` that holds documents that resemble the following document:"
msgstr ""

#: ../source/core/index-compound.txt:42
# a8915d2a62f04948ac7f7cb5d06d463a
msgid "If applications query on the ``item`` field as well as query on both the ``item`` field and the ``stock`` field, you can specify a single compound index to support both of these queries:"
msgstr ""

#: ../source/core/index-compound.txt:50
# d3efd2c0a34c482c828b611809408f7e
msgid "You may not create compound indexes that have ``hashed`` index fields. You will receive an error if you attempt to create a compound index that includes :doc:`a hashed index </core/index-hashed>`."
msgstr ""

#: ../source/core/index-compound.txt:55
# bcb400e558d34b6ca09863a5bd9872c8
msgid "The order of the fields in a compound index is very important. In the previous example, the index will contain references to documents sorted first by the values of the ``item`` field and, within each value of the ``item`` field, sorted by values of the ``stock`` field. See :ref:`index-ascending-and-descending` for more information."
msgstr ""

#: ../source/core/index-compound.txt:61
# bb2a6f4dc476494b8e26580b2051b9bb
msgid "In addition to supporting queries that match on all the index fields, compound indexes can support queries that match on the prefix of the index fields. For details, see :ref:`compound-index-prefix`."
msgstr ""

#: ../source/core/index-compound.txt:69
# 305b2ce9fbb0413ca8e5b34e438990e8
msgid "Sort Order"
msgstr ""

#: ../source/core/index-compound.txt:71
# 4e9ccc2dc1274599b29c1000a67b46a3
msgid "Indexes store references to fields in either ascending (``1``) or descending (``-1``) sort order. For single-field indexes, the sort order of keys doesn't matter because MongoDB can traverse the index in either direction. However, for :ref:`compound indexes <index-type-compound>`, sort order can matter in determining whether the index can support a sort operation."
msgstr ""

#: ../source/core/index-compound.txt:78
# 7ce2f855142a47b4b9696152a4603428
msgid "Consider a collection ``events`` that contains documents with the fields ``username`` and ``date``. Applications can issue queries that return results sorted first by ascending ``username`` values and then by descending (i.e. more recent to last) ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:87
# 763f077133de4f4f884e3864ecf9e356
msgid "or queries that return results sorted first by descending ``username`` values and then by ascending ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:94
# 03afab5ecd6d4ce29e9887d45b04d071
msgid "The following index can support both these sort operations:"
msgstr ""

#: ../source/core/index-compound.txt:100
# 0444b335bf044aa893a736042124f0a7
msgid "However, the above index **cannot** support sorting by ascending ``username`` values and then by ascending ``date`` values, such as the following:"
msgstr ""

#: ../source/core/index-compound.txt:111
# 01127bd531e64f489178517ee5e4a324
msgid "Prefixes"
msgstr ""

#: ../source/core/index-compound.txt:113
# d8a8823bf4634a0b86edf3b3e4922fe3
msgid "Compound indexes support queries on any prefix of the index fields. Index prefixes are the beginning subset of indexed fields. For example, given the index ``{ a: 1, b: 1, c: 1 }``, both ``{ a: 1 }`` and ``{ a: 1, b: 1 }`` are prefixes of the index."
msgstr ""

#: ../source/core/index-compound.txt:118
# 1e37a422c4544747967ce7bbed0517a2
msgid "If you have a collection that has a compound index on ``{ a: 1, b: 1 }``, as well as an index that consists of the prefix of that index, i.e. ``{ a: 1 }``, assuming none of the index has a sparse or unique constraints, then you can drop the ``{ a: 1 }`` index. MongoDB will be able to use the compound index in all of situations that it would have used the ``{ a: 1 }`` index."
msgstr ""

#: ../source/core/index-compound.txt:125
# 7db18c0f690b47b9967389d76798a213
msgid "For example, given the following index:"
msgstr ""

#: ../source/core/index-compound.txt:131
# 1722a1708e1b4a81bb5407da1d420d17
msgid "MongoDB **can** use this index to support queries that include:"
msgstr ""

#: ../source/core/index-compound.txt:133
# 9e02c8249e9a454db1f3cf2d6dbe06f0
msgid "the ``item`` field,"
msgstr ""

#: ../source/core/index-compound.txt:134
# 857b69e512cd48c3bc006a616fc01b7f
msgid "the ``item`` field *and* the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:135
# ecea518f692641d4a02de9780325e1b2
msgid "the ``item`` field *and* the ``location`` field *and* the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:137
# 5bdd3e6fa3ae4e6cb9c1ef9eb3b830c9
msgid "only the ``item`` *and* ``stock`` fields; however, this index would be less efficient than an index on only ``item`` and ``stock``."
msgstr ""

#: ../source/core/index-compound.txt:141
# 9f04304341084c76920d513e75b5946f
msgid "MongoDB **cannot** use this index to support queries that include:"
msgstr ""

#: ../source/core/index-compound.txt:143
# 95550a4279b84191b1c739fca208f25b
msgid "only the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:144
# c137b58d087d4ce8892546ea462cffc5
msgid "only the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:145
# 33a308dfe28f4a3fa4aee3d218e56a4c
msgid "only the ``location`` *and* ``stock`` fields."
msgstr ""

#: ../source/core/index-compound.txt:148
# a34ff00d10a242379a880aaa10b1ca8d
msgid "Index Intersection"
msgstr ""

#: ../source/includes/fact-index-intersection-vs-compound-indexes.rst:1
# 32004d07c6e141e8b7b5797d8374c27a
msgid "Starting in version 2.6, MongoDB can use :doc:`index intersection </core/index-intersection>` to fulfill queries. The choice between creating compound indexes that support your queries or relying on index intersection depends on the specifics of your system. See :ref:`index-intersection-compound-indexes` for more details."
msgstr ""

#: ../source/core/index-compound.txt:1
#: ../source/core/index-compound.txt:65
# f68c8d8669874b3bb4013b53c99441cc
# ec53f6fa1a3746aa84055ee331365e74
msgid "index"
msgstr ""

#: ../source/core/index-compound.txt:1
# f68c8d8669874b3bb4013b53c99441cc
msgid "compound"
msgstr ""

#: ../source/core/index-compound.txt:2
# 00219baea1704c22b7490ed3e3e51d1f
msgid "compound index"
msgstr ""

#: ../source/core/index-compound.txt:65
# ec53f6fa1a3746aa84055ee331365e74
msgid "sort order"
msgstr ""

