# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/bulk-inserts.txt:5
# 020fdd75d406446da690fbfbbadac245
msgid "Bulk Inserts in MongoDB"
msgstr ""

#: ../source/core/bulk-inserts.txt:9
# b8a97dbc65dd4deaa3df7afe12c0c269
msgid "In some situations you may need to insert or ingest a large amount of data into a MongoDB database. These *bulk inserts* have some special considerations that are different from other write operations."
msgstr ""

#: ../source/core/bulk-inserts.txt:17
# 8facf1c5791349e48104e882dca632dd
msgid "Use the ``insert()`` Method"
msgstr ""

#: ../source/core/bulk-inserts.txt:19
# 53f9be9f418b49a1963a23b6c081ad92
msgid "The :method:`insert() <db.collection.insert()>` method, when passed an array of documents, performs a bulk insert, and inserts each document atomically. Bulk inserts can significantly increase performance by amortizing :ref:`write concern <write-operations-write-concern>` costs."
msgstr ""

#: ../source/core/bulk-inserts.txt:24
# 99faf4aed7bf4b10b00358d9590c428a
msgid ":method:`insert() <db.collection.insert()>` in the :program:`mongo` shell gained support for bulk inserts in version 2.2."
msgstr ""

#: ../source/core/bulk-inserts.txt:28
# 72d1b21cfbfc4ed791c6ee30c65857c5
msgid "In the :doc:`drivers </applications/drivers>`, you can configure write concern for batches rather than on a per-document level."
msgstr ""

#: ../source/core/bulk-inserts.txt:31
# d70fecc0135b492e8673069da9c241d7
msgid "Drivers have a ``ContinueOnError`` option in their insert operation, so that the bulk operation will continue to insert remaining documents in a batch even if an insert fails."
msgstr ""

#: ../source/core/bulk-inserts.txt:37
# f84990885094466ea2019318b61da284
msgid "If multiple errors occur during a bulk insert, clients only receive the last error generated."
msgstr ""

#: ../source/core/bulk-inserts.txt:42
# 0b2f3b57409942fa964ab56554187751
msgid ":doc:`Driver documentation </applications/drivers>` for details on performing bulk inserts in your application. Also see :doc:`/core/import-export`."
msgstr ""

#: ../source/core/bulk-inserts.txt:47
# 040a37614b0947d8ad5cba4b6118439b
msgid "Bulk Inserts on Sharded Clusters"
msgstr ""

#: ../source/core/bulk-inserts.txt:49
# d48045d3bbc249a782683260917d2129
msgid "While ``ContinueOnError`` is optional on unsharded clusters, all bulk operations to a :term:`sharded collection <sharded cluster>` run with ``ContinueOnError``, which cannot be disabled."
msgstr ""

#: ../source/core/bulk-inserts.txt:53
# 44b41784df51409eb04277f29aa8481b
msgid "Large bulk insert operations, including initial data inserts or routine data import, can affect :term:`sharded cluster` performance. For bulk inserts, consider the following strategies:"
msgstr ""

#: ../source/core/bulk-inserts.txt:58
# 48bc5bb10e154b3bae9cdc6a96a703d2
msgid "Pre-Split the Collection"
msgstr ""

#: ../source/core/bulk-inserts.txt:60
# 4f3db6a1422d4ddca2ee6a6ffc34d85e
msgid "If the sharded collection is empty, then the collection has only one initial :term:`chunk`, which resides on a single shard. MongoDB must then take time to receive data, create splits, and distribute the split chunks to the available shards. To avoid this performance cost, you can pre-split the collection, as described in :doc:`/tutorial/split-chunks-in-sharded-cluster`."
msgstr ""

#: ../source/core/bulk-inserts.txt:68
# 172ec0c42d934458b3cc5637cb11328c
msgid "Insert to Multiple ``mongos``"
msgstr ""

#: ../source/core/bulk-inserts.txt:70
# 0e96d1cf226649d9acd97e7e1ae4e79d
msgid "To parallelize import processes, send insert operations to more than one :program:`mongos` instance. Pre-split empty collections first as described in :doc:`/tutorial/split-chunks-in-sharded-cluster`."
msgstr ""

#: ../source/core/bulk-inserts.txt:75
# 9f82401c0cb741849d50feaa330f12da
msgid "Avoid Monotonic Throttling"
msgstr ""

#: ../source/core/bulk-inserts.txt:77
# b330e923a948422bad7706f62249fd4c
msgid "If your shard key increases monotonically during an insert, then all inserted data goes to the last chunk in the collection, which will always end up on a single shard. Therefore, the insert capacity of the cluster will never exceed the insert capacity of that single shard."
msgstr ""

#: ../source/core/bulk-inserts.txt:82
# 6fff247944f6424db72d37dbbf5f2f57
msgid "If your insert volume is larger than what a single shard can process, and if you cannot avoid a monotonically increasing shard key, then consider the following modifications to your application:"
msgstr ""

#: ../source/core/bulk-inserts.txt:86
# 93c3764b819e42058d6d3ea6a9173848
msgid "Reverse the binary bits of the shard key. This preserves the information and avoids correlating insertion order with increasing sequence of values."
msgstr ""

#: ../source/core/bulk-inserts.txt:90
# e0f21571b545467a9be5527d7784934d
msgid "Swap the first and last 16-bit words to \"shuffle\" the inserts."
msgstr ""

#: ../source/core/bulk-inserts.txt:0
# b4af0692f2fb45bc98d78e8186cb1153
msgid "Example"
msgstr ""

#: ../source/core/bulk-inserts.txt:112
# 97cb5e87539e437ca8ddd9953d9e305a
msgid ":ref:`sharding-shard-key` for information on choosing a sharded key. Also see :ref:`Shard Key Internals <sharding-internals-shard-keys>` (in particular, :ref:`sharding-internals-operations-and-reliability`)."
msgstr ""

