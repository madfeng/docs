# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-concern.txt:7
# edd2cec04d3743739d722e01f6301a7d
msgid "Write Concern"
msgstr ""

#: ../source/includes/introduction-write-concern.rst:1
# de284460682f4083926cfab7d8c8fe00
msgid ":term:`Write concern` describes the guarantee that MongoDB provides when reporting on the success of a write operation. The strength of the write concerns determine the level of guarantee. When inserts, updates and deletes have a *weak* write concern, write operations return quickly. In some failure cases, write operations issued with weak write concerns may not persist. With *stronger* write concerns, clients wait after sending a write operation for MongoDB to confirm the write operations."
msgstr ""

#: ../source/includes/introduction-write-concern.rst:10
# e0c53ca217c3485ba98fccbce2b9fe6a
msgid "MongoDB provides different levels of write concern to better address the specific needs of applications. Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment. For other less critical operations, clients can adjust the write concern to ensure faster performance rather than ensure persistence to the entire deployment."
msgstr ""

#: ../source/core/write-concern.txt:13
# 0df33695547841ae98dc6f59905ef8a7
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concern with the write operations."
msgstr ""

#: ../source/core/write-concern.txt:18
# d7b110e025b74eb3a84c35304510f003
msgid "For details on write concern configurations, see :doc:`/reference/write-concern`."
msgstr ""

#: ../source/core/write-concern.txt:22
# a20380fbd81c423fa54122477ca0004f
msgid "Considerations"
msgstr ""

#: ../source/core/write-concern.txt:25
# 5b05d5e09d5644268eba01173a5ae63f
msgid "Default Write Concern"
msgstr ""

#: ../source/core/write-concern.txt:27
# 905602372a3f41a4a4c93624387b8ea3
msgid "The :program:`mongo` shell and the MongoDB drivers use :ref:`write-concern-acknowledged` as the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:30
# a476dd8031a1416a8c65253db8520ec3
msgid "See :ref:`write-concern-acknowledged` for more information, including when this write concern became the default."
msgstr ""

#: ../source/core/write-concern.txt:34
# 144086bd427a4643b7ed7d4a38864b47
msgid "Read Isolation"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
# d18c0df57e044d0e96a7769532d8b0cf
msgid "MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration. As a result, applications may observe two classes of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
# 4a5c00fb89534fd2b156bf43c9ce2337
msgid "For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
# 12a22a6211b14595908679c7520febc5
msgid "If the :program:`mongod` terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
# eb912406d5cf41068d3670e09271a6b6
msgid "Other database systems refer to these isolation semantics as *read uncommitted*. For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states. For multi-document operations, MongoDB does not provide any multi-document transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
# ad20bd385d794d479f3eb3041c6314ca
msgid "When :program:`mongod` returns a successful *journaled write concern*, the data is fully committed to disk and will be available after :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
# 27773d5e4c8e49488979e368a2033bb2
msgid "For replica sets, write operations are durable only after a write replicates and commits to the journal of a majority of the members of the set. MongoDB regularly commits data to the journal regardless of journaled write concern: use the :setting:`~storage.journal.commitIntervalMs` to control how often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/core/write-concern.txt:39
# 6421141fa0b245f8bbfc88515d917a0c
msgid "Timeouts"
msgstr ""

#: ../source/core/write-concern.txt:41
# e682b3b3f2954d8dbb26488d3c26cb55
msgid "Clients can set a :ref:`wtimeout <wc-wtimeout>` value as part of a :ref:`replica acknowledged <replica-set-write-concern>` write concern. If the write concern is not satisfied in the specified interval, the operation returns an error, even if the write concern will eventually succeed."
msgstr ""

#: ../source/core/write-concern.txt:47
# 092771594f9a4f2db49813bcf5277c7a
msgid "MongoDB does not \"rollback\" or undo modifications made before the ``wtimeout`` interval expired."
msgstr ""

#: ../source/core/write-concern.txt:51
# eb91d9609ec04a63a3e71d38ee7227f8
msgid "Write Concern Levels"
msgstr ""

#: ../source/core/write-concern.txt:53
# cabfc271524a48a3a5bd3d2c3fcb87a0
msgid "MongoDB has the following levels of conceptual write concern, listed from weakest to strongest:"
msgstr ""

#: ../source/core/write-concern.txt:59
# bff949778dad46c88a6f0464c8a0410e
msgid "Unacknowledged"
msgstr ""

#: ../source/core/write-concern.txt:61
# fe68aabf7e514aeaa1bcfc2a180c35b2
msgid "With an *unacknowledged* write concern, MongoDB does not acknowledge the receipt of write operations. *Unacknowledged* is similar to *errors ignored*; however, drivers will attempt to receive and handle network errors when possible. The driver's ability to detect network errors depends on the system's networking configuration."
msgstr ""

#: ../source/core/write-concern.txt:67
# b7443e3b54dd4df184907c6eebaec905
msgid "Before the releases outlined in :ref:`driver-write-concern-change`, this was the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:75
# ffb951b2ddf84cc4902826b658f0c2fd
msgid "Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:77
# 4e10557ce44c4047b1f85f7d9de3b84f
msgid "With a receipt *acknowledged* write concern, the :program:`mongod` confirms the receipt of the write operation. *Acknowledged* write concern allows clients to catch network, duplicate key, and other errors."
msgstr ""

#: ../source/core/write-concern.txt:82
# 026fb6487908415ab1828c94f88f2d90
msgid "MongoDB uses the *acknowledged* write concern by default starting in the driver releases outlined in :ref:`write-concern-change-releases`."
msgstr ""

#: ../source/core/write-concern.txt:85
# 71e6110d18d74550bb653cdb3c5dd019
msgid "The :program:`mongo` shell write methods now incorporates the :doc:`write concern </core/write-concern>` in the write methods and provide the default write concern whether run interactively or in a script. See :ref:`write-methods-incompatibility` for details."
msgstr ""

#: ../source/core/write-concern.txt:96
# a7d5f12a85c5436f9a78b7ac591cbc8c
msgid "Journaled"
msgstr ""

#: ../source/core/write-concern.txt:98
# a4613f4aaa73493d9e5cc9aedd056d96
msgid "With a *journaled* write concern, the MongoDB acknowledges the write operation only after committing the data to the :term:`journal`. This write concern ensures that MongoDB can recover the data following a shutdown or power interruption."
msgstr ""

#: ../source/core/write-concern.txt:103
# 3f5e7017c02a4597b940869d4b93a792
msgid "You must have journaling enabled to use this write concern."
msgstr ""

#: ../source/core/write-concern.txt:105
# e5630104ab1440469b5411a6559e6994
msgid "With a *journaled* write concern, write operations must wait for the next journal commit. To reduce latency for these operations, MongoDB also increases the frequency that it commits operations to the journal. See :setting:`~storage.journal.commitIntervalMs` for more information."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
#: ../source/includes/note-write-concern-journaled-replication.rst:1
# 1e77d60bb4b24e5db78db30d215c7c4d
# 237e4de27b4d415aa0b665ea5cd1bebd
msgid "Requiring *journaled* write concern in a replica set only requires a journal commit of the write operation to the :term:`primary` of the set regardless of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/core/write-concern.txt:118
# ffc58efb55ea42bab620f14bdfd0a959
msgid "Replica Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:120
# 9c35158b5945486c87d28b17165ea7f2
msgid ":term:`Replica sets <replica set>` present additional considerations with regards to write concern.. The default write concern only requires acknowledgement from the primary."
msgstr ""

#: ../source/core/write-concern.txt:124
# 3c55f1ae375848508779c53ce9a083e4
msgid "With *replica acknowledged* write concern, you can guarantee that the write operation propagates to additional members of the replica set. See :doc:`Write Concern for Replica Sets <replica-set-write-concern>` for more information."
msgstr ""

#: ../source/core/write-concern.txt:133
# 258fe5ea7dc944b3af16cbdd16489fb5
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/core/write-concern.txt:1
# 6ea952a4d8b340acb0c5526e59b96958
msgid "write concern"
msgstr ""

