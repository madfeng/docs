# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 16:33+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 9221871caacf4652981e41f12594cd6c
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:3
msgid "Getting Started with the ``mongo`` Shell"
msgstr ""

# 081c1c176b304944882072111f6a24d1
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:7
msgid ""
"This document provides a basic introduction to using the :program:`mongo` "
"shell. See :doc:`/installation` for instructions on installing MongoDB for "
"your system."
msgstr ""

# a8af66c84bc247dfa68e928d3b31072d
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:12
msgid "Start the ``mongo`` Shell"
msgstr ""

# 007df9f3f42e4000b8fba802ef99d858
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:14
msgid ""
"To start the :program:`mongo` shell and connect to your :doc:`MongoDB "
"</reference/program/mongod>` instance running on **localhost** with "
"**default port**:"
msgstr ""

# 5f310bc2fad04d3e850e03a13c762bd8
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:17
msgid "Go to your ``<mongodb installation dir>``:"
msgstr ""

# 70becaaa4f93419bb8524c1078e15ca4
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:23
msgid "Type ``./bin/mongo`` to start :program:`mongo`:"
msgstr ""

# 0341392f8723493e94ec4265e2a287aa
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:29
msgid ""
"If you have added the ``<mongodb installation dir>/bin`` to the ``PATH`` "
"environment variable, you can just type ``mongo`` instead of "
"``./bin/mongo``."
msgstr ""

# 01683800580c4accb13b855e62f3a570
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:33
msgid "To display the database you are using, type ``db``:"
msgstr ""

# 5258c9b50b994672b0dfc968e48567dd
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:39
msgid ""
"The operation should return ``test``, which is the default database. To "
"switch databases, issue the ``use <db>`` helper, as in the following "
"example:"
msgstr ""

# b25680ca4be54beabd0da0a0ff7f7ebc
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:47
msgid ""
"To list the available databases, use the helper ``show dbs``. See also :ref"
":`mongo-shell-getSiblingDB` to access a different database from the current "
"database without switching your current database context (i.e. ``db.``.)"
msgstr ""

# 4cf31f46b07a4840bb2f955d1d3bdb2c
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:52
msgid ""
"To start the :program:`mongo` shell with other options, see :ref:`examples "
"of starting up mongo <mongo-usage-examples>` and :doc:`mongo reference "
"</reference/program/mongo>` which provides details on the available options."
msgstr ""

# e20d56ab3c134371a68b489c4cf62024
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:73
msgid "Executing Queries"
msgstr ""

# 6c20b93acde34e8d8344807f7df49608
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:75
msgid ""
"From the :program:`mongo` shell, you can use the :doc:`shell methods "
"</reference/method>` to run queries, as in the following example:"
msgstr ""

# faced761a26949cfa70363658c5dca29
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:82
msgid "The ``db`` refers to the current database."
msgstr ""

# eda8d3ca25d64df1b92df0cfcb57a9e9
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:84
msgid ""
"The ``<collection>`` is the name of the collection to query. See :ref"
":`mongo-shell-help-collection` to list the available collections."
msgstr ""

# e59bd4ecc37e49209a4c0e98bfef7976
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:87
msgid ""
"If the :program:`mongo` shell does not accept the name of the collection, "
"for instance if the name contains a space, hyphen, or starts with a number, "
"you can use an alternate syntax to refer to the collection, as in the "
"following:"
msgstr ""

# e82c5cf75e934ae6bf4268b9e7be1374
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:98
msgid ""
"The :method:`~db.collection.find()` method is the JavaScript method to "
"retrieve documents from ``<collection>``. The "
":method:`~db.collection.find()` method returns a :term:`cursor` to the "
"results; however, in the :program:`mongo` shell, if the returned cursor is "
"not assigned to a variable using the ``var`` keyword, then the cursor is "
"automatically iterated up to 20 times to print up to the first 20 documents "
"that match the query. The :program:`mongo` shell will prompt ``Type it`` to "
"iterate another 20 times."
msgstr ""

# 2dc6a969a67a44539f5a4c97d6ab1ea7
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:108
msgid ""
"You can set the ``DBQuery.shellBatchSize`` attribute to change the number of"
" iteration from the default value ``20``, as in the following example which "
"sets it to ``10``:"
msgstr ""

# d0599a1ebf9644e1bea0c7681b38cb3c
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:116
msgid ""
"For more information and examples on cursor handling in the :program:`mongo`"
" shell, see :doc:`/core/cursors`."
msgstr ""

# 43b3355f1b2d46b9bf00a584a8a7831d
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:119
msgid ""
"See also :ref:`mongo-shell-help-cursor` for list of cursor help in the "
":program:`mongo` shell."
msgstr ""

# 97edc1df6dd1468282f01de4b44cad92
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:122
msgid ""
"For more documentation of basic MongoDB operations in the :program:`mongo` "
"shell, see:"
msgstr ""

# b6418bf237c14eac8f68e574b1560d39
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:125
msgid ":doc:`/tutorial/getting-started`"
msgstr ""

# 9c77db55bdad4e949d7a8a1e0973d517
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:126
msgid ":doc:`/reference/mongo-shell`"
msgstr ""

# 4099bf736c964c248f779349ad9d30b1
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:127
msgid ":doc:`/core/read-operations`"
msgstr ""

# de4ac9da6d9c4398af979efd7f1db9bb
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:128
msgid ":doc:`/core/write-operations`"
msgstr ""

# d456079199e143908916d8bf3dc901ee
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:129
msgid ":doc:`/administration/indexes`"
msgstr ""

# ff4ce31cf73047c784dd175f69b50b73
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:134
msgid "Print"
msgstr ""

# e626c99f34a6498584a9d10ef1d381e7
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:136
msgid ""
"The :program:`mongo` shell automatically prints the results of the "
":method:`~db.collection.find()` method if the returned cursor is not "
"assigned to a variable using the ``var`` keyword. To format the result, you "
"can add the ``.pretty()`` to the operation, as in the following:"
msgstr ""

# d52b09d04c4749d287eff5eacf979439
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:146
msgid ""
"In addition, you can use the following explicit print methods in the "
":program:`mongo` shell:"
msgstr ""

# 4bd54528850c4ccfa9666b9242a7fe8f
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:149
msgid "``print()`` to print without formatting"
msgstr ""

# aa2f9b8592dd436bb3cce1f22747f02c
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:151
msgid ""
"``print(tojson(<obj>))`` to print with :term:`JSON` formatting and "
"equivalent to ``printjson()``"
msgstr ""

# 09fa1f5c02984de2b669f53d501d130e
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:154
msgid ""
"``printjson()`` to print with :term:`JSON` formatting and equivalent to "
"``print(tojson(<obj>))``"
msgstr ""

# 9e0b98f256494f6fa5e65ae528328e37
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:158
msgid "Evaluate a JavaScript File"
msgstr ""

# 8c94bf770b304727a21d5ad16ca12e58
#: ../source/includes/fact-execute-javascript-from-shell.rst:1
msgid ""
"You can execute a ``.js`` file from within the :program:`mongo` shell, using"
" the :method:`load()` function, as in the following:"
msgstr ""

# 769afe707ee046ab8c741913bd11cec3
#: ../source/includes/fact-execute-javascript-from-shell.rst:8
msgid "This function loads and executes the :file:`myjstest.js` file."
msgstr ""

# 91fa79c353ca45b69980bbac836452dc
#: ../source/includes/fact-execute-javascript-from-shell.rst:10
msgid ""
"The :method:`load()` method accepts relative and absolute paths. If the "
"current working directory of the :program:`mongo` shell is :file:`/data/db`,"
" and the :file:`myjstest.js` resides in the :file:`/data/db/scripts` "
"directory, then the following calls within the :program:`mongo` shell would "
"be equivalent:"
msgstr ""

# 71385096821e4225a9eac812587b986c
#: ../source/includes/fact-execute-javascript-from-shell.rst:21
msgid ""
"There is no search path for the :method:`load()` function. If the desired "
"script is not in the current working directory or the full specified path, "
":program:`mongo` will not be able to access the file."
msgstr ""

# 12b8fb4663aa4bd9a9f4a0c11970cf51
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:163
msgid "Use a Custom Prompt"
msgstr ""

# d3aebb9e4e4e43f68d6073627b8b0a30
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:165
msgid ""
"You may modify the content of the prompt by creating the variable ``prompt``"
" in the shell. The prompt variable can hold strings as well as any arbitrary"
" JavaScript. If ``prompt`` holds a function that returns a string, "
":program:`mongo` can display dynamic information in each prompt. Consider "
"the following examples:"
msgstr ""

# 3bf22e49d5d5482e88869cf488189f9b
# d143f5ab484d4d16a54db17996e248b0
# 182fb0a69bb04d41a13f6f8eca2ff96c
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:0
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:0
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:0
msgid "Example"
msgstr ""

# 1f2bfb396c10431883e521200a7a1274
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:173
msgid ""
"Create a prompt with the number of operations issued in the current session,"
" define the following variables:"
msgstr ""

# 3bff194206ef43318503f7c80f124687
# ae5f8536e4a5451cbb84f62550d340d1
# 58b71d970a35468c80e9f49ebf46c0f1
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:183
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:204
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:224
msgid "The prompt would then resemble the following:"
msgstr ""

# b27bc93580134d579f1418319620767a
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:193
msgid ""
"To create a :program:`mongo` shell prompt in the form of "
"``<database>@<hostname>$`` define the following variables:"
msgstr ""

# 9cd7838ad5714b95aff2c6bd70eb9d5d
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:214
msgid ""
"To create a :program:`mongo` shell prompt that contains the system up time "
"*and* the number of documents in the current database, define the following "
"prompt variable:"
msgstr ""

# bdcd7780953c4875ba965ac7343f464d
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:232
msgid "Use an External Editor in the ``mongo`` Shell"
msgstr ""

# f61670800c1d4ceea418bf98bf0efd6b
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:236
msgid ""
"In the :program:`mongo` shell you can use the ``edit`` operation to edit a "
"function or variable in an external editor. The ``edit`` operation uses the "
"value of your environments ``EDITOR`` variable."
msgstr ""

# f58cad24ef254b8286ec1026bbe286b0
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:240
msgid ""
"At your system prompt you can define the ``EDITOR`` variable and start "
":program:`mongo` with the following two operations:"
msgstr ""

# 9a72e74a0b464efab586d1084ca9a69e
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:248
msgid "Then, consider the following example shell session:"
msgstr ""

# a84f75037a024ae691e1a6310e002bda
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:270
msgid ""
"As :program:`mongo` shell interprets code edited in an external editor, it "
"may modify code in functions, depending on the JavaScript compiler. For "
":program:`mongo` may convert ``1+1`` to ``2`` or remove comments. The actual"
" changes affect only the appearance of the code and will vary based on the "
"version of JavaScript used but will not affect the semantics of the code."
msgstr ""

# e7c1c741092d497895e3d62faffb6e91
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:280
msgid "Exit the Shell"
msgstr ""

# a70bbcae2c3f49d9885dcae5c4f78992
#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:282
msgid "To exit the shell, type ``quit()`` or use the ``<Ctrl-c>`` shortcut."
msgstr ""

#: ../source/tutorial/getting-started-with-the-mongo-shell.txt:59
msgid ""
"When starting, :program:`mongo` checks the user's :envvar:`HOME` directory "
"for a JavaScript file named :ref:`.mongorc.js <mongo-mongorc-file>`. If "
"found, :program:`mongo` interprets the content of :file:`.mongorc.js` before"
" displaying the prompt for the first time. If you use the shell to evaluate "
"a JavaScript file or expression, either by using the :option:`--eval <mongo "
"--eval>` option on the command line or by specifying :ref:`a .js file to "
"mongo <mongo-shell-file>`, :program:`mongo` will read the ``.mongorc.js`` "
"file *after* the JavaScript has finished processing. You can prevent "
"``.mongorc.js`` from being loaded by using the :option:`--norc` option."
msgstr ""

#~ msgid ""
#~ "When starting, :program:`mongo` checks the user's :envvar:`HOME` directory "
#~ "for a JavaScript file named :ref:`.mongorc.js <mongo-mongorc-file>`. If "
#~ "found, :program:`mongo` interprets the content of :file:`.mongorc.js` before"
#~ " displaying the prompt for the first time. If you use the shell to evaluate "
#~ "a JavaScript file or expression, either by using the :option:`--eval <mongo "
#~ "--eval>` option on the command line or by specifying :ref:`a .js file to "
#~ "mongo <mongo-shell-file>`, :program:`mongo` will read the ``.mongorc.js`` "
#~ "file *after* the JavaScript has finished processing."
#~ msgstr ""
