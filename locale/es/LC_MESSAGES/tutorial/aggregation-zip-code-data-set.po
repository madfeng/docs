# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 18:38+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# e9956afd3e0d4416b6456397d262a3a1
#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

# a0be0d0054954447aedb6ffcf2286394
#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
msgid ""
"The examples in this document use the ``zipcode`` collection. This "
"collection is available at: `media.mongodb.org/zips.json "
"<http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load "
"this data set into your :program:`mongod` instance."
msgstr ""

# 37fbd2a7e3a740ad9c03cf1fa8801a5b
#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
msgid "Data Model"
msgstr ""

# 8a0b1ec0df19416f867a87be3c930ea5
#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
msgid "Each document in the ``zipcode`` collection has the following form:"
msgstr ""

# 265f2aab9b734e03a11c20bcf7f422fe
#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

# dbcf142e2d734c1089b3e7397a89f75a
#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

# d2cb5da4b8fd49ce8645300930b69b6f
#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
msgid "The ``pop`` field holds the population."
msgstr ""

# affec9e61b234b65bfa7b09b6512fe6e
#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

# 710810ece5ae49b5b70246bb5fc8c95c
#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
msgid ""
"All of the following examples use the :method:`aggregate() "
"<db.collection.aggregate()>` helper in the :program:`mongo` shell. "
":method:`aggregate() <db.collection.aggregate()>` provides a wrapper around "
"the :dbcommand:`aggregate` database command. See the documentation for your "
":doc:`driver </applications/drivers>` for a more idiomatic interface for "
"data aggregation operations."
msgstr ""

# a4ba34de26a54a3db580ff754e4f9a7c
#: ../source/tutorial/aggregation-zip-code-data-set.txt:50
msgid "Return States with Populations above 10 Million"
msgstr ""

# a2704525b1a84939aa3953e3c21f097f
#: ../source/tutorial/aggregation-zip-code-data-set.txt:52
msgid ""
"To return all states with a population greater than 10 million, use the "
"following aggregation operation:"
msgstr ""

# 5cdd1f260851456a9846136ab7188e34
#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
msgid ""
"Aggregations operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` "
"connects a number of :ref:`pipeline <aggregation-pipeline>` operators, which"
" define the aggregation process."
msgstr ""

# f03d111121f84cb2a838541a3796f074
# ab85437b112f4e84aeac57203d0a8239
#: ../source/tutorial/aggregation-zip-code-data-set.txt:69
#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
msgid ""
"In this example, the pipeline passes all documents in the ``zipcodes`` "
"collection through the following steps:"
msgstr ""

# 0f01929d3ff24a66a20f53905505b13c
#: ../source/tutorial/aggregation-zip-code-data-set.txt:72
msgid ""
"the :pipeline:`$group` operator collects all documents and creates documents"
" for each state."
msgstr ""

# d292e8879efa4f2193b6842be1f1668e
#: ../source/tutorial/aggregation-zip-code-data-set.txt:75
msgid ""
"These new per-state documents have one field in addition to the ``_id`` "
"field: ``totalPop`` which is a generated field using the :group:`$sum` "
"operation to calculate the total value of all ``pop`` fields in the source "
"documents."
msgstr ""

# caf611256e6c41bd861bc5c85b56754d
#: ../source/tutorial/aggregation-zip-code-data-set.txt:80
msgid ""
"After the :pipeline:`$group` operation the documents in the pipeline "
"resemble the following:"
msgstr ""

# d857ef6cebb54cc48eb82faf7e00f39e
#: ../source/tutorial/aggregation-zip-code-data-set.txt:90
msgid ""
"the :pipeline:`$match` operation filters these documents so that the only "
"documents that remain are those where the value of ``totalPop`` is greater "
"than or equal to 10 million."
msgstr ""

# 2a714f59b249456798c25d1e6afe4684
#: ../source/tutorial/aggregation-zip-code-data-set.txt:94
msgid ""
"The :pipeline:`$match` operation does not alter the documents, which have "
"the same format as the documents output by :pipeline:`$group`."
msgstr ""

# e172e6b3619d43a09f8198f8a8081212
#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
msgid "The equivalent :term:`SQL` for this operation is:"
msgstr ""

# 066a2d6e948641a597317b686b5eab99
#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
msgid "Return Average City Population by State"
msgstr ""

# decbec20e19746c78b7580a2424fd531
#: ../source/tutorial/aggregation-zip-code-data-set.txt:110
msgid ""
"To return the average populations for cities in each state, use the "
"following aggregation operation:"
msgstr ""

# b364966ef50849eb8469904e6d7e5e86
#: ../source/tutorial/aggregation-zip-code-data-set.txt:120
msgid ""
"Aggregations operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>`  "
"connects a number of :ref:`pipeline <aggregation-pipeline>` operators that "
"define the aggregation process."
msgstr ""

# 608f8afc84bd4c65bfc28857cb8b7d8b
#: ../source/tutorial/aggregation-zip-code-data-set.txt:136
msgid ""
"After this stage in the pipeline, the documents resemble the following:"
msgstr ""

# ffc823b80152467e9ee2de252e294ffa
#: ../source/tutorial/aggregation-zip-code-data-set.txt:149
msgid ""
"the second :pipeline:`$group` operator collects documents by the ``state`` "
"field and use the :group:`$avg` expression to compute a value for the "
"``avgCityPop`` field."
msgstr ""

# 4b5b81ebeece4b43b96b8adfaa48a59d
#: ../source/tutorial/aggregation-zip-code-data-set.txt:153
msgid "The final output of this aggregation operation is:"
msgstr ""

# 782dc73a31254593bb29ec78c7b4ccf8
#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
msgid "Return Largest and Smallest Cities by State"
msgstr ""

# f7d287c2f0ed4537a855a129fb8ccde5
#: ../source/tutorial/aggregation-zip-code-data-set.txt:172
msgid ""
"To return the smallest and largest cities by population for each state, use "
"the following aggregation operation:"
msgstr ""

# 547a8cafb266439eaf068ebf372e92d6
#: ../source/tutorial/aggregation-zip-code-data-set.txt:197
msgid ""
"Aggregation operations using the :method:`aggregate() "
"<db.collection.aggregate()>` helper process all documents in the "
"``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` "
"combines a number of :ref:`pipeline <aggregation-pipeline>` operators that "
"define the aggregation process."
msgstr ""

# 9ff0fbfd0e4545919ca1838fc11c5858
#: ../source/tutorial/aggregation-zip-code-data-set.txt:204
msgid ""
"All documents from the ``zipcodes`` collection pass into the pipeline, which"
" consists of the following steps:"
msgstr ""

# 1bc27fb90cb54b57b734d7fce417b3c1
#: ../source/tutorial/aggregation-zip-code-data-set.txt:207
msgid ""
"the :pipeline:`$group` operator collects all documents and creates new "
"documents for every combination of the ``city`` and ``state`` fields in the "
"source documents."
msgstr ""

# cdce025d69a04443a823d17f90251df1
#: ../source/tutorial/aggregation-zip-code-data-set.txt:211
msgid ""
"By specifying the value of ``_id`` as a sub-document that contains both "
"fields, the operation preserves the ``state`` field for use later in the "
"pipeline. The documents produced by this stage of the pipeline have a second"
" field, ``pop``, which uses the :group:`$sum` operator to provide the total "
"of the ``pop`` fields in the source document."
msgstr ""

# 98145340bf7346ca85ff26a136a18c7f
#: ../source/tutorial/aggregation-zip-code-data-set.txt:218
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

# 4e15401aef084d8a868475c53c432fd9
#: ../source/tutorial/aggregation-zip-code-data-set.txt:234
msgid ""
"the second :pipeline:`$group` operator collects the documents in the "
"pipeline by the ``state`` field, which is a field inside the nested ``_id`` "
"document."
msgstr ""

# 08580918b389464c895548dd1142bf56
#: ../source/tutorial/aggregation-zip-code-data-set.txt:238
msgid ""
"Within each per-state document this :pipeline:`$group` operator specifies "
"four fields: Using the :group:`$last` expression, the :pipeline:`$group` "
"operator creates the ``biggestcity`` and ``biggestpop`` fields that store "
"the city with the largest population and that population. Using the "
":group:`$first` expression, the :pipeline:`$group` operator creates the "
"``smallestcity`` and ``smallestpop`` fields that store the city with the "
"smallest population and that population."
msgstr ""

# c439317a4bc24a709b327f55c273c6cb
#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
msgid "The documents, at this stage in the pipeline resemble the following:"
msgstr ""

# fcbb3c7ed4394843ad819e2390485dd6
#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
msgid ""
"The final operation is :pipeline:`$project`, which renames the ``_id`` field"
" to ``state`` and moves the ``biggestCity``, ``biggestPop``, "
"``smallestCity``, and ``smallestPop`` into ``biggestCity`` and "
"``smallestCity`` sub-documents."
msgstr ""

# c3b77af3e94e4943b70bb718feeda23c
#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
msgid "The output of this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
msgid ""
"The ``city`` field holds the city name. A city can have more than one zip "
"code associated with it as different sections of the city can each have a "
"different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:130
msgid ""
"the :pipeline:`$group` operator collects all documents and creates new "
"documents for every combination of the ``city`` and ``state`` fields in the "
"source document. A city can have more than one zip code associated with it "
"as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:230
msgid ""
":pipeline:`$sort` operator orders the documents in the pipeline based on the"
" value of the ``pop`` field from largest to smallest. This operation does "
"not alter the documents."
msgstr ""

#~ msgid "The ``city`` field holds the city."
#~ msgstr ""

#~ msgid ""
#~ "the :pipeline:`$group` operator collects all documents and creates new "
#~ "documents for every combination of the ``city`` and ``state`` fields in the "
#~ "source document."
#~ msgstr ""

#~ msgid ""
#~ ":pipeline:`$sort` operator orders the documents in the pipeline based on the"
#~ " vale of the ``pop`` field from largest to smallest. This operation does not"
#~ " alter the documents."
#~ msgstr ""
