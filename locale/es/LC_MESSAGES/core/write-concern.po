# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 19:30+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# ef0ffb60095c43a0a703eae3161a7c68
#: ../source/core/write-concern.txt:7
msgid "Write Concern"
msgstr ""

# ece8085cf3fb45a29f913308034d798d
#: ../source/includes/introduction-write-concern.rst:1
msgid ""
":term:`Write concern` describes the guarantee that MongoDB provides when "
"reporting on the success of a write operation. The strength of the write "
"concerns determine the level of guarantee. When inserts, updates and deletes"
" have a *weak* write concern, write operations return quickly. In some "
"failure cases, write operations issued with weak write concerns may not "
"persist. With *stronger* write concerns, clients wait after sending a write "
"operation for MongoDB to confirm the write operations."
msgstr ""

# 2d47343ec23d48118b44f1126fcbb4b9
#: ../source/includes/introduction-write-concern.rst:10
msgid ""
"MongoDB provides different levels of write concern to better address the "
"specific needs of applications. Clients may adjust write concern to ensure "
"that the most important operations persist successfully to an entire MongoDB"
" deployment. For other less critical operations, clients can adjust the "
"write concern to ensure faster performance rather than ensure persistence to"
" the entire deployment."
msgstr ""

# 070c151028004d108de1eb96f64158f9
#: ../source/core/write-concern.txt:22
msgid "Considerations"
msgstr ""

# 496ce45bb8c2467db1f80318bc2ccfe0
#: ../source/core/write-concern.txt:25
msgid "Default Write Concern"
msgstr ""

# 4b69db1d4d5e454f8bcab5a97d86275b
#: ../source/core/write-concern.txt:34
msgid "Read Isolation"
msgstr ""

# 87f495b684a04d7d90b63ba8447f137e
#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr ""

# 6d7a06c663e6403081549c3cc2682223
#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr ""

# e939094fa1ca46d09a12f2e5547aa76e
#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""

# 6751bd06f0054681a4ac7adba612ca6a
#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr ""

# 0174a290e85e4a7cb3d76f60668bb5da
#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr ""

# d68b5b8b80c542b19b41cce57e9de9a7
#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr ""

# 2e614a6e3d924765b4bd1ad349862f59
#: ../source/core/write-concern.txt:51
msgid "Write Concern Levels"
msgstr ""

# 01dbad2f1bab43cdabba7ef125a93e3e
#: ../source/core/write-concern.txt:59
msgid "Unacknowledged"
msgstr ""

# d9578ba7047b47acad3b7091e4bec3a5
#: ../source/core/write-concern.txt:67
msgid ""
"Before the releases outlined in :ref:`driver-write-concern-change`, this was"
" the default write concern."
msgstr ""

# 4ebd5c2a5c6e4fa9af0f23ea107f4f8b
#: ../source/core/write-concern.txt:75
msgid "Acknowledged"
msgstr ""

# 9aef8ff0b31040d2b71a5d3732a2cc8a
#: ../source/core/write-concern.txt:77
msgid ""
"With a receipt *acknowledged* write concern, the :program:`mongod` confirms "
"the receipt of the write operation. *Acknowledged* write concern allows "
"clients to catch network, duplicate key, and other errors."
msgstr ""

# 8b6a520d0d1a45b08682682a85a62516
#: ../source/core/write-concern.txt:96
msgid "Journaled"
msgstr ""

# caabf6e53ce8494b9ea600c588d29582
#: ../source/core/write-concern.txt:105
msgid ""
"With a *journaled* write concern, write operations must wait for the next "
"journal commit. To reduce latency for these operations, MongoDB also "
"increases the frequency that it commits operations to the journal. See "
":setting:`~storage.journal.commitIntervalMs` for more information."
msgstr ""

# a6bbf283b72a4d09a8d443ef5f5b576a
# e7e7dd5921024de885121747eb37a408
#: ../source/includes/note-write-concern-journaled-replication.rst:1
#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"Requiring *journaled* write concern in a replica set only requires a journal"
" commit of the write operation to the :term:`primary` of the set regardless "
"of the level of *replica acknowledged* write concern."
msgstr ""

# b47db96fce324a9d9cbc957ae44156a6
#: ../source/core/write-concern.txt:118
msgid "Replica Acknowledged"
msgstr ""

# 4f67a4ccb91f4c35b42893d10b00e2fb
#: ../source/core/write-concern.txt:1
msgid "write concern"
msgstr ""

#: ../source/core/write-concern.txt:13
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concern with the write operations."
msgstr ""

#: ../source/core/write-concern.txt:18
msgid ""
"For details on write concern configurations, see :doc:`/reference/write-"
"concern`."
msgstr ""

#: ../source/core/write-concern.txt:27
msgid ""
"The :program:`mongo` shell and the MongoDB drivers use :ref:`write-concern-"
"acknowledged` as the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:30
msgid ""
"See :ref:`write-concern-acknowledged` for more information, including when "
"this write concern became the default."
msgstr ""

#: ../source/core/write-concern.txt:39
msgid "Timeouts"
msgstr ""

#: ../source/core/write-concern.txt:41
msgid ""
"Clients can set a :ref:`wtimeout <wc-wtimeout>` value as part of a "
":ref:`replica acknowledged <replica-set-write-concern>` write concern. If "
"the write concern is not satisfied in the specified interval, the operation "
"returns an error, even if the write concern will eventually succeed."
msgstr ""

#: ../source/core/write-concern.txt:47
msgid ""
"MongoDB does not \"rollback\" or undo modifications made before the "
"``wtimeout`` interval expired."
msgstr ""

#: ../source/core/write-concern.txt:53
msgid ""
"MongoDB has the following levels of conceptual write concern, listed from "
"weakest to strongest:"
msgstr ""

#: ../source/core/write-concern.txt:61
msgid ""
"With an *unacknowledged* write concern, MongoDB does not acknowledge the "
"receipt of write operations. *Unacknowledged* is similar to *errors "
"ignored*; however, drivers will attempt to receive and handle network errors"
" when possible. The driver's ability to detect network errors depends on the"
" system's networking configuration."
msgstr ""

#: ../source/core/write-concern.txt:82
msgid ""
"MongoDB uses the *acknowledged* write concern by default starting in the "
"driver releases outlined in :ref:`write-concern-change-releases`."
msgstr ""

#: ../source/core/write-concern.txt:85
msgid ""
"The :program:`mongo` shell write methods now incorporates the :doc:`write "
"concern </core/write-concern>` in the write methods and provide the default "
"write concern whether run interactively or in a script. See :ref:`write-"
"methods-incompatibility` for details."
msgstr ""

#: ../source/core/write-concern.txt:98
msgid ""
"With a *journaled* write concern, the MongoDB acknowledges the write "
"operation only after committing the data to the :term:`journal`. This write "
"concern ensures that MongoDB can recover the data following a shutdown or "
"power interruption."
msgstr ""

#: ../source/core/write-concern.txt:103
msgid "You must have journaling enabled to use this write concern."
msgstr ""

#: ../source/core/write-concern.txt:120
msgid ""
":term:`Replica sets <replica set>` present additional considerations with "
"regards to write concern.. The default write concern only requires "
"acknowledgement from the primary."
msgstr ""

#: ../source/core/write-concern.txt:124
msgid ""
"With *replica acknowledged* write concern, you can guarantee that the write "
"operation propagates to additional members of the replica set. See "
":doc:`Write Concern for Replica Sets <replica-set-write-concern>` for more "
"information."
msgstr ""

#: ../source/core/write-concern.txt:133
msgid ":doc:`/reference/write-concern`"
msgstr ""

#~ msgid ""
#~ ":doc:`/reference/write-concern` for a reference of specific write concern "
#~ "configuration. Also consider :doc:`/core/write-operations` for a general "
#~ "overview of write operations with MongoDB and :doc:`/core/replica-set-write-"
#~ "concern` for considerations specific to replica sets."
#~ msgstr ""

#~ msgid ""
#~ "The :doc:`driver write concern </release-notes/drivers-write-concern>` "
#~ "change created a new connection class in all of the MongoDB drivers. The new"
#~ " class, called ``MongoClient`` changes the default write concern. See the "
#~ ":doc:`release notes </release-notes/drivers-write-concern>` for this change "
#~ "and the release notes for your driver."
#~ msgstr ""

#~ msgid ""
#~ "Clients issue write operations with some level of :term:`write concern`.  "
#~ "MongoDB has the following levels of conceptual write concern, listed from "
#~ "weakest to strongest:"
#~ msgstr ""

#~ msgid ""
#~ "With an *unacknowledged* write concern, MongoDB does not acknowledge the "
#~ "receipt of write operation. *Unacknowledged* is similar to *errors ignored*;"
#~ " however, drivers attempt to receive and handle network errors when "
#~ "possible. The driver's ability to detect network errors depends on the "
#~ "system's networking configuration."
#~ msgstr ""

#~ msgid ""
#~ "To set *unacknowledged* write concern, specify ``w`` values of ``0`` to your"
#~ " driver."
#~ msgstr ""

#~ msgid ""
#~ "To set *acknowledged* write concern, specify ``w`` values of ``1`` to your "
#~ "driver."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB uses *acknowledged* write concern by default, after the releases "
#~ "outlined in :ref:`driver-write-concern-change`."
#~ msgstr ""

#~ msgid ""
#~ "Internally, the default write concern calls :dbcommand:`getLastError` with "
#~ "no arguments. For replica sets, you can define the default write concern "
#~ "settings in the :data:`~local.system.replset.settings.getLastErrorDefaults`."
#~ " When :data:`~local.system.replset.settings.getLastErrorDefaults` does not "
#~ "define a default write concern setting, :dbcommand:`getLastError` defaults "
#~ "to basic receipt acknowledgment."
#~ msgstr ""

#~ msgid ""
#~ "With a *journaled* write concern, the :program:`mongod` acknowledges the "
#~ "write operation only after committing the data to the :term:`journal`. This "
#~ "write concern ensures that MongoDB can recover the data following a shutdown"
#~ " or power interruption."
#~ msgstr ""

#~ msgid ""
#~ "To set a *journaled* write concern, specify ``w`` values of ``1`` and set "
#~ "the ``journal`` or ``j`` option to ``true`` for your driver. You must have "
#~ "journaling enabled to use this write concern."
#~ msgstr ""

#~ msgid ""
#~ ":term:`Replica sets <replica set>` add several considerations for write "
#~ "concern. Basic write concerns affect write operations on only one "
#~ ":program:`mongod` instance. The ``w`` argument to :dbcommand:`getLastError` "
#~ "provides *replica acknowledged* write concerns. With *replica acknowledged* "
#~ "you can guarantee that the write operation propagates to the members of a "
#~ "replica set. See :doc:`/reference/write-concern` document for the values for"
#~ " ``w`` and :doc:`Write Concern for Replica Sets <replica-set-write-concern>`"
#~ " for more information."
#~ msgstr ""

#~ msgid ""
#~ "To set *replica acknowledged* write concern, specify ``w`` values greater "
#~ "than ``1`` to your driver."
#~ msgstr ""
