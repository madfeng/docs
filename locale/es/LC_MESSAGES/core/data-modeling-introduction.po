# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 19:26+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# a6bc514fd3ce46a3a22120950844be1e
#: ../source/core/data-modeling-introduction.txt:3
msgid "Data Modeling Introduction"
msgstr ""

# f7a3ca17e54347a1bfdd670f1a35b9ad
#: ../source/core/data-modeling-introduction.txt:7
msgid ""
"Data in MongoDB has a *flexible schema*. Unlike SQL databases, where you "
"must determine and declare a table's schema before inserting data, MongoDB's"
" :term:`collections <collection>` do not enforce :term:`document` structure."
" This flexibility facilitates the mapping of documents to an entity or an "
"object. Each document can match the data fields of the represented entity, "
"even if the data has substantial variation. In practice, however, the "
"documents in a collection share a similar structure."
msgstr ""

# 1c437ea0e41246d3b2d03d509f6dae69
#: ../source/core/data-modeling-introduction.txt:16
msgid ""
"The key challenge in data modeling is balancing the needs of the "
"application, the performance characteristics of the database engine, and the"
" data retrieval patterns. When designing data models, always consider the "
"application usage of the data (i.e. queries, updates, and processing of the "
"data) as well as the inherent structure of the data itself."
msgstr ""

# 105287fe97ef4d5b9230efeac72166ef
#: ../source/core/data-modeling-introduction.txt:24
msgid "Document Structure"
msgstr ""

# 60b074bb76e54934821ed81df3009b76
#: ../source/core/data-modeling-introduction.txt:28
msgid ""
"The key decision in designing data models for MongoDB applications revolves "
"around the structure of documents and how the application represents "
"relationships between data. There are two tools that allow applications to "
"represent these relationships: *references* and *embedded documents*."
msgstr ""

# 2eb9d41a44f04a5d92355eaf3ae8f6ed
#: ../source/core/data-modeling-introduction.txt:35
msgid "References"
msgstr ""

# a25c8b6365194ea59297eae1ca6d9309
#: ../source/core/data-modeling-introduction.txt:37
msgid ""
"References store the relationships between data by including links or "
"*references* from one document to another. Applications can resolve these "
":doc:`references </reference/database-references>` to access the related "
"data. Broadly, these are *normalized* data models."
msgstr ""

# 41d46464282543229fd53ebde73f4d66
#: ../source/core/data-modeling-introduction.txt:44
msgid ""
"See :ref:`data-modeling-referencing` for the strengths and weaknesses of "
"using references."
msgstr ""

# aaf60c225ebe4f1e84dd1f7ddfa39f23
#: ../source/core/data-modeling-introduction.txt:48
msgid "Embedded Data"
msgstr ""

# f3eb1774e80446e8bd27bc25b4cf9c20
#: ../source/core/data-modeling-introduction.txt:50
msgid ""
"Embedded documents capture relationships between data by storing related "
"data in a single document structure. MongoDB documents make it possible to "
"embed document structures as sub-documents in a field or array within a "
"document. These *denormalized* data models allow applications to retrieve "
"and manipulate related data in a single database operation."
msgstr ""

# af360ca714204ba68ef8399542b4f3a6
#: ../source/core/data-modeling-introduction.txt:59
msgid ""
"See :ref:`data-modeling-embedding` for the strengths and weaknesses of "
"embedding sub-documents."
msgstr ""

# a797f23a13a345468b4f223eeef91698
#: ../source/core/data-modeling-introduction.txt:65
msgid "Atomicity of Write Operations"
msgstr ""

# 0c7a08e59a9441ea8c798e805edbafa1
#: ../source/core/data-modeling-introduction.txt:67
msgid ""
"In MongoDB, write operations are atomic at the :term:`document` level, and "
"no single write operation can atomically affect more than one document or "
"more than one collection. A denormalized data model with embedded data "
"combines all related data for a represented entity in a single document. "
"This facilitates atomic write operations since a single write operation can "
"insert or update the data for an entity. Normalizing the data would split "
"the data across multiple collections and would require multiple write "
"operations that are not atomic collectively."
msgstr ""

# ac5295c62aa9415aa6dd0c0ab5c12cbf
#: ../source/core/data-modeling-introduction.txt:77
msgid ""
"However, schemas that facilitate atomic writes may limit ways that "
"applications can use the data or may limit ways to modify applications. The "
":ref:`Atomicity Considerations <data-model-atomicity>` documentation "
"describes the challenge of designing a schema that balances flexibility and "
"atomicity."
msgstr ""

# 8012a9462540452fa4f6f71d54af9b39
#: ../source/core/data-modeling-introduction.txt:84
msgid "Document Growth"
msgstr ""

# d1c5a39fb6314d6bab1f026d09cb2f8e
#: ../source/core/data-modeling-introduction.txt:86
msgid ""
"Some updates, such as pushing elements to an array or adding new fields, "
"increase a :term:`document's <document>` size. If the document size exceeds "
"the allocated space for that document, MongoDB relocates the document on "
"disk. The growth consideration can affect the decision to normalize or "
"denormalize data. See :ref:`Document Growth Considerations <data-model-"
"document-growth>` for more about planning for and managing document growth "
"in MongoDB."
msgstr ""

# 782729934a3e4d469afced2d5f3a7a4f
#: ../source/core/data-modeling-introduction.txt:95
msgid "Data Use and Performance"
msgstr ""

# 7fb67540dc1e495585452ad983cab3a5
#: ../source/core/data-modeling-introduction.txt:97
msgid ""
"When designing a data model, consider how applications will use your "
"database. For instance, if your application only uses recently inserted "
"documents, consider using :doc:`/core/capped-collections`. Or if your "
"application needs are mainly read operations to a collection, adding indexes"
" to support common queries can improve performance."
msgstr ""

# 7ab93adf1c5f48f0b262498a2a7cdd35
#: ../source/core/data-modeling-introduction.txt:103
msgid ""
"See :doc:`/core/data-model-operations` for more information on these and "
"other operational considerations that affect data model designs."
msgstr ""
