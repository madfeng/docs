# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 19:27+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 58a94044fc9642dc86918e0536b222db
#: ../source/core/replica-set-write-concern.txt:3
msgid "Write Concern for Replica Sets"
msgstr ""

# dc107f1dcfa64b15a1f7c6a46fcca06a
#: ../source/core/replica-set-write-concern.txt:12
msgid ""
":term:`Sharded clusters <sharded cluster>` where the shards are also replica"
" sets provide the same configuration options with regards to write and read "
"operations."
msgstr ""

# 418abe9093b0455fb15618581901e763
#: ../source/core/replica-set-write-concern.txt:55
msgid "Modify Default Write Concern"
msgstr ""

# f2119f94d5454df8928ccc0fbd5a9521
#: ../source/core/replica-set-write-concern.txt:79
msgid ""
"Use of insufficient write concern can lead to :ref:`rollbacks <replica-set-"
"rollbacks>` in the case of :ref:`replica set failover <replica-set-"
"failover>`. Always ensure that your operations have specified the required "
"write concern for your application."
msgstr ""

# aa1d58f6f4e045a49dc0c789ce010166
#: ../source/core/replica-set-write-concern.txt:84
msgid ""
":ref:`write-operations-write-concern` and :ref:`connections-write-concern`"
msgstr ""

# e7284e92c37342aab40861f6dc2496bf
#: ../source/core/replica-set-write-concern.txt:88
msgid "Custom Write Concerns"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:7
msgid ""
"From the perspective of a client application, whether a MongoDB instance is "
"running as a single server (i.e. \"standalone\") or a :term:`replica set` is"
" transparent. However, replica sets offer some configuration options for "
"write. [#sharded-clusters]_"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:19
msgid "Verify Write Operations to Replica Sets"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:21
msgid ""
"For a replica set, the default :doc:`write concern </core/write-concern>` "
"confirms write operations only on the primary. You can, however, override "
"this default write concern, such as to confirm write operations on a "
"specified number of the replica set members."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:29
msgid ""
"To override the default write concern, specify a write concern with each "
"write operation. For example, the following method includes a write concern "
"that specifies that the method return only after the write propagates to the"
" primary and at least one secondary or the method times out after 5 seconds."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:42
msgid ""
"You can include a timeout threshold for a write concern. This prevents write"
" operations from blocking indefinitely if the write concern is unachievable."
" For example, if the write concern requires acknowledgement from 4 members "
"of the replica set and the replica set has only available 3 members, the "
"operation blocks until those members become available. See :ref:`wc-"
"wtimeout`."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:50
msgid ":ref:`write-methods-incompatibility`"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:60
msgid ""
"You can modify the default write concern for a replica set by setting the "
":data:`~local.system.replset.settings.getLastErrorDefaults` setting in the "
":doc:`replica set configuration </reference/replica-configuration>`. The "
"following sequence of commands creates a configuration that waits for the "
"write operation to complete on a majority of the set members before "
"returning:"
msgstr ""

#: ../source/core/replica-set-write-concern.txt:74
msgid ""
"If you issue a write operation with a specific write concern, the write "
"operation uses its own write concern instead of the default."
msgstr ""

#: ../source/core/replica-set-write-concern.txt:90
msgid ""
"You can :doc:`tag </tutorial/configure-replica-set-tag-sets>` the members of"
" replica sets and use the tags to create custom write concerns. See "
":doc:`/tutorial/configure-replica-set-tag-sets` for information on "
"configuring custom write concerns using tag sets."
msgstr ""

#~ msgid ""
#~ "MongoDB's built-in :doc:`write concern </core/write-concern>` confirms the "
#~ "success of write operations to a :term:`replica set's <replica set>` "
#~ ":term:`primary`. Write concern uses the :dbcommand:`getLastError` command "
#~ "after write operations to return an object with error information or "
#~ "confirmation that there are no errors."
#~ msgstr ""

#~ msgid ""
#~ "From the perspective of a client application, whether a MongoDB instance is "
#~ "running as a single server (i.e. \"standalone\") or a :term:`replica set` is"
#~ " transparent. However, replica sets offer some configuration options for "
#~ "write and read operations. [#sharded-clusters]_"
#~ msgstr ""

#~ msgid "Verify Write Operations"
#~ msgstr ""

#~ msgid ""
#~ "The default write concern confirms write operations only on the primary.  "
#~ "You can configure write concern to confirm write operations to additional "
#~ "replica set members as well by issuing the :dbcommand:`getLastError` command"
#~ " with the ``w`` option."
#~ msgstr ""

#~ msgid ""
#~ "The ``w`` option confirms that write operations have replicated to the "
#~ "specified number of replica set members, including the primary. You can "
#~ "either specify a number or specify ``majority``, which ensures the write "
#~ "propagates to a majority of set members."
#~ msgstr ""

#~ msgid ""
#~ "If you specify a ``w`` value greater than the number of members that hold a "
#~ "copy of the data (i.e., greater than the number of non-:term:`arbiter` "
#~ "members), the operation blocks until those members become available. This "
#~ "can cause the operation to block forever. To specify a timeout threshold for"
#~ " the :dbcommand:`getLastError` operation, use the ``wtimeout`` argument. A "
#~ "``wtimeout`` value of ``0`` means that the operation will never time out."
#~ msgstr ""

#~ msgid ""
#~ "See :ref:`getLastError Examples <gle-examples>` for example invocations."
#~ msgstr ""

#~ msgid ""
#~ "You can configure your own \"default\" :dbcommand:`getLastError` behavior "
#~ "for a replica set. Use the "
#~ ":data:`~local.system.replset.settings.getLastErrorDefaults` setting in the "
#~ ":doc:`replica set configuration </reference/replica-configuration>`. The "
#~ "following sequence of commands creates a configuration that waits for the "
#~ "write operation to complete on a majority of the set members before "
#~ "returning:"
#~ msgstr ""

#~ msgid ""
#~ "The :data:`~local.system.replset.settings.getLastErrorDefaults` setting "
#~ "affects only those :dbcommand:`getLastError` commands that have *no* other "
#~ "arguments."
#~ msgstr ""

#~ msgid ""
#~ "You can use replica set tags to create custom write concerns using the "
#~ ":data:`~local.system.replset.settings.getLastErrorDefaults` and "
#~ ":data:`~local.system.replset.settings.getLastErrorModes` replica set "
#~ "settings."
#~ msgstr ""

#~ msgid ""
#~ "Custom write concern modes specify the field name and a number of *distinct*"
#~ " values for that field. By contrast, read preferences use the value of "
#~ "fields in the tag document to direct read operations."
#~ msgstr ""

#~ msgid ""
#~ "In some cases, you may be able to use the same tags for read preferences and"
#~ " write concerns; however, you may need to create additional tags for write "
#~ "concerns depending on the requirements of your application."
#~ msgstr ""

#~ msgid "Single Tag Write Concerns"
#~ msgstr ""

#~ msgid ""
#~ "Consider a five member replica set, where each member has one of the "
#~ "following tag sets:"
#~ msgstr ""

#~ msgid ""
#~ "You could create a custom write concern mode that will ensure that "
#~ "applicable write operations will not return until members with two different"
#~ " values of the ``use`` tag have acknowledged the write operation. Create the"
#~ " mode with the following sequence of operations in the :program:`mongo` "
#~ "shell:"
#~ msgstr ""

#~ msgid ""
#~ "To use this mode pass the string ``use2`` to the ``w`` option of "
#~ ":dbcommand:`getLastError` as follows:"
#~ msgstr ""

#~ msgid "Specific Custom Write Concerns"
#~ msgstr ""

#~ msgid "If you have a three member replica with the following tag sets:"
#~ msgstr ""

#~ msgid ""
#~ "You cannot specify a custom "
#~ ":data:`~local.system.replset.settings.getLastErrorModes` value to ensure "
#~ "that the write propagates to the ``san`` before returning. However, you may "
#~ "implement this write concern policy by creating the following additional "
#~ "tags, so that the set resembles the following:"
#~ msgstr ""

#~ msgid ""
#~ "Then, create a custom "
#~ ":data:`~local.system.replset.settings.getLastErrorModes` value, as follows:"
#~ msgstr ""

#~ msgid ""
#~ "To use this mode pass the string ``san`` to the ``w`` option of "
#~ ":dbcommand:`getLastError` as follows:"
#~ msgstr ""

#~ msgid ""
#~ "This operation will not return until a replica set member with the tag "
#~ "``disk.san`` returns."
#~ msgstr ""

#~ msgid ""
#~ "You may set a custom write concern mode as the default write concern mode "
#~ "using :data:`~local.system.replset.settings.getLastErrorDefaults` replica "
#~ "set as in the following setting:"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`replica-set-configuration-tag-sets` for further information about "
#~ "replica set reconfiguration and tag sets."
#~ msgstr ""
