# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 19:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# e5f9244ce8f840c98b996c17257466a6
#: ../source/core/aggregation-pipeline-optimization.txt:3
msgid "Aggregation Pipeline Optimization"
msgstr ""

# cf9977cc772b444ab211b8c97b69bb7a
#: ../source/core/aggregation-pipeline-optimization.txt:29
msgid "Pipeline Sequence Optimization"
msgstr ""

# 6ffa44d9b4054cb0bf45ba6129733583
#: ../source/core/aggregation-pipeline-optimization.txt:46
#: ../source/core/aggregation-pipeline-optimization.txt:71
msgid ""
"During the optimization phase, the optimizer transforms the sequence to the "
"following:"
msgstr ""

# c05de8fbdacc4111bff4adc87830a239
#: ../source/core/aggregation-pipeline-optimization.txt:19
msgid "Projection Optimization"
msgstr ""

# bc241d0b59714ebabf69962b11148a03
#: ../source/core/aggregation-pipeline-optimization.txt:21
msgid ""
"The aggregation pipeline can determine if it requires only a subset of the "
"fields in the documents to obtain the results. If so, the pipeline will only"
" use those required fields, reducing the amount of data passing through the "
"pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:7
msgid ""
"Aggregation pipeline operations have an optimization phase which attempts to"
" reshape the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:10
msgid ""
"To see how the optimizer transforms a particular aggregation pipeline, "
"include the :method:`explain <db.collection.aggregate()>` option in the "
":method:`db.collection.aggregate()` method."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:34
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:36
msgid ""
"When you have a sequence with :pipeline:`$sort` followed by a "
":pipeline:`$match`, the :pipeline:`$match` moves before the "
":pipeline:`$sort` to minimize the number of objects to sort. For example, if"
" the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:57
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:59
msgid ""
"When you have a sequence with :pipeline:`$skip` followed by a "
":pipeline:`$limit`, the :pipeline:`$limit` moves before the "
":pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value "
"increases by the :pipeline:`$skip` amount."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:64
#: ../source/core/aggregation-pipeline-optimization.txt:101
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:79
msgid ""
"This optimization allows for more opportunities for :ref:`agg-sort-limit-"
"coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. See"
" :ref:`agg-sort-limit-coalescence` for details on the coalescence and :ref"
":`agg-sort-skip-limit-sequence` for an example."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:85
msgid ""
"For aggregation operations on :doc:`sharded collections <aggregation-"
"pipeline-sharded-collections>`, this optimization reduces the results "
"returned from each shard."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:90
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:92
msgid ""
"When possible, when the pipeline has the :pipeline:`$redact` stage "
"immediately followed by the :pipeline:`$match` stage, the aggregation can "
"sometimes add a portion of the :pipeline:`$match` stage before the "
":pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at the "
"start of a pipeline, the aggregation can use an index as well as query the "
"collection to limit the number of documents that enter the pipeline. See "
":ref:`aggregation-pipeline-operators-and-performance` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:108
msgid ""
"The optimizer can add the same :pipeline:`$match` stage before the "
":pipeline:`$redact` stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:120
msgid "Pipeline Coalescence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:122
msgid ""
"When possible, the optimization phase coalesces a pipeline stage into its "
"predecessor. Generally, coalescence occurs *after* any sequence reordering "
"optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:129
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:131
msgid ""
"When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the "
"optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`. "
"This allows the sort operation to only maintain the top ``n`` results as it "
"progresses, where ``n`` is the specified limit, and MongoDB only needs to "
"store ``n`` items in memory [#coalescence-allowDiskUse]_. See :ref:`sort-"
"and-memory` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:139
msgid ""
"The optimization will still apply when ``allowDiskUse`` is ``true`` and the "
"``n`` items exceed the :ref:`aggregation memory limit <agg-memory-"
"restrictions>`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:146
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:148
msgid ""
"When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`, "
"the two stages can coalesce into a single :pipeline:`$limit` where the limit"
" amount is the *smaller* of the two initial limit amounts. For example, a "
"pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:159
msgid ""
"Then the second :pipeline:`$limit` stage can coalesce into the first "
":pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage "
"where the limit amount ``10`` is the minimum of the two initial limits "
"``100`` and ``10``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:171
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:173
msgid ""
"When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, the "
"two stages can coalesce into a single :pipeline:`$skip` where the skip "
"amount is the *sum* of the two initial skip amounts. For example, a pipeline"
" contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:183
msgid ""
"Then the second :pipeline:`$skip` stage can coalesce into the first "
":pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage where"
" the skip amount ``7`` is the sum of the two initial limits ``5`` and ``2``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:195
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:197
msgid ""
"When a :pipeline:`$match` immediately follows another :pipeline:`$match`, "
"the two stages can coalesce into a single :pipeline:`$match` combining the "
"conditions with an :expression:`$and`. For example, a pipeline contains the "
"following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:208
msgid ""
"Then the second :pipeline:`$match` stage can coalesce into the first "
":pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:217
msgid "Examples"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:219
msgid ""
"The following examples are some sequences that can take advantage of both "
"sequence reordering and coalescence. Generally, coalescence occurs *after* "
"any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:226
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:228
msgid ""
"A pipeline contains a sequence of :pipeline:`$sort` followed by a "
":pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:237
msgid ""
"First, the optimizer performs the :ref:`agg-skip-limit-optimization` to "
"transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:246
msgid ""
"The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` "
"amount with the reordering. See :ref:`agg-skip-limit-optimization` for "
"details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:250
msgid ""
"The reordered sequence now has :pipeline:`$sort` immediately preceding the "
":pipeline:`$limit`, and the pipeline can coalesce the two stages to decrease"
" memory usage during the sort operation. See :ref:`agg-sort-limit-"
"coalescence` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:256
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:258
msgid ""
"A pipeline contains a sequence of alternating :pipeline:`$limit` and "
":pipeline:`$skip` stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:268
msgid ""
"The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ "
"$skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit amount:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:279
msgid ""
"The optimizer then coalesces the two :pipeline:`$limit` stages into a single"
" :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into a single"
" :pipeline:`$skip` stage. The resulting sequence is the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:289
msgid ""
"See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-coalescence` "
"for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:293
msgid ""
":method:`explain <db.collection.aggregate()>` option in the "
":method:`db.collection.aggregate()`"
msgstr ""

#~ msgid ""
#~ "Aggregation pipeline operations have an optimization phase which attempts to"
#~ " rearrange the pipeline for improved performance."
#~ msgstr ""

#~ msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence Optimization"
#~ msgstr ""

#~ msgid ""
#~ "When you have a sequence with :pipeline:`$sort` followed by a "
#~ ":pipeline:`$skip` followed by a :pipeline:`$limit`, an optimization occurs "
#~ "that moves the :pipeline:`$limit` operator before the :pipeline:`$skip` "
#~ "operator. For example, if the pipeline consists of the following stages:"
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$limit` value has increased to the sum of the initial value "
#~ "and the :pipeline:`$skip` value."
#~ msgstr ""

#~ msgid ""
#~ "The optimized sequence now has :pipeline:`$sort` immediately preceding the "
#~ ":pipeline:`$limit`. See :pipeline:`$sort` for information on the behavior of"
#~ " the :pipeline:`$sort` operation when it immediately precedes "
#~ ":pipeline:`$limit`."
#~ msgstr ""

#~ msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence Optimization"
#~ msgstr ""

#~ msgid ""
#~ "When you have a continuous sequence of a :pipeline:`$limit` pipeline stage "
#~ "followed by a :pipeline:`$skip` pipeline stage, the optimization phase "
#~ "attempts to arrange the pipeline stages to combine the limits and skips. For"
#~ " example, if the pipeline consists of the following stages:"
#~ msgstr ""

#~ msgid ""
#~ "During the intermediate step, the optimizer reverses the position of the "
#~ ":pipeline:`$skip` followed by a :pipeline:`$limit` to :pipeline:`$limit` "
#~ "followed by the :pipeline:`$skip`."
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$limit` value has increased to the sum of the initial value "
#~ "and the :pipeline:`$skip` value. Then, for the final :pipeline:`$limit` "
#~ "value, the optimizer selects the minimum between the adjacent "
#~ ":pipeline:`$limit` values. For the final :pipeline:`$skip` value, the "
#~ "optimizer adds the adjacent :pipeline:`$skip` values, to transform the "
#~ "sequence to the following:"
#~ msgstr ""
