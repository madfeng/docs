# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 4087898cb9674c2ebb334e55c55f6e51
#: ../source/core/sharding-introduction.txt:5
msgid "Sharding Introduction"
msgstr ""

# f2a25256903b4964b392483cb7004cda
#: ../source/core/sharding-introduction.txt:11
msgid ""
"Sharding is a method for storing data across multiple machines. MongoDB uses"
" sharding to support deployments with very large data sets and high "
"throughput operations."
msgstr ""

# 2f267164c31041c8bb8d185f5cdc662e
#: ../source/core/sharding-introduction.txt:16
msgid "Purpose of Sharding"
msgstr ""

# ce10fcba39324197b9afa37b20da5d9b
#: ../source/core/sharding-introduction.txt:18
msgid ""
"Database systems with large data sets and high throughput applications can "
"challenge the capacity of a single server. High query rates can exhaust the "
"CPU capacity of the server. Larger data sets exceed the storage capacity of "
"a single machine. Finally, working set sizes larger than the system's RAM "
"stress the I/O capacity of disk drives."
msgstr ""

# c2e39870ad9f413e88adb488fb0c1305
#: ../source/core/sharding-introduction.txt:24
msgid ""
"To address these issues of scales, database systems have two basic "
"approaches: **vertical scaling** and **sharding**."
msgstr ""

# ca4eab64da3f4f49b4659e56928118ff
#: ../source/core/sharding-introduction.txt:27
msgid ""
"**Vertical scaling** adds more CPU and storage resources to increase "
"capacity. Scaling by adding capacity has limitations: high performance "
"systems with large numbers of CPUs and large amount of RAM are "
"disproportionately *more expensive* than smaller systems. Additionally, "
"cloud-based providers may only allow users to provision smaller instances.  "
"As a result there is a *practical maximum* capability for vertical scaling."
msgstr ""

# ff6261fc30174b23a05db365e69a4eef
#: ../source/core/sharding-introduction.txt:35
msgid ""
"**Sharding**, or *horizontal scaling*, by contrast, divides the data set and"
" distributes the data over multiple servers, or **shards**. Each shard is an"
" independent database, and collectively, the shards make up a single logical"
" database."
msgstr ""

# e8197cb9e9d644b1b309e098f07ccab5
#: ../source/core/sharding-introduction.txt:42
msgid ""
"Sharding addresses the challenge of scaling to support high throughput and "
"large data sets:"
msgstr ""

# 3abda571a67a4821976fabb0fb7dde12
#: ../source/core/sharding-introduction.txt:45
msgid ""
"Sharding reduces the number of operations each shard handles. Each shard "
"processes fewer operations as the cluster grows. As a result, a cluster can "
"increase capacity and throughput *horizontally*."
msgstr ""

# d1180a11976043629d3f0100b3c7ded6
#: ../source/core/sharding-introduction.txt:49
msgid ""
"For example, to insert data, the application only needs to access the shard "
"responsible for that record."
msgstr ""

# 46bd298382db42848d5dc20035daf94d
#: ../source/core/sharding-introduction.txt:52
msgid ""
"Sharding reduces the amount of data that each server needs to store. Each "
"shard stores less data as the cluster grows."
msgstr ""

# c0b4044a60164eba857a9f4b1bf79911
#: ../source/core/sharding-introduction.txt:55
msgid ""
"For example, if a database has a 1 terabyte data set, and there are 4 "
"shards, then each shard might hold only 256GB of data. If there are 40 "
"shards, then each shard might hold only 25GB of data."
msgstr ""

# a8bf299410b047abba779d9484fd7eee
#: ../source/core/sharding-introduction.txt:60
msgid "Sharding in MongoDB"
msgstr ""

# 3b62bab4383749ec8c83229fd0b2d7f0
#: ../source/core/sharding-introduction.txt:62
msgid ""
"MongoDB supports sharding through the configuration of a :term:`sharded "
"clusters <sharded cluster>`."
msgstr ""

# 78078fb135a3423a969e5f51da956e61
#: ../source/core/sharding-introduction.txt:67
msgid ""
"Sharded cluster has the following components: :term:`shards <shard>`, "
":term:`query routers <mongos>` and :term:`config servers <config server>`."
msgstr ""

# ee31efd056bb4dc3bfc6f684422f90b1
#: ../source/core/sharding-introduction.txt:70
msgid ""
"**Shards** store the data. To provide high availability and data "
"consistency, in a production sharded cluster, each shard is a :term:`replica"
" set` [#dev-only-shard-deployment]_. For more information on replica sets, "
"see :doc:`Replica Sets </core/replication>`."
msgstr ""

# ac897e8892f34f8fb657250c3beeb390
#: ../source/core/sharding-introduction.txt:76
msgid ""
"**Query Routers**, or :program:`mongos` instances, interface with client "
"applications and direct operations to the appropriate shard or shards. The "
"query router processes and targets operations to shards and then returns "
"results to the clients. A sharded cluster can contain more than one query "
"router to divide the client request load. A client sends requests to one "
"query router. Most sharded cluster have many query routers."
msgstr ""

# 4cba3d7fff1342c283751c700c87e6ea
#: ../source/core/sharding-introduction.txt:83
msgid ""
"**Config servers** store the cluster's metadata. This data contains a "
"mapping of the cluster's data set to the shards. The query router uses this "
"metadata to target operations to specific shards. Production sharded "
"clusters have *exactly* 3 config servers."
msgstr ""

# ad63bfbcf53a4df9872dc3e0a9191892
#: ../source/core/sharding-introduction.txt:88
msgid ""
"For development and testing purposes only, each **shard** can be a single "
":program:`mongod` instead of a replica set. Do **not** deploy production "
"clusters without 3 config servers."
msgstr ""

# 12a07a5206594fa6a29630fe5601a5da
#: ../source/core/sharding-introduction.txt:96
msgid "Data Partitioning"
msgstr ""

# 1af3a6ef23bf4b618a3d7811da33ead7
#: ../source/core/sharding-introduction.txt:98
msgid ""
"MongoDB distributes data, or shards, at the collection level. Sharding "
"partitions a collection's data by the **shard key**."
msgstr ""

# e87a7239ce1f41b383268b4d4ff89fd7
#: ../source/core/sharding-introduction.txt:102
msgid "Shard Keys"
msgstr ""

# fa78d5a8ecfe4c1a8580cf927fef72ca
#: ../source/core/sharding-introduction.txt:114
msgid "Range Based Sharding"
msgstr ""

# 01149d1e60444ffeab9dfc52475b6032
#: ../source/core/sharding-introduction.txt:116
msgid ""
"For *range-based sharding*, MongoDB divides the data set into ranges "
"determined by the shard key values to provide **range based partitioning**. "
"Consider a numeric shard key: If you visualize a number line that goes from "
"negative infinity to positive infinity, each value of the shard key falls at"
" some point on that line. MongoDB partitions this line into smaller, non-"
"overlapping ranges called **chunks** where a chunk is range of values from "
"some minimum value to some maximum value."
msgstr ""

# d962efb99d804d09afd1a3db105a34ca
#: ../source/core/sharding-introduction.txt:125
msgid ""
"Given a range based partitioning system, documents with \"close\" shard key "
"values are likely to be in the same chunk, and therefore on the same shard."
msgstr ""

# 41f006426a3a45d29658111e98b9afd8
#: ../source/core/sharding-introduction.txt:132
msgid "Hash Based Sharding"
msgstr ""

# 894b0a6d1776411a86f9fb115a4b6a9f
#: ../source/core/sharding-introduction.txt:134
msgid ""
"For *hash based partitioning*, MongoDB computes a hash of a field's value, "
"and then uses these hashes to create chunks."
msgstr ""

# 130301bd839648b78c661452578f5cfe
#: ../source/core/sharding-introduction.txt:137
msgid ""
"With hash based partitioning, two documents with \"close\" shard key values "
"are *unlikely* to be part of the same chunk. This ensures a more random "
"distribution of a collection in the cluster."
msgstr ""

# ce27eb15090c431ba86587c7ac860352
#: ../source/core/sharding-introduction.txt:144
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr ""

# a8f78bee273e4874a7d576c5cac16ae8
#: ../source/core/sharding-introduction.txt:146
msgid ""
"Range based partitioning supports more efficient range queries. Given a "
"range query on the shard key, the query router can easily determine which "
"chunks overlap that range and route the query to only those shards that "
"contain these chunks."
msgstr ""

# 8ef1106826f94c4d8fa21cb33a70d1eb
#: ../source/core/sharding-introduction.txt:151
msgid ""
"However, range based partitioning can result in an uneven distribution of "
"data, which may negate some of the benefits of sharding. For example, if the"
" shard key is a linearly increasing field, such as time, then all requests "
"for a given time range will map to the same chunk, and thus the same shard. "
"In this situation, a small set of shards may receive the majority of "
"requests and the system would not scale very well."
msgstr ""

# ced4453917bb465db2037f66b10742d2
#: ../source/core/sharding-introduction.txt:159
msgid ""
"Hash based partitioning, by contrast, ensures an even distribution of data "
"at the expense of efficient range queries. Hashed key values results in "
"random distribution of data across chunks and therefore shards. But random "
"distribution makes it more likely that a range query on the shard key will "
"not be able to target a few shards but would more likely query every shard "
"in order to return a result."
msgstr ""

# 8959dc39fceb430f8a2251b3bd5ae713
#: ../source/core/sharding-introduction.txt:184
msgid "Maintaining a Balanced Data Distribution"
msgstr ""

# fa4ba8ababf7445dba9750f9a738d203
#: ../source/core/sharding-introduction.txt:186
msgid ""
"The addition of new data or the addition of new servers can result in data "
"distribution imbalances within the cluster, such as a particular shard "
"contains significantly more chunks than another shard or a size of a chunk "
"is significantly greater than other chunk sizes."
msgstr ""

# baeaa581b54d4e8a9e185b3cd0d7d0a9
#: ../source/core/sharding-introduction.txt:191
msgid ""
"MongoDB ensures a balanced cluster using two background process: splitting "
"and the balancer."
msgstr ""

# cf1a82c8c2954b74a58ba46e3cd3c2bb
#: ../source/core/sharding-introduction.txt:195
msgid "Splitting"
msgstr ""

# 8b9759f4768b4259b65094450fe72224
#: ../source/core/sharding-introduction.txt:197
msgid ""
"Splitting is a background process that keeps chunks from growing too large. "
"When a chunk grows beyond a :ref:`specified chunk size <sharding-chunk-"
"size>`, MongoDB splits the chunk in half. Inserts and updates triggers "
"splits. Splits are a efficient meta-data change. To create splits, MongoDB "
"does *not* migrate any data or affect the shards."
msgstr ""

# a5c86ae761d641e5839f7f11387c8638
#: ../source/core/sharding-introduction.txt:207
msgid "Balancing"
msgstr ""

# 67ac3d5811f9405d8126acb4f753879b
#: ../source/core/sharding-introduction.txt:209
msgid ""
"The :ref:`balancer <sharding-balancing-internals>` is a background process "
"that manages chunk migrations. The balancer runs in all of the query routers"
" in a cluster."
msgstr ""

# ccd25fdc49834f29976ec7cfc0416220
#: ../source/core/sharding-introduction.txt:213
msgid ""
"When the distribution of a sharded collection in a cluster is uneven, the "
"balancer process migrates chunks from the shard that has the largest number "
"of chunks to the shard with the least number of chunks until the collection "
"balances. For example: if collection ``users`` has 100 chunks on *shard 1* "
"and 50 chunks on *shard 2*, the balancer will migrate chunks from *shard 1* "
"to *shard 2* until the collection achieves balance."
msgstr ""

# 2da56f07cad645a2a9fcb4da86b0515d
#: ../source/core/sharding-introduction.txt:237
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

# 4ebe6e0dc1a14e5d94be4ac4fb8fd218
#: ../source/core/sharding-introduction.txt:239
msgid ""
"Adding a shard to a cluster creates an imbalance  since the new shard has no"
" chunks. While MongoDB begins migrating data to the new shard immediately, "
"it can take some time before the cluster balances."
msgstr ""

# 2bfa5272263043ca84db43d6614196cc
#: ../source/core/sharding-introduction.txt:243
msgid ""
"When removing a shard, the balancer migrates all chunks from a shard to "
"other shards. After migrating all data and updating the meta data, you can "
"safely remove the shard."
msgstr ""

#: ../source/core/sharding-introduction.txt:104
msgid ""
"To shard a collection, you need to select a **shard key**. A :term:`shard "
"key` is either an indexed field or an indexed compound field that exists in "
"every document in the collection. MongoDB divides the shard key values into "
"**chunks** and distributes the :term:`chunks <chunk>` evenly across the "
"shards. To divide the shard key values into chunks, MongoDB uses either "
"**range based partitioning** or **hash based partitioning**. See the "
":doc:`Shard Key </core/sharding-shard-key>` documentation for more "
"information."
msgstr ""

#: ../source/core/sharding-introduction.txt:167
msgid "Customized Data Distribution with Tag Aware Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:169
msgid ""
"MongoDB allows administrators to direct the balancing policy using **tag "
"aware sharding**. Administrators create and associate tags with ranges of "
"the shard key, and then assign those tags to the shards. Then, the balancer "
"migrates tagged data to the appropriate shards and ensures that the cluster "
"always enforces the distribution of data that the tags describe."
msgstr ""

#: ../source/core/sharding-introduction.txt:176
msgid ""
"Tags are the primary mechanism to control the behavior of the balancer and "
"the distribution of chunks in a cluster.  Most commonly, tag aware sharding "
"serves to improve the locality of data for sharded clusters that span "
"multiple data centers."
msgstr ""

#: ../source/core/sharding-introduction.txt:181
msgid "See :doc:`/core/tag-aware-sharding` for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:221
msgid ""
"The shards manage *chunk migrations* as a background operation between an "
"*origin shard* and a *destination shard*.  During a chunk migration, the "
"*destination shard* is sent all the current documents in the chunk from the "
"*origin shard*. Next, the destination shard captures and applies all changes"
" made to the data during the migration process. Finally, the metadata "
"regarding the location of the chunk on *config server* is updated."
msgstr ""

#: ../source/core/sharding-introduction.txt:229
msgid ""
"If there's an error during the migration, the balancer aborts the process "
"leaving the chunk unchanged on the origin shard. MongoDB removes the chunk's"
" data from the origin shard **after** the migration completes successfully."
msgstr ""

#~ msgid ""
#~ "To shard a collection, you need to select a **shard key**. A :term:`shard "
#~ "key` is either an indexed field or an indexed compound field that exists in "
#~ "every document in the collection. MongoDB divides the shard key values into "
#~ "**chunks** and distributes the :term:`chunks <chunk>` evenly across the "
#~ "shards. To divide the shard key values into chunks, MongoDB uses either "
#~ "**range based partitioning** and **hash based partitioning**. See "
#~ ":doc:`/core/sharding-shard-key` for more information."
#~ msgstr ""

#~ msgid ""
#~ "The shards manage *chunk migrations* as a background operation. During "
#~ "migration, all requests for a chunk's data address the \"origin\" shard."
#~ msgstr ""

#~ msgid ""
#~ "In a chunk migration, the *destination shard* receives all the documents in "
#~ "the chunk from the *origin shard*. Then, the destination shard captures and "
#~ "applies all changes made to the data during migration process. Finally, the "
#~ "destination shard updates the metadata regarding the location of the chunk "
#~ "on *config server*."
#~ msgstr ""

#~ msgid ""
#~ "If there's an error during the migration, the balancer aborts the process "
#~ "leaving the chunk on the origin shard. MongoDB removes the chunk's data from"
#~ " the origin shard **after** the migration completes successfully."
#~ msgstr ""
