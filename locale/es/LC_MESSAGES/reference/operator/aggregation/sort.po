# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 18:48+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 2ae788b8ae664cfd984df848310de406
#: ../source/reference/operator/aggregation/sort.txt:3
msgid "$sort (aggregation)"
msgstr ""

# 80ac3e441c724d1c89e3918ee75e5824
#: ../source/reference/operator/aggregation/sort.txt:36
msgid "Ascending/Descending Sort"
msgstr ""

# 5ca7e6efbc254f1aa76bc358be95d378
#: ../source/reference/operator/aggregation/sort.txt:50
msgid ""
"This operation sorts the documents in the ``users`` collection, in "
"descending order according by the ``age`` field and then in ascending order "
"according to the value in the ``posts`` field."
msgstr ""

# f22c3e59f5154f2eab5d53c2203bcef0
#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :term:`BSON` types, MongoDB uses the "
"following comparison order, from lowest to highest:"
msgstr ""

# 5e4d1bbcb4ec4684b68ef0cb90d5567c
#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

# 8f3ccfab0e0847bcaedbc596b2b251ff
#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

# 8a2ea7c5483944ffa570b0ab036712b8
#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles)"
msgstr ""

# 35abc2b9aae54186ac5bebb4ac431c16
#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

# e654cc2b6dac4b8f9b450fb48b26f0f0
#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

# 8f16debbf1984345b15465bc6e77ae58
#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

# 4e6a7ea4612447ca97b9ff9012a6826b
#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

# 13d7b25d580d4215a09ccda2f93010da
#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

# db856254d87c488e8acebf57ace43ace
#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

# cff75c84c8a245e696e80e314b00e8d5
#: ../source/includes/fact-sort-order.rst:13
msgid "Date, Timestamp"
msgstr ""

# 37b8995a4c3949e7885d1b34d165caa1
#: ../source/includes/fact-sort-order.rst:14
msgid "Regular Expression"
msgstr ""

# 9b40ad02c012461aba8f4e7c733dc877
#: ../source/includes/fact-sort-order.rst:15
msgid "MaxKey (internal type)"
msgstr ""

# 1724adaed3cb45af97ae3c62d4513d5b
#: ../source/includes/fact-sort-order.rst:17
msgid ""
"MongoDB treats some types as equivalent for comparison purposes. For "
"instance, numeric types undergo conversion before comparison."
msgstr ""

# 561437f41013450fa32e9e4cdf5c8551
#: ../source/includes/fact-sort-order.rst:20
msgid ""
"The comparison treats a non-existent field as it would an empty BSON Object."
" As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }``"
" would treat the documents as equivalent in sort order."
msgstr ""

# 92d094853ff441a9b9022ee953b0a469
#: ../source/includes/fact-sort-order.rst:24
msgid ""
"With arrays, a less-than comparison or an ascending sort compares the "
"smallest element of arrays, and a greater-than comparison or a descending "
"sort compares the largest element of the arrays. As such, when comparing a "
"field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array "
"fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison"
" of an empty array (e.g. ``[ ]``) treats the empty array as less than "
"``null`` or a missing field."
msgstr ""

# 46e88797603040379e6db8fad05adbf0
#: ../source/reference/operator/aggregation/sort.txt:59
msgid "Metadata Sort"
msgstr ""

# 4af6bbf3d8504ed480a3d317d00dfad3
#: ../source/reference/operator/aggregation/sort.txt:61
msgid ""
"Specify in the ``{ <sort-key> }`` document, a new field name for the "
"computed metadata and specify the :expression:`$meta` expression as its "
"value, as in the following example:"
msgstr ""

# 9ee498cfb75e4be981e37559f2969145
#: ../source/reference/operator/aggregation/sort.txt:74
msgid ""
"This operation uses the :query:`$text` operator to match the documents, and "
"then sorts first by the ``\"textScore\"`` metadata and then by descending "
"order of the ``posts`` field. The specified metadata determines the sort "
"order. For example, the ``\"textScore\"`` metadata sorts in descending "
"order. See :expression:`$meta` for more information on metadata."
msgstr ""

# 2165408e046a4dc6b9d1f61ed2e1d978
#: ../source/reference/operator/aggregation/sort.txt:84
msgid "``$sort`` Operator and Memory"
msgstr ""

# 53d8de9792b54cb7a73295bd56d65cab
#: ../source/reference/operator/aggregation/sort.txt:89
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

# 3dc499dcd3bb43669d0e226411cfa3bf
#: ../source/includes/fact-agg-sort-limit.rst:8
msgid ""
"Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in memory, "
"and then limit the results to n results."
msgstr ""

# caac62d7252c4f8abd3677e8772b2578
#: ../source/reference/operator/aggregation/sort.txt:98
msgid "``$sort`` and Memory Restrictions"
msgstr ""

# d7ee85fcc0734442aa8072cc7c1fa6de
#: ../source/reference/operator/aggregation/sort.txt:108
msgid ""
"The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to 100"
" megabytes of RAM."
msgstr ""

# b0a19967f56f4fa69bfc739c67c98f4a
#: ../source/reference/operator/aggregation/sort.txt:113
msgid "``$sort`` Operator and Performance"
msgstr ""

# f8d54de3b5574090820a1df6961904ec
#: ../source/reference/operator/aggregation/sort.txt:115
msgid ""
":pipeline:`$sort` operator can take advantage of an index when placed at the"
" **beginning** of the pipeline or placed **before** the following "
"aggregation operators: :pipeline:`$project`, :pipeline:`$unwind`, and "
":pipeline:`$group`."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:9
msgid ""
"Sorts all input documents and returns them to the pipeline in sorted order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:12
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:18
msgid ""
":pipeline:`$sort` takes a document that specifies the field(s) to sort by "
"and the respective sort order. ``<sort order>`` can have one of the "
"following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:22
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:24
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:26
msgid ""
"``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` metadata "
"in descending order. See :ref:`sort-pipeline-metadata` for an example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:31
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:38
msgid ""
"To  ascending order for a field or fields to sort by and a value of ``1`` or"
" ``-1`` to specify an ascending or descending sort respectively, as in the "
"following example:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:32
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:34
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:36
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:38
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
msgid ""
"When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the "
"pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` "
"results as it progresses, where ``n`` is the specified limit, and MongoDB "
"only needs to store ``n`` items in memory. This optimization still applies "
"when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the "
":ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:100
msgid ""
"The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default,"
" if the stage exceeds this limit, :pipeline:`$sort` will produce an error. "
"To allow for the handling of large datasets, set the ``allowDiskUse`` option"
" to ``true`` to enable :pipeline:`$sort` operations to write to temporary "
"files. See the ``allowDiskUse`` option in "
":method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` "
"command for details."
msgstr ""

#~ msgid ""
#~ "The :pipeline:`$sort` :term:`pipeline` operator sorts all input documents "
#~ "and returns them to the pipeline in sorted order."
#~ msgstr ""

#~ msgid "Consider the following prototype form:"
#~ msgstr ""

#~ msgid ""
#~ "This sorts the documents in the collection named ``<collection-name>``, "
#~ "according to the key and specification in the ``{ <sort-key> }`` document. "
#~ "The sort key has the following syntax:"
#~ msgstr ""

#~ msgid ""
#~ "The ``{ <sort-key> }`` document can specify :ref:`ascending or descending "
#~ "sort on existing fields <sort-pipeline-asc-desc>` or :ref:`sort on computed "
#~ "metadata <sort-pipeline-metadata>`."
#~ msgstr ""

#~ msgid "Behaviors"
#~ msgstr ""

#~ msgid ""
#~ "Specify in the ``{ <sort-key> }`` document the field or fields to sort by "
#~ "and a value of ``1`` or ``-1`` to specify an ascending or descending sort "
#~ "respectively, as in the following example:"
#~ msgstr ""

#~ msgid ""
#~ "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the "
#~ "pipeline, the :pipeline:`$sort` operation only maintains the top n results "
#~ "as it progresses, where n is the specified limit, and MongoDB only needs to "
#~ "store the number of items specified by :pipeline:`$limit` in memory."
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default,"
#~ " if the stage exceeds this limit, :pipeline:`$sort` will produce an error. "
#~ "To allow for the handling of large datasets, set the ``allowDiskUsage`` "
#~ "option to ``true`` to enable :pipeline:`$sort` operations to write to "
#~ "temporary files. See the ``allowDiskUsage`` option in "
#~ ":method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` "
#~ "command for details."
#~ msgstr ""
