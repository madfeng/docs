# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2013-12-16 23:20+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# d4fd66e494b1426bb7378b05598f73ef
#: ../source/reference/command/findAndModify.txt:3
msgid "findAndModify"
msgstr ""

# f377a2ca2d7346fca826ab0bae3e960d
#: ../source/reference/command/findAndModify.txt:21
msgid "The command has the following syntax:"
msgstr ""

# 65edd4a81974477cad990058fdf0dfec
#: ../source/reference/command/findAndModify.txt:36
msgid "The :dbcommand:`findAndModify` command takes the following fields:"
msgstr ""

# 1c6f0187877141d99bf2f589578891f4
#: ../source/reference/command/findAndModify.txt:46
msgid "The return document contains the following fields:"
msgstr ""

# c8133c37b8d747f688e43085110b695c
#: ../source/reference/command/findAndModify.txt:48
msgid "The ``lastErrorObject`` field that returns the details of the command:"
msgstr ""

# cbd010ce1836487bad6d1b3f1c2a2f89
#: ../source/reference/command/findAndModify.txt:58
msgid "The ``value`` field that returns either:"
msgstr ""

# 256c37ffc47e496e827e8dbde582648d
#: ../source/reference/command/findAndModify.txt:60
msgid "the original (i.e. pre-modification) document if ``new`` is false, or"
msgstr ""

# a1e99191874a4fc09033ebe9589360f6
#: ../source/reference/command/findAndModify.txt:63
msgid "the modified or inserted document if ``new: true``."
msgstr ""

# 606882dcbc0e46e1ba55b32229f94312
#: ../source/reference/command/findAndModify.txt:65
msgid "The ``ok`` field that returns the status of the command."
msgstr ""

# 9318a9054ef640578c4753180a0d404e
#: ../source/reference/command/findAndModify.txt:69
msgid "If the :dbcommand:`findAndModify` finds no matching document, then:"
msgstr ""

# a9a5a9561f0046cf8d1aabc0ff47365f
#: ../source/reference/command/findAndModify.txt:72
msgid ""
"for ``update`` or ``remove`` operations, ``lastErrorObject`` does not appear"
" in the return document and the ``value`` field holds a ``null``."
msgstr ""

# 4881c86e24f348b498aa26512ef928b2
#: ../source/reference/command/findAndModify.txt:172
msgid ""
"The following command updates an existing document in the ``people`` "
"collection where the document matches the ``query`` criteria:"
msgstr ""

# 7c02069c72dc4352934d20ba7175c2c9
#: ../source/reference/command/findAndModify.txt:186
msgid "This command performs the following actions:"
msgstr ""

# a3c9d08cc8ba4eb29e965fc364cdaaf6
#: ../source/reference/command/findAndModify.txt:188
msgid ""
"The ``query`` finds a document in the ``people`` collection where the "
"``name`` field has the value ``Tom``, the ``state`` field has the value "
"``active`` and the ``rating`` field has a value :operator:`greater than "
"<$gt>` 10."
msgstr ""

# bdeee25632c340c5997a6f2b9633fad9
#: ../source/reference/command/findAndModify.txt:193
msgid ""
"The ``sort`` orders the results of the query in ascending order. If multiple"
" documents meet the ``query`` condition, the command will select for "
"modification the first document as ordered by this ``sort``."
msgstr ""

# 42ab9b33e33847d780b7fb7d00b48f12
#: ../source/reference/command/findAndModify.txt:198
msgid ""
"The ``update`` :operator:`increments <$inc>` the value of the ``score`` "
"field by 1."
msgstr ""

# 6e7117a56d494e93ab554718f3511efe
#: ../source/reference/command/findAndModify.txt:201
msgid "The command returns a document with the following fields:"
msgstr ""

# ab8ff4e5cee04269b6b84ecfcb481b17
#: ../source/reference/command/findAndModify.txt:203
msgid ""
"The ``lastErrorObject`` field that contains the details of the command, "
"including the field ``updatedExisting`` which is ``true``, and"
msgstr ""

# cdeca670eeb44097abba3904713a012e
#: ../source/reference/command/findAndModify.txt:207
msgid ""
"The ``value`` field that contains the original (i.e. pre-modification) "
"document selected for this update:"
msgstr ""

# 8db0c137cb9e4816a20258f806a616c0
#: ../source/reference/command/findAndModify.txt:230
msgid ""
"To return the modified document in the ``value`` field, add the ``new:true``"
" option to the command."
msgstr ""

# a61c59b3e20c40cc9925f364a8754a1d
#: ../source/reference/command/findAndModify.txt:233
msgid ""
"If no document match the ``query`` condition, the command returns a document"
" that contains ``null`` in the ``value`` field:"
msgstr ""

# 2bc8f7cc5f184d8289a939fbbea614db
#: ../source/reference/command/findAndModify.txt:241
msgid ""
"The :program:`mongo` shell and many :term:`drivers <driver>` provide a "
":method:`~db.collection.findAndModify()` helper method. Using the shell "
"helper, this previous operation can take the following form:"
msgstr ""

# 127a4c2396884b6295f85c2417f5fe2e
#: ../source/reference/command/findAndModify.txt:293
msgid ""
"The ``lastErrorObject`` field that contains the details of the command, "
"including the field ``upserted`` that contains the ``ObjectId`` of the newly"
" inserted document, and"
msgstr ""

# 54fc54ae99384cec9a8dc4c801c33af3
#: ../source/reference/command/findAndModify.txt:297
msgid ""
"The ``value`` field that contains an empty document ``{}`` as the original "
"document because the command included the ``sort`` option:"
msgstr ""

# 9c4983e2b7f14f078aa4968255c16cdd
#: ../source/reference/command/findAndModify.txt:317
msgid ""
"If the command did **not** include the ``sort`` option, the ``value`` field "
"would contain ``null``:"
msgstr ""

# ac7f60c6e27a4f5db4c778a97e5e51ed
#: ../source/reference/command/findAndModify.txt:357
msgid ""
"The command returns the newly inserted document in the ``value`` field:"
msgstr ""

# cc142a278e74466f99db8bad5d320a99
#: ../source/reference/command/findAndModify.txt:103
msgid ""
"Consider an example where no document with the name ``Andy`` exists and "
"multiple clients issue the following command:"
msgstr ""

# bda4184b1c8a4714807028bcb85d1115
#: ../source/reference/command/findAndModify.txt:126
msgid ""
"Exactly one :dbcommand:`findAndModify` would successfully insert a new "
"document."
msgstr ""

# 9b0d2b75e3134702a84bb478463cc962
#: ../source/reference/command/findAndModify.txt:129
msgid ""
"Zero or more :dbcommand:`findAndModify` commands would update the newly "
"inserted document."
msgstr ""

# 7c80c991239f4e85a7db20d91982cd3e
#: ../source/reference/command/findAndModify.txt:132
msgid ""
"Zero or more :dbcommand:`findAndModify` commands would fail when they "
"attempted to insert a duplicate. If the command fails due to a unique index "
"constraint violation, you can retry the command. Absent a delete of the "
"document, the retry should not fail."
msgstr ""

# 0b15fd6af4c14b65b4b1abaae1747389
#: ../source/reference/command/findAndModify.txt:140
msgid ""
"When using :dbcommand:`findAndModify` in a :term:`sharded <sharding>` "
"environment, the ``query`` must contain the :term:`shard key` for all "
"operations against the shard cluster. :dbcommand:`findAndModify` operations "
"issued against :program:`mongos` instances for non-sharded collections "
"function normally."
msgstr ""

# 1dde5d9a3bab447e9a891f8f5218cc08
#: ../source/reference/command/findAndModify.txt:150
msgid ""
"This command obtains a write lock on the affected database and will block "
"other operations until it has completed; however, typically the write lock "
"is short lived and equivalent to other similar "
":method:`~db.collection.update()` operations."
msgstr ""

#: ../source/reference/command/findAndModify.txt:12
msgid "Definition"
msgstr ""

#: ../source/reference/command/findAndModify.txt:16
msgid ""
"The :dbcommand:`findAndModify` command modifies and returns a single "
"document. By default, the returned document does not include the "
"modifications made on the update. To return the document with the "
"modifications made on the update, use the ``new`` option."
msgstr ""

#: ../source/reference/command/findAndModify.txt:44
msgid "Output"
msgstr ""

#: ../source/reference/command/findAndModify.txt:51
msgid ""
"The ``updatedExisting`` field **only** appears if the command specifies an "
"``update`` or an ``update`` with ``upsert: true``; i.e. the field does not "
"appear for a ``remove``."
msgstr ""

#: ../source/reference/command/findAndModify.txt:55
msgid ""
"The ``upserted`` field **only** appears if the ``update`` with the ``upsert:"
" true`` operation results in an insertion."
msgstr ""

#: ../source/reference/command/findAndModify.txt:80
msgid ""
"for ``update`` with ``upsert: true`` operation that results in an insertion,"
" if the command also specifies ``new`` is ``false`` **and** specifies a "
"``sort``, the return document has a ``lastErrorObject``, ``value``, and "
"``ok`` fields, but the ``value`` field holds an empty document ``{}``."
msgstr ""

#: ../source/reference/command/findAndModify.txt:86
msgid ""
"for ``update`` with ``upsert: true`` operation that results in an insertion,"
" if the command also specifies ``new`` is ``false`` but does **not** specify"
" a ``sort``, the return document has a ``lastErrorObject``, ``value``, and "
"``ok`` fields, but the ``value`` field holds a ``null``."
msgstr ""

#: ../source/reference/command/findAndModify.txt:93
msgid "Behavior"
msgstr ""

#: ../source/reference/command/findAndModify.txt:95
msgid ""
"When the :dbcommand:`findAndModify` command includes the ``upsert: true`` "
"option **and** the query field(s) is not uniquely indexed, the command could"
" insert a document multiple times in certain circumstances. For instance, if"
" multiple clients issue the :dbcommand:`findAndModify` command and these "
"commands complete the ``find`` phase before any one starts the ``modify`` "
"phase, these commands could insert the same document."
msgstr ""

#: ../source/reference/command/findAndModify.txt:118
msgid ""
"If all the commands finish the ``query`` phase before any command starts the"
" ``modify`` phase, **and** there is no unique index on the ``name`` field, "
"the commands may all result in an insert. To prevent this condition, create "
"a :ref:`unique index <index-type-unique>` on the ``name`` field. With the "
"unique index in place, then the multiple :dbcommand:`findAndModify` commands"
" would observe one of the following behaviors:"
msgstr ""

#: ../source/reference/command/findAndModify.txt:138
msgid "Sharded Collections"
msgstr ""

#: ../source/reference/command/findAndModify.txt:148
msgid "Concurrency"
msgstr ""

#: ../source/reference/command/findAndModify.txt:158
msgid "Comparisons with the ``update`` Method"
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:1
msgid ""
"When updating a document, |operation| and the "
":method:`~db.collection.update()` method operate differently:"
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:4
msgid ""
"By default, both operations modify a single document. However, the "
":method:`~db.collection.update()` method with its ``multi`` option can "
"modify more than one document."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:8
msgid ""
"If multiple documents match the update criteria, for |operation|, you can "
"specify a ``sort`` to provide some measure of control on which document to "
"update."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:12
msgid ""
"With the default behavior of the :method:`~db.collection.update()` method, "
"you cannot specify which single document to update when multiple documents "
"match."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:16
msgid ""
"By default, |operation| method returns |return-object|. To obtain the "
"updated document, use the ``new`` option."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:19
msgid ""
"The :method:`~db.collection.update()` method returns a :method:`WriteResult`"
" object that contains the status of the operation. To return the updated "
"document, use the :method:`~db.collection.find()` method. However, other "
"updates may have modified the document between your update and the document "
"retrieval. Also, if the update modified only a single document but multiple "
"documents matched, you will need to use additional logic to identify the "
"updated document."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:27
msgid ""
"You cannot specify a :doc:`write concern </core/write-concern>` to "
"|operation| to override the default write concern whereas, starting in "
"MongoDB 2.6, you can specify a write concern to the "
":method:`~db.collection.update()` method."
msgstr ""

#: ../source/includes/fact-findAndModify-update-comparison.rst:32
msgid ""
"When modifying a *single* document, both |operation| and the "
":method:`~db.collection.update()` method *atomically* update the document. "
"See :doc:`/tutorial/isolate-sequence-of-operations` for more details about "
"interactions and order of operations of these methods."
msgstr ""

#: ../source/reference/command/findAndModify.txt:167
msgid "Examples"
msgstr ""

#: ../source/reference/command/findAndModify.txt:170
msgid "Update and Return"
msgstr ""

#: ../source/reference/command/findAndModify.txt:254
msgid ""
"However, the :method:`~db.collection.findAndModify()` shell helper method "
"returns only the unmodified document, or if ``new`` is ``true``, the "
"modified document."
msgstr ""

#: ../source/reference/command/findAndModify.txt:269
msgid "``upsert: true``"
msgstr ""

#: ../source/reference/command/findAndModify.txt:271
msgid ""
"The following :dbcommand:`findAndModify` command includes the ``upsert: "
"true`` option for the ``update`` operation to either update a matching "
"document or, if no matching document exists, create a new document:"
msgstr ""

#: ../source/reference/command/findAndModify.txt:287
msgid ""
"If the command finds a matching document, the command performs an update."
msgstr ""

#: ../source/reference/command/findAndModify.txt:289
msgid ""
"If the command does **not** find a matching document, the ``update`` with "
":term:`upsert: true <upsert>` operation results in an insertion and returns "
"a document with the following fields:"
msgstr ""

#: ../source/reference/command/findAndModify.txt:333
msgid "Return New Document"
msgstr ""

#: ../source/reference/command/findAndModify.txt:335
msgid ""
"The following :dbcommand:`findAndModify` command includes both ``upsert: "
"true`` option and the ``new:true`` option. The command either updates a "
"matching document and returns the updated document or, if no matching "
"document exists, inserts a document and returns the newly inserted document "
"in the ``value`` field."
msgstr ""

#: ../source/reference/command/findAndModify.txt:341
msgid ""
"In the following example, no document in the ``people`` collection matches "
"the ``query`` condition:"
msgstr ""

#~ msgid ""
#~ "The :dbcommand:`findAndModify` command atomically modifies and returns a "
#~ "single document. By default, the returned document does not include the "
#~ "modifications made on the update. To return the document with the "
#~ "modifications made on the update, use the ``new`` option."
#~ msgstr ""

#~ msgid "Required. The collection against which to run the command."
#~ msgstr ""

#~ msgid ""
#~ "Optional. Specifies the selection criteria for the modification. The "
#~ "``query`` field employs the same :ref:`query selectors <query-selectors>` as"
#~ " used in the :method:`~db.collection.find()` method. Although the query may "
#~ "match multiple documents, :dbcommand:`findAndModify` will only select one "
#~ "document to modify."
#~ msgstr ""

#~ msgid ""
#~ "Optional. Determines which document the operation will modify if the query "
#~ "selects multiple documents. :dbcommand:`findAndModify` will modify the first"
#~ " document in the sort order specified by this argument."
#~ msgstr ""

#~ msgid ""
#~ "Must specify either the ``remove`` or the ``update`` field in the "
#~ ":dbcommand:`findAndModify` command. When ``true``, removes the selected "
#~ "document. The default is ``false``."
#~ msgstr ""

#~ msgid ""
#~ "Must specify either the ``remove`` or the ``update`` field in the "
#~ ":dbcommand:`findAndModify` command. The ``update`` field employs the same "
#~ ":ref:`update operators <update-operators>` or ``field: value`` "
#~ "specifications to modify the selected document."
#~ msgstr ""

#~ msgid ""
#~ "Optional. When ``true``, returns the modified document rather than the "
#~ "original. The :dbcommand:`findAndModify` method ignores the ``new`` option "
#~ "for ``remove`` operations. The default is ``false``."
#~ msgstr ""

#~ msgid ""
#~ "Optional. A subset of fields to return. The ``fields`` document specifies an"
#~ " inclusion of a field with ``1``, as in the following:  .. code-block:: "
#~ "javascript     fields: { <field1>: 1, <field2>: 1, ... }  See "
#~ ":ref:`projection <read-operations-projection>`."
#~ msgstr ""

#~ msgid ""
#~ "Optional. A subset of fields to return. The ``fields`` document specifies an"
#~ " inclusion of a field with ``1``, as in the following:"
#~ msgstr ""

#~ msgid "See :ref:`projection <read-operations-projection>`."
#~ msgstr ""

#~ msgid ""
#~ "Optional. Used in conjunction with the ``update`` field. When ``true``, the "
#~ ":dbcommand:`findAndModify` command creates a new document if the ``query`` "
#~ "returns no documents. The default is ``false``."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`findAndModify` command returns a document, similar to the "
#~ "following:"
#~ msgstr ""

#~ msgid ""
#~ "The ``updatedExisting`` field **only** appears if the command is either an "
#~ "``update`` or an ``upsert``."
#~ msgstr ""

#~ msgid ""
#~ "The ``upserted`` field **only** appears if the command is an ``upsert``."
#~ msgstr ""

#~ msgid ""
#~ "for an ``upsert`` operation that performs an insert, when ``new`` is "
#~ "``false``, **and** includes a ``sort`` option, the return document has "
#~ "``lastErrorObject``, ``value``, and ``ok`` fields, but the ``value`` field "
#~ "holds an empty document ``{}``."
#~ msgstr ""

#~ msgid ""
#~ "for an ``upsert`` that performs an insert, when ``new`` is ``false`` "
#~ "**without** a specified ``sort`` the return document has "
#~ "``lastErrorObject``, ``value``, and ``ok`` fields, but the ``value`` field "
#~ "holds a ``null``."
#~ msgstr ""

#~ msgid ""
#~ "Previously, the command returned an empty document (e.g. ``{}``) in the "
#~ "``value`` field. See :ref:`the 2.2 release notes <2.2-findandmodify-returns-"
#~ "null>` for more information."
#~ msgstr ""

#~ msgid "Consider the following examples:"
#~ msgstr ""

#~ msgid ""
#~ "However, the :method:`~db.collection.findAndModify()` shell helper method "
#~ "returns just the unmodified document, or the modified document when ``new`` "
#~ "is ``true``."
#~ msgstr ""

#~ msgid ""
#~ "The following :dbcommand:`findAndModify` command includes the ``upsert: "
#~ "true`` option to insert a new document if no document matches the ``query`` "
#~ "condition:"
#~ msgstr ""

#~ msgid ""
#~ "If the command does **not** find a matching document, the command performs "
#~ "an upsert and returns a document with the following fields:"
#~ msgstr ""

#~ msgid ""
#~ "The following :dbcommand:`findAndModify` command includes both ``upsert: "
#~ "true`` option and the ``new:true`` option to return the newly inserted "
#~ "document in the ``value`` field if a document matching the ``query`` is not "
#~ "found:"
#~ msgstr ""

#~ msgid ""
#~ "When the :dbcommand:`findAndModify` command includes the ``upsert: true`` "
#~ "option **and** the query field(s) is not uniquely indexed, the method could "
#~ "insert a document multiple times in certain circumstances. For instance, if "
#~ "multiple clients issue the :dbcommand:`findAndModify` command and these "
#~ "commands complete the ``find`` phase before any one starts the ``modify`` "
#~ "phase, these commands could insert the same document."
#~ msgstr ""

#~ msgid ""
#~ "If all the commands finish the ``query`` phase before any command starts the"
#~ " ``modify`` phase, **and** there is no unique index on the ``name`` field, "
#~ "the commands may all perform an upsert. To prevent this condition, create a "
#~ ":ref:`unique index <index-type-unique>` on the ``name`` field. With the "
#~ "unique index in place, then the multiple :dbcommand:`findAndModify` commands"
#~ " would observe one of the following behaviors:"
#~ msgstr ""
