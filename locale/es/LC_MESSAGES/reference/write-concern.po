# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 18:45+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# d64c63509bd34d3b8b06c4bc53fd7433
#: ../source/reference/write-concern.txt:6
msgid "Write Concern Reference"
msgstr ""

# 6a1834578f1c48a3994b896a69a8201c
#: ../source/reference/write-concern.txt:22
msgid "Read Isolation Behavior"
msgstr ""

# cf9eef82ab574ac3a288d0b148eb7276
#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr ""

# e7a5f3e3f6f543b09406b364b5a5c19c
#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr ""

# 855faf18005a4c6cae1167a69c37f886
#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""

# 28c0dab2ebe8400d85ad9d2d900c59bf
#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr ""

# 8819034b3eb8420ebeadad9a96e534e4
#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr ""

# 42761cb0189b491aa0937961b3048836
#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr ""

# 298e8ef9baba481e9606d2b2b4d5e36f
#: ../source/reference/write-concern.txt:27
msgid "Available Write Concern"
msgstr ""

# bda73172e0ba43a68b2963e7f7786475
#: ../source/reference/write-concern.txt:69
msgid ""
"Disables basic acknowledgment of write operations, but returns information "
"about socket exceptions and networking errors to the application."
msgstr ""

# dc4ef5653dc240b089538e158293c356
#: ../source/reference/write-concern.txt:62
msgid ""
"Provides acknowledgment of write operations on a standalone "
":program:`mongod` or the :term:`primary` in a replica set."
msgstr ""

# eac57718110a401686edd06bac8867b7
#: ../source/reference/write-concern.txt:94
msgid ""
"Confirms that write operations have propagated to the majority of configured"
" replica set: a majority of the set's configured members must acknowledge "
"the write operation before it succeeds. This allows you to avoid hard coding"
" assumptions about the size of your replica set into your application."
msgstr ""

#: ../source/reference/write-concern.txt:10
msgid ""
":doc:`Write concern </core/write-concern>` describes the guarantee that "
"MongoDB provides when reporting on the success of a write operation."
msgstr ""

#: ../source/reference/write-concern.txt:13
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations and eliminates the need "
"to call the :dbcommand:`getLastError` command. Previous versions required a "
":dbcommand:`getLastError` command immediately after a write operation to "
"specify the write concern."
msgstr ""

#: ../source/reference/write-concern.txt:29
msgid ""
"Write concern can include the :ref:`w <wc-w>` option to specify the required"
" number of acknowledgments before returning, the :ref:`j <wc-j>` option to "
"require writes to the journal before returning, and :ref:`wtimeout <wc-"
"wtimeout>` option to specify a time limit to prevent write operations from "
"blocking indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:35
msgid ""
"In sharded clusters, :program:`mongos` instances will pass the write concern"
" on to the shard."
msgstr ""

#: ../source/reference/write-concern.txt:41
msgid "``w`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:43
msgid ""
"The ``w`` option provides the ability to disable write concern entirely *as "
"well as* specify the write concern for :term:`replica sets <replica set>`."
msgstr ""

#: ../source/reference/write-concern.txt:47
msgid ""
"MongoDB uses ``w: 1`` as the default write concern. ``w: 1`` provides basic "
"receipt acknowledgment."
msgstr ""

#: ../source/reference/write-concern.txt:50
msgid "The ``w`` option accepts the following values:"
msgstr ""

#: ../source/reference/write-concern.txt:56
msgid "Value"
msgstr ""

#: ../source/reference/write-concern.txt:58
msgid "Description"
msgstr ""

#: ../source/reference/write-concern.txt:60
msgid "``1``"
msgstr ""

#: ../source/reference/write-concern.txt:65
msgid "This is the default write concern for MongoDB."
msgstr ""

#: ../source/reference/write-concern.txt:67
msgid "``0``"
msgstr ""

#: ../source/reference/write-concern.txt:73
msgid ""
"If you disable basic write operation acknowledgment but require journal "
"commit acknowledgment, the journal commit prevails, and the server will "
"require that :program:`mongod` acknowledge the write operation."
msgstr ""

#: ../source/reference/write-concern.txt:78
msgid "<Number greater than 1>"
msgstr ""

#: ../source/reference/write-concern.txt:80
msgid ""
"Guarantees that write operations have propagated successfully to the "
"specified number of replica set members including the primary."
msgstr ""

#: ../source/reference/write-concern.txt:84
msgid ""
"For example, ``w: 2`` indicates acknowledgements from the primary and at "
"least one secondary."
msgstr ""

#: ../source/reference/write-concern.txt:87
msgid ""
"If you set ``w`` to a number that is greater than the number of set members "
"that hold data, MongoDB waits for the non-existent members to become "
"available, which means MongoDB blocks indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:92
msgid "``\"majority\"``"
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr ""

#: ../source/reference/write-concern.txt:102
msgid "<tag set>"
msgstr ""

#: ../source/reference/write-concern.txt:104
msgid ""
"By specifying a :ref:`tag set <replica-set-configuration-tag-sets>`, you can"
" have fine-grained control over which replica set members must acknowledge a"
" write operation to satisfy the required level of write concern."
msgstr ""

#: ../source/reference/write-concern.txt:112
msgid "``j`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:114
msgid ""
"The ``j`` option confirms that the :program:`mongod` instance has written "
"the data to the on-disk journal. This ensures that data is not lost if the "
":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
"enable."
msgstr ""

#: ../source/reference/write-concern.txt:119
msgid ""
"Specifying a write concern that includes ``j: true`` to a :program:`mongod` "
"or :program:`mongos` running with :option:`--nojournal` option now errors. "
"Previous versions would ignore the ``j: true``."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"Requiring *journaled* write concern in a replica set only requires a journal"
" commit of the write operation to the :term:`primary` of the set regardless "
"of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/reference/write-concern.txt:130
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:132
msgid ""
"This option specifies a time limit, in milliseconds, for the write concern. "
"``wtimeout`` is only applicable for ``w`` values greater than ``1``."
msgstr ""

#: ../source/reference/write-concern.txt:136
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern is not fulfilled. When "
"these write operations return, MongoDB **does not** undo successful data "
"modifications performed before the write concern exceeded the ``wtimeout`` "
"time limit."
msgstr ""

#: ../source/reference/write-concern.txt:142
msgid ""
"If you do not specify the ``wtimeout`` option and the level of write concern"
" is unachievable, the write operation will block indefinitely. Specifying a "
"``wtimeout`` value of ``0`` is equivalent to a write concern without the "
"``wtimeout`` option."
msgstr ""

#: ../source/reference/write-concern.txt:147
msgid ""
":doc:`Write Concern Introduction </core/write-concern>` and :ref:`Write "
"Concern for Replica Sets <replica-set-write-concern>`."
msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ ":term:`Write concern` describes the guarantee that MongoDB provides when "
#~ "reporting on the success of a write operation. The strength of the write "
#~ "concerns determine the level of guarantee. When inserts, updates and deletes"
#~ " have a *weak* write concern, write operations return quickly. In some "
#~ "failure cases, write operations issued with weak write concerns may not "
#~ "persist. With *stronger* write concerns, clients wait after sending a write "
#~ "operation for MongoDB to confirm the write operations."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB provides different levels of write concern to better address the "
#~ "specific needs of applications. Clients may adjust write concern to ensure "
#~ "that the most important operations persist successfully to an entire MongoDB"
#~ " deployment. For other less critical operations, clients can adjust the "
#~ "write concern to ensure faster performance rather than ensure persistence to"
#~ " the entire deployment."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`/core/write-concern` for an introduction to write concern in MongoDB."
#~ msgstr ""

#~ msgid ""
#~ "To provide write concern, :doc:`drivers </applications/drivers>` issue the "
#~ ":dbcommand:`getLastError` command after a write operation and receive a "
#~ "document with information about the last operation. This document's ``err`` "
#~ "field contains either:"
#~ msgstr ""

#~ msgid ""
#~ "``null``, which indicates the write operations have completed successfully, "
#~ "or"
#~ msgstr ""

#~ msgid "a description of the last error encountered."
#~ msgstr ""

#~ msgid ""
#~ "The definition of a \"successful write\" depends on the arguments specified "
#~ "to :dbcommand:`getLastError`, or in replica sets, the configuration of "
#~ ":data:`~local.system.replset.settings.getLastErrorDefaults`. When deciding "
#~ "the level of write concern for your application, see the introduction to "
#~ ":doc:`/core/write-concern`."
#~ msgstr ""

#~ msgid ""
#~ "The :dbcommand:`getLastError` command has the following options to configure"
#~ " write concern requirements:"
#~ msgstr ""

#~ msgid "``j`` or \"journal\" option"
#~ msgstr ""

#~ msgid ""
#~ "This option confirms that the :program:`mongod` instance has written the "
#~ "data to the on-disk journal and ensures data is not lost if the "
#~ ":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
#~ "enable, as shown in the following example:"
#~ msgstr ""

#~ msgid ""
#~ "If you set :data:`journal` to true, and the :program:`mongod` does not have "
#~ "journaling enabled, as with :setting:`nojournal`, then "
#~ ":dbcommand:`getLastError` will provide basic receipt acknowledgment, and "
#~ "will include a ``jnote`` field in its return document."
#~ msgstr ""

#~ msgid "``w`` option"
#~ msgstr ""

#~ msgid ""
#~ "This option provides the ability to disable write concern entirely *as well "
#~ "as* specifies the write concern operations for :term:`replica sets <replica "
#~ "set>`. See :doc:`Write Concern Considerations </core/write-concern>` for an "
#~ "introduction to the fundamental concepts of write concern. By default, the "
#~ "``w`` option is set to ``1``, which provides basic receipt acknowledgment on"
#~ " a single :program:`mongod` instance or on the :term:`primary` in a replica "
#~ "set."
#~ msgstr ""

#~ msgid "The ``w`` option takes the following values:"
#~ msgstr ""

#~ msgid "``0``:"
#~ msgstr ""

#~ msgid ""
#~ "If you disable basic write operation acknowledgment but require journal "
#~ "commit acknowledgment, the journal commit prevails, and the driver will "
#~ "require that :program:`mongod` will acknowledge the write operation."
#~ msgstr ""

#~ msgid "``1``:"
#~ msgstr ""

#~ msgid "*A number greater than 1*:"
#~ msgstr ""

#~ msgid ""
#~ "Guarantees that write operations have propagated successfully to the "
#~ "specified number of replica set members including the primary. If you set "
#~ "``w`` to a number that is greater than the number of set members that hold "
#~ "data, MongoDB waits for the non-existent members to become available, which "
#~ "means MongoDB blocks indefinitely."
#~ msgstr ""

#~ msgid "``majority``:"
#~ msgstr ""

#~ msgid ""
#~ "In :doc:`Master/Slave </core/master-slave>` deployments, "
#~ ":dbcommand:`getLastError` treats ``w:majority`` as equivalent to ``w:1``. In"
#~ " earlier versions of MongoDB, ``w:majority`` produces an error in "
#~ ":doc:`master/slave </core/master-slave>` deployments."
#~ msgstr ""

#~ msgid "*A tag set*:"
#~ msgstr ""

#~ msgid ""
#~ "By specifying a :ref:`tag set <replica-set-configuration-tag-sets>` you can "
#~ "have fine-grained control over which replica set members must acknowledge a "
#~ "write operation to satisfy the required level of write concern."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`getLastError` also supports a ``wtimeout`` setting which allows "
#~ "clients to specify a timeout for the write concern: if you don't specify "
#~ "``wtimeout``, or if you give it a value of ``0``, and the :program:`mongod` "
#~ "cannot fulfill the write concern the :dbcommand:`getLastError` will block, "
#~ "potentially forever."
#~ msgstr ""

#~ msgid ""
#~ "For more information on write concern and replica sets, see :ref:`Write "
#~ "Concern for Replica Sets <replica-set-write-concern>` for more information."
#~ msgstr ""

#~ msgid ""
#~ "In sharded clusters, :program:`mongos` instances will pass write concern on "
#~ "to the shard :program:`mongod` instances."
#~ msgstr ""
