# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 16:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 77618ce9fc814cdf96c76d530d3ca31b
#: ../source/faq/developers.txt:5
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

# d9dc39832f7540209e95238cbaf123cd
#: ../source/faq/developers.txt:9
msgid ""
"This document answers common questions about application development using "
"MongoDB."
msgstr ""

# 4b9e91ffe81a49788488716546cf937e
#: ../source/faq/developers.txt:12
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

# 37a0bcbede8b4592a5a29c17550084da
#: ../source/faq/developers.txt:19
msgid "What is a namespace in MongoDB?"
msgstr ""

# 32000831ecf843c681ecb19cd5fd9deb
#: ../source/faq/developers.txt:21
msgid ""
"A \"namespace\" is the concatenation of the :term:`database` name and the "
":term:`collection` names [#indexes-are-namespaces]_ with a period character "
"in between."
msgstr ""

# 51145b6f0add498995b7da91f2d5537f
#: ../source/faq/developers.txt:25
msgid ""
"Collections are containers for documents that share one or more indexes. "
"Databases are groups of collections stored on disk using a single set of "
"data files. [#ns-limit]_"
msgstr ""

# d6f245f20b50444bbd7af5bce73b541b
#: ../source/faq/developers.txt:29
msgid ""
"For an example ``acme.users`` namespace, ``acme`` is the database name and "
"``users`` is the collection name. Period characters **can** occur in "
"collection names, so that ``acme.user.history`` is a valid namespace, with "
"``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

# b15f3cf55652482abca4519402beac71
#: ../source/faq/developers.txt:35
msgid ""
"While data models like this appear to support nested collections, the "
"collection namespace is flat, and there is no difference from the "
"perspective of MongoDB between ``acme``, ``acme.users``, and "
"``acme.records``."
msgstr ""

# 2c21f851103343b6be4ea88e85c03407
#: ../source/faq/developers.txt:40
msgid "Each index also has its own namespace."
msgstr ""

# b39018ff8ddd4af69b55dfb29494f195
#: ../source/faq/developers.txt:42
msgid ""
"MongoDB database have a configurable limit on the :limit:`number of "
"namespaces <Number of Namespaces>` in a database."
msgstr ""

# 1da1d0f72cdf4eb29ba06bb6408ae896
#: ../source/faq/developers.txt:46
msgid "How do you copy all objects from one collection to another?"
msgstr ""

# 502eebf04fab438d9a5fc7850ac37a0f
#: ../source/faq/developers.txt:48
msgid ""
"In the :program:`mongo` shell, you can use the following operation to "
"duplicate the entire collection:"
msgstr ""

# 63f1a26284e343d4a337415068d5fc9b
#: ../source/includes/warning-copyto-loss-of-type-fidelity.rst:3
msgid ""
"When using :method:`db.collection.copyTo()` check field types to ensure that"
" the operation does not remove type information from documents during the "
"translation from :term:`BSON` to :term:`JSON`. Consider using "
":method:`~db.cloneCollection()` to maintain type fidelity."
msgstr ""

# 2d61f3a76fd049c4bc51640140e2cbb6
#: ../source/faq/developers.txt:57
msgid ""
"Also consider the :dbcommand:`cloneCollection` :term:`command <database "
"command>` that may provide some of this functionality."
msgstr ""

# fce354ad9ef64a0fb0b41fa15161ae80
#: ../source/faq/developers.txt:61
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

# d9c728eadd1d429f9b2cd0c1f7cf4204
# 24828bf55e574103b447125825ba49e8
#: ../source/faq/developers.txt:63 ../source/faq/developers.txt:140
msgid "Yes."
msgstr ""

# ac00443e1ae04aaeaeb7554b45cad60d
#: ../source/faq/developers.txt:65
msgid ""
"When you use :method:`~db.collection.remove()`, the object will no longer "
"exist in MongoDB's on-disk data storage."
msgstr ""

# 519f60d87201485eb4135a559baa0d52
#: ../source/faq/developers.txt:69
msgid "When does MongoDB write updates to disk?"
msgstr ""

# dc55545e0bc745268f686981c5b0bab7
#: ../source/faq/developers.txt:71
msgid ""
"MongoDB flushes writes to disk on a regular interval. In the default "
"configuration, MongoDB writes data to the main data files on disk every 60 "
"seconds and commits the :term:`journal` roughly every 100 milliseconds. "
"These values are configurable with the "
":setting:`~storage.journal.commitIntervalMs` and "
":setting:`~storage.syncPeriodSecs`."
msgstr ""

# 663e1208bf074f72b25e68a0aa761706
#: ../source/faq/developers.txt:77
msgid ""
"These values represent the *maximum* amount of time between the completion "
"of a write operation and the point when the write is durable in the journal,"
" if enabled, and when MongoDB flushes data to the disk. In many cases "
"MongoDB and the operating system flush data to disk more frequently, so that"
" the above values represents a theoretical maximum."
msgstr ""

# 4125b9a62d2947d298218a2c49f8c8da
#: ../source/faq/developers.txt:92
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

# fb1b5ba0fd0a408781f4e0375f76b1a8
#: ../source/faq/developers.txt:94
msgid ""
"MongoDB does not have support for traditional locking or complex "
"transactions with rollback. MongoDB aims to be lightweight, fast, and "
"predictable in its performance. This is similar to the MySQL MyISAM "
"autocommit model. By keeping transaction support extremely simple, MongoDB "
"can provide greater performance especially for :term:`partitioned "
"<partition>` or :term:`replicated <replication>` systems with a number of "
"database server processes."
msgstr ""

# ee111661e9504c2ca0ac60e75c020e09
#: ../source/faq/developers.txt:102
msgid ""
"MongoDB *does* have support for atomic operations *within* a single "
"document. Given the possibilities provided by nested documents, this feature"
" provides support for a large number of use-cases."
msgstr ""

# 05cd47de477d491a8d21ac16842563eb
#: ../source/faq/developers.txt:106
msgid "The :doc:`/tutorial/isolate-sequence-of-operations` page."
msgstr ""

# 3d7b10bbd0f241f388bbf42020ce81f2
#: ../source/faq/developers.txt:109
msgid "How do you aggregate data with MongoDB?"
msgstr ""

# 2c286405d82e410cabea47064659fe01
#: ../source/faq/developers.txt:111
msgid ""
"In version 2.1 and later, you can use the new :doc:`aggregation framework "
"</core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

# 7f394750e7c04ef497eec801eebe09a9
#: ../source/faq/developers.txt:115
msgid ""
"MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` "
"command, as well as basic aggregation with the :dbcommand:`group`, "
":dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

# 17493738ccff4f38b1fa61fd2986c46a
#: ../source/faq/developers.txt:120
msgid "The :doc:`/aggregation` page."
msgstr ""

# 73e2c55930be4cc4ac6e7da0ab13f196
#: ../source/faq/developers.txt:123
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

# 670ed37629b748b885feb2b251ec573c
#: ../source/faq/developers.txt:125
msgid ""
"If you see a very large number connection and re-connection messages in your"
" MongoDB log, then clients are frequently connecting and disconnecting to "
"the MongoDB server. This is normal behavior for applications that do not use"
" request pooling, such as CGI. Consider using FastCGI, an Apache Module, or "
"some other kind of persistent application server to decrease the connection "
"overhead."
msgstr ""

# b6442078d81d403d9337593f70612322
#: ../source/faq/developers.txt:132
msgid ""
"If these connections do not impact your performance you can use the run-time"
" :setting:`~systemLog.quiet` option or the command-line option "
":option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

# 8383c27350b04fa1a595555bf4997bc3
#: ../source/faq/developers.txt:138
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

# cb1e86571b2545bc9c04ee3987d40b6b
#: ../source/faq/developers.txt:142
msgid ""
"MongoDB users of all sizes have had a great deal of success using MongoDB on"
" the EC2 platform using EBS disks."
msgstr ""

# 73f390ef63a64e54bdaac4dbf3a977a1
#: ../source/faq/developers.txt:145
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

# 9d2aefda51704ecc89d31546d0cd02c1
#: ../source/faq/developers.txt:148
msgid "Why are MongoDB's data files so large?"
msgstr ""

# 554ac99ea3c1490c90a3a5e4086bbb88
#: ../source/faq/developers.txt:154
msgid ":ref:`faq-disk-size`"
msgstr ""

# 409f371aa7c94a4b94d035e386407c7e
#: ../source/faq/developers.txt:159
msgid "How do I optimize storage use for small documents?"
msgstr ""

# 65f85ddab10740e0b78a468c4ff593b0
#: ../source/faq/developers.txt:161
msgid ""
"Each MongoDB document contains a certain amount of overhead. This overhead "
"is normally insignificant but becomes significant if all documents are just "
"a few bytes, as might be the case if the documents in your collection only "
"have one or two fields."
msgstr ""

# af4d2d9d9749475d9d6de3b08ab9759b
#: ../source/faq/developers.txt:166
msgid ""
"Consider the following suggestions and strategies for optimizing storage "
"utilization for these collections:"
msgstr ""

# 08f628bc3a85467ea91fffa22d723f5d
#: ../source/faq/developers.txt:169
msgid "Use the ``_id`` field explicitly."
msgstr ""

# fb387ab8df4c426898b214c8c31f459f
#: ../source/faq/developers.txt:171
msgid ""
"MongoDB clients automatically add an ``_id`` field to each document and "
"generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. "
"Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents"
" this may account for a significant amount of space."
msgstr ""

# be58ac8df3594f7195d20edb4e218f89
#: ../source/faq/developers.txt:177
msgid ""
"To optimize storage use, users can specify a value for the ``_id`` field "
"explicitly when inserting documents into the collection. This strategy "
"allows applications to store a value in the ``_id`` field that would have "
"occupied space in another portion of the document."
msgstr ""

# 7f40e61c3f1f428380b5bb3706a86217
#: ../source/faq/developers.txt:182
msgid ""
"You can store any value in the ``_id`` field, but because this value serves "
"as a primary key for documents in the collection, it must uniquely identify "
"them. If the field's value is not unique, then it cannot serve as a primary "
"key as there would be collisions in the collection."
msgstr ""

# 682d8ec869b24bcfb14d2e66b9c266ae
#: ../source/faq/developers.txt:188
msgid "Use shorter field names."
msgstr ""

# 1130b05e26e94fb08d04fa6368d48630
#: ../source/faq/developers.txt:190
msgid ""
"MongoDB stores all field names in every document. For most documents, this "
"represents a small fraction of the space used by a document; however, for "
"small documents the field names may represent a proportionally large amount "
"of space. Consider a collection of documents that resemble the following:"
msgstr ""

# e0080b3b1e9f4b89b5b1afb0fa626cce
#: ../source/faq/developers.txt:214
msgid "In general it is not necessary to use short field names."
msgstr ""

# 1f83b88e46a745b6b2c017141abccd32
#: ../source/faq/developers.txt:216
msgid "Embed documents."
msgstr ""

# a95dcbc6b8bf44629562b2d6273ade9b
#: ../source/faq/developers.txt:218
msgid ""
"In some cases you may want to embed documents in other documents and save on"
" the per-document overhead."
msgstr ""

# 8f4ea938d7a746d8949f8f36d5d1b8c5
#: ../source/faq/developers.txt:224
msgid "When should I use GridFS?"
msgstr ""

# c1b56daf0d054e2d8b0350d0abad10d6
#: ../source/faq/developers.txt:226
msgid ""
"For documents in a MongoDB collection, you should always use :term:`GridFS` "
"for storing files larger than 16 MB."
msgstr ""

# 1f8511f1ec8e411fb06082b92969c48c
#: ../source/faq/developers.txt:229
msgid ""
"In some situations, storing large files may be more efficient in a MongoDB "
"database than on a system-level filesystem."
msgstr ""

# 515d166c774e464686e8861b1b34413c
#: ../source/faq/developers.txt:232
msgid ""
"If your filesystem limits the number of files in a directory, you can use "
"GridFS to store as many files as needed."
msgstr ""

# 6f718485a632476a87a5631479919d44
#: ../source/faq/developers.txt:235
msgid ""
"When you want to keep your files and metadata automatically synced and "
"deployed across a number of systems and facilities.  When using "
":ref:`geographically distributed replica sets <replica-set-geographical-"
"distribution>` MongoDB can distribute files and their metadata automatically"
" to a number of :program:`mongod` instances and facilities."
msgstr ""

# 0c02dfe4340c4c06b02a00662cb4794d
#: ../source/faq/developers.txt:242
msgid ""
"When you want to access information from portions of large files without "
"having to load whole files into memory, you can use GridFS to recall "
"sections of files without reading the entire file into memory."
msgstr ""

# ba478a566aae49f890d9a85fcf40466a
#: ../source/faq/developers.txt:247
msgid ""
"Do not use GridFS if you need to update the content of the entire file "
"atomically. As an alternative you can store multiple versions of each file "
"and specify the current version of the file in the metadata. You can update "
"the metadata field that indicates \"latest\" status in an atomic update "
"after uploading the new version of the file, and later remove previous "
"versions if needed."
msgstr ""

# dc3202860ee44131a1211c10da123ead
#: ../source/faq/developers.txt:254
msgid ""
"Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document "
"Size` limit, consider storing the file manually within a single document. "
"You may use the BinData data type to store the binary data. See your "
":doc:`drivers </applications/drivers>` documentation for details on using "
"BinData."
msgstr ""

# ed41003d347643d18e163e4534586485
#: ../source/faq/developers.txt:260
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

# dac2bf44f1dc4b6d8f6ebf69ab176e95
#: ../source/faq/developers.txt:263
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

# 57e183a511194669bc84e6ee5609e6ff
#: ../source/faq/developers.txt:266
msgid "BSON"
msgstr ""

# c11413d4375c4aa19f6d737a87af9280
#: ../source/faq/developers.txt:268
msgid ""
"As a client program assembles a query in MongoDB, it builds a BSON object, "
"not a string. Thus traditional SQL injection attacks are not a problem. More"
" details and some nuances are covered below."
msgstr ""

# 513250548fc34c62871f91bee6328462
#: ../source/faq/developers.txt:272
msgid ""
"MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client "
"libraries </applications/drivers>` provide a convenient, injection free, "
"process to build these objects. Consider the following C++ example:"
msgstr ""

# 27139aa13a274e1faf85f7d40ad272ca
#: ../source/faq/developers.txt:282
msgid ""
"Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If"
" ``my_query`` contained special characters, for example ``,``, ``:``, and "
"``{``, the query simply wouldn't match any documents. For example, users "
"cannot hijack a query and convert it to a delete."
msgstr ""

# 0f83d3532c3743fe8ad9437d8abb5af5
#: ../source/faq/developers.txt:289
msgid "JavaScript"
msgstr ""

# 92edc53eca9543d2896fe1c75b72e516
#: ../source/faq/developers.txt:295
msgid ""
"All of the following MongoDB operations permit you to run arbitrary "
"JavaScript expressions directly on the server:"
msgstr ""

# 27dd10dcb75d438495d2128d460a7482
#: ../source/faq/developers.txt:298
msgid ":query:`$where`"
msgstr ""

# b66b535267164c8caf1459e78d4d876b
#: ../source/faq/developers.txt:299
msgid ":method:`db.eval()`"
msgstr ""

# 9b4f90cebd2d473db52d6715cf5531f6
#: ../source/faq/developers.txt:300
msgid ":dbcommand:`mapReduce`"
msgstr ""

# 169da5b2cce34cfb8a1605faf945d552
#: ../source/faq/developers.txt:301
msgid ":dbcommand:`group`"
msgstr ""

# 11f04f4b4175426d86a881edd0f90e63
#: ../source/faq/developers.txt:303
msgid ""
"You must exercise care in these cases to prevent users from submitting "
"malicious JavaScript."
msgstr ""

# bf078e07773549adb0428a47f9f70eaf
#: ../source/faq/developers.txt:306
msgid ""
"Fortunately, you can express most queries in MongoDB without JavaScript and "
"for queries that require JavaScript, you can mix JavaScript and non-"
"JavaScript in a single query. Place all the user-supplied fields directly in"
" a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

# 84e481fd58154de4803ad6de316cf3a5
#: ../source/faq/developers.txt:312
msgid ""
"If you need to pass user-supplied values in a :query:`$where` clause, you "
"may escape these values with the ``CodeWScope`` mechanism. When you set "
"user-submitted values as variables in the scope document,  you can avoid "
"evaluating them on the database server."
msgstr ""

# 37c7249322b043afa35705d2a60be42d
#: ../source/faq/developers.txt:318
msgid ""
"If you need to use :method:`db.eval()` with user supplied values, you can "
"either use a ``CodeWScope`` or you can supply extra arguments to your "
"function. For instance:"
msgstr ""

# 143376cd7f834583ac582780d1a78549
#: ../source/faq/developers.txt:327
msgid ""
"This will ensure that your application sends ``user_value`` to the database "
"server as data rather than code."
msgstr ""

# b6c545d0b1174dac8d3ff5bd644c8a63
#: ../source/faq/developers.txt:333
msgid "Dollar Sign Operator Escaping"
msgstr ""

# 60232174da2148b997c39d838f4251e7
#: ../source/faq/developers.txt:335
msgid ""
"Field names in MongoDB's query language have semantic meaning. The dollar "
"sign (i.e ``$``) is a reserved character used to represent :doc:`operators "
"</reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that "
"your application's users cannot inject operators into their inputs."
msgstr ""

# 621853698105482f835a97ebf9eecf18
#: ../source/faq/developers.txt:341
msgid ""
"In some cases, you may wish to build a BSON object with a user-provided key."
"  In these situations, keys will need to substitute the reserved ``$`` and "
"``.`` characters. Any character is sufficient, but consider using the "
"Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e."
" \"．\")."
msgstr ""

# c95cf6c87b3e42fdace84f72437131d3
#: ../source/faq/developers.txt:347
msgid "Consider the following example:"
msgstr ""

# 552672ac7891451cb73ec709e7b07f46
#: ../source/faq/developers.txt:353
msgid ""
"The user may have supplied a ``$`` value in the ``a_key`` value. At the same"
" time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the "
"following cases:"
msgstr ""

# 818960536bdb4a17a297538ace02f4ef
#: ../source/faq/developers.txt:357
msgid ""
"**Insert**. Inserting this into the database does no harm. The insert "
"process does not evaluate the object as a query."
msgstr ""

# b9d7e79328d34b42a7ccb2f2118eefa5
#: ../source/faq/developers.txt:362
msgid ""
"MongoDB client drivers, if properly implemented, check for reserved "
"characters in keys on inserts."
msgstr ""

# 77d77b2a6fa546a29aa4542546d11075
#: ../source/faq/developers.txt:365
msgid ""
"**Update**.  The :method:`~db.collection.update()` operation permits ``$`` "
"operators in the update argument but does not support the :query:`$where` "
"operator. Still, some users may be able to inject operators that can "
"manipulate a single document only. Therefore your application should escape "
"keys, as mentioned above, if reserved characters are possible."
msgstr ""

# cd84efb3ebeb4aeeaeb2a2f0c11d6ddb
#: ../source/faq/developers.txt:372
msgid ""
"**Query** Generally this is not a problem for queries that resemble ``{ x : "
"user_obj }``: dollar signs are not top level and have no effect. "
"Theoretically it may be possible for the user to build a query themselves. "
"But checking the user-submitted content for ``$`` characters in key names "
"may help protect against this kind of injection."
msgstr ""

# 2aeeaee740304698a5e28165fa9c896f
#: ../source/faq/developers.txt:380
msgid "Driver-Specific Issues"
msgstr ""

# 3d6b0b4488b64fb9beeee5b3f244f24c
#: ../source/faq/developers.txt:382
msgid ""
"See the \"`PHP MongoDB Driver Security Notes "
"<http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver "
"documentation for more information"
msgstr ""

# a38a01a1a876410fa4820144968898a2
#: ../source/faq/developers.txt:389
msgid "How does MongoDB provide concurrency?"
msgstr ""

# acbe9ad627614e44a2790e838301d8c1
#: ../source/faq/developers.txt:391
msgid ""
"MongoDB implements a readers-writer lock. This means that at any one time, "
"only one client may be writing or any number of clients may be reading, but "
"that reading and writing cannot occur simultaneously."
msgstr ""

# c31c89bb52914eb5971c809ddd54af46
#: ../source/faq/developers.txt:396
msgid ""
"In standalone and :term:`replica sets <replica set>` the lock's scope "
"applies to a single :program:`mongod` instance or :term:`primary` instance. "
"In a sharded cluster, locks apply to each individual shard, not to the whole"
" cluster."
msgstr ""

# f818b00ae1b841798d21f7bd7db1649b
#: ../source/faq/developers.txt:401
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

# 786dc464f661455896304288d86de7ba
#: ../source/faq/developers.txt:406
msgid "What is the compare order for BSON types?"
msgstr ""

# b022fa68641d462ba452fc37603d1ba8
#: ../source/faq/developers.txt:408
msgid ""
"MongoDB permits documents within a single collection to have fields with "
"different :term:`BSON` types. For instance, the following documents may "
"exist within a single collection."
msgstr ""

# a2e928115c98448db03c62545b6a9b79
#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :term:`BSON` types, MongoDB uses the "
"following comparison order, from lowest to highest:"
msgstr ""

# 7129e2cd212346b38ded84c325a90575
#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

# 4e191bcf15b045308ad8cde967148803
#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

# 1435050a355b488db5b66a27a16812b2
#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles)"
msgstr ""

# 89415cfbcd26451e82df11174c4982ed
#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

# eaa62d9310904d4fa3af9edb6c6ed1ee
#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

# 3d1bc7b4854e42f6b11bed16f216e469
#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

# 0a0e0b9ad5b941bea030cfde065c863e
#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

# d3120d0bedeb4db1a052fa82b2c76d0e
#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

# f2224e8267824916ba20632eb15cb575
#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

# df3cf93e494740469d96ff3f364653a9
#: ../source/includes/fact-sort-order.rst:13
msgid "Date, Timestamp"
msgstr ""

# 0dc5dd08098e4528aacdc245f9e7c2d2
#: ../source/includes/fact-sort-order.rst:14
msgid "Regular Expression"
msgstr ""

# a5c96ec129f544e8b57ec0869b9615c8
#: ../source/includes/fact-sort-order.rst:15
msgid "MaxKey (internal type)"
msgstr ""

# 8c090e4da05f4c4db6564a4f13ca3c34
#: ../source/includes/fact-sort-order.rst:17
msgid ""
"MongoDB treats some types as equivalent for comparison purposes. For "
"instance, numeric types undergo conversion before comparison."
msgstr ""

# 32b7d2ceff654a5bb12b95c04d6674f7
#: ../source/includes/fact-sort-order.rst:20
msgid ""
"The comparison treats a non-existent field as it would an empty BSON Object."
" As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }``"
" would treat the documents as equivalent in sort order."
msgstr ""

# a635e554c8774f89b38f24f1a4c6f256
#: ../source/includes/fact-sort-order.rst:24
msgid ""
"With arrays, a less-than comparison or an ascending sort compares the "
"smallest element of arrays, and a greater-than comparison or a descending "
"sort compares the largest element of the arrays. As such, when comparing a "
"field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array "
"fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison"
" of an empty array (e.g. ``[ ]``) treats the empty array as less than "
"``null`` or a missing field."
msgstr ""

# 862221a715314d54a67c9ac2d49b4a1a
#: ../source/faq/developers.txt:419
msgid "Consider the following :program:`mongo` example:"
msgstr ""

# 564bfc09cc11461099020dbdd97dd6be
#: ../source/faq/developers.txt:434
msgid ""
"The :query:`$type` operator provides access to :term:`BSON type <BSON "
"types>` comparison in the MongoDB query syntax. See the documentation on "
":term:`BSON types` and the :query:`$type` operator for additional "
"information."
msgstr ""

# eb0572f555614fada74d4d16e0587809
#: ../source/includes/warning-mixing-types.rst:3
msgid ""
"Storing values of the different types in the same field in a collection is "
"*strongly* discouraged."
msgstr ""

# a55a606825bc4063a58af7ef9e814620
#: ../source/faq/developers.txt:443
msgid ""
"The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an "
"example of a C++ use of ``MinKey``."
msgstr ""

# a94d9342146a4574b4255df5168150dd
#: ../source/faq/developers.txt:455
msgid ""
"When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

# 096398f6b27742ba9fd30afd8c527043
#: ../source/faq/developers.txt:457
msgid ""
"The :update:`$mul` multiplies the numeric value of a field by a number. For "
"multiplication with values of mixed numeric types (32-bit integer, 64-bit "
"integer, float), the following type conversion rules apply:"
msgstr ""

# e274d231a25d4e89854ff548b1ea501c
#: ../source/faq/developers.txt:466
msgid "32-bit Integer"
msgstr ""

# 36258686753b4675ad6b84e55ae1cec8
# fd45cfaa26cf4627a8d0494ed3c3d2f5
# 3b1a49584b494f23a0302808fb58f286
# db065b495d204bceb5043a8685001bb5
#: ../source/faq/developers.txt:467 ../source/faq/developers.txt:472
#: ../source/faq/developers.txt:476 ../source/faq/developers.txt:477
msgid "64-bit Integer"
msgstr ""

# 2a200457732f4cb5aab0a0056c040ed8
# 821230acef5b4e7db34b1f38bbd39b52
# 219f4178036d4daa8a2288840ca2723e
# a2680044157f4b3f9d4711c656c67cfd
# 24ab6dece4ef411bae528e9523c69d1b
# 57ed265293694d36b3ad2883d49cfc17
#: ../source/faq/developers.txt:468 ../source/faq/developers.txt:473
#: ../source/faq/developers.txt:478 ../source/faq/developers.txt:481
#: ../source/faq/developers.txt:482 ../source/faq/developers.txt:483
msgid "Float"
msgstr ""

# 67e9c689bfa349b1a32d3b24c516e825
#: ../source/faq/developers.txt:470
msgid "**32-bit Integer**"
msgstr ""

# 4ed5710d7e5948f78e19ca0a5223243c
#: ../source/faq/developers.txt:471
msgid "32-bit or 64-bit Integer"
msgstr ""

# 30d4d3525f05405ab34e3bb6e2f32134
#: ../source/faq/developers.txt:475
msgid "**64-bit Integer**"
msgstr ""

# de7258d5b5d540f1925acd0e68185a8e
#: ../source/faq/developers.txt:480
msgid "**Float**"
msgstr ""

# f97b39e651784312a0eff724050e9925
#: ../source/faq/developers.txt:487
msgid ""
"If the product of two 32-bit integers exceeds the maximum value for a 32-bit"
" integer, the result is a 64-bit integer."
msgstr ""

# dfa5a2921aad4d6f9dfb8cc99c448106
#: ../source/faq/developers.txt:490
msgid ""
"Integer operations of any type that exceed the maximum value for a 64-bit "
"integer produce an error."
msgstr ""

# becc47f464344605afba2de614f24bb5
#: ../source/faq/developers.txt:496
msgid "How do I query for fields that have null values?"
msgstr ""

# b539861d5d684ce5985bd5d80a0e8e1a
#: ../source/faq/developers.txt:498
msgid ""
"Fields in a document may store ``null`` values, as in a notional collection,"
" ``test``, with the following documents:"
msgstr ""

# 26c6747402b445d69692400e81691a3b
#: ../source/faq/developers.txt:506
msgid "Different query operators treat ``null`` values differently:"
msgstr ""

# e1baa499742841ff8d3ab6b8cd649008
#: ../source/faq/developers.txt:508
msgid ""
"The ``{ cancelDate : null }`` query matches documents that either contains "
"the ``cancelDate`` field whose value is ``null`` *or* that do not contain "
"the ``cancelDate`` field:"
msgstr ""

# a27bed7599744df3b470148f261312d1
#: ../source/faq/developers.txt:516
msgid "The query returns both documents:"
msgstr ""

# e025c7d641ca4cb5a97cc746f16af663
#: ../source/faq/developers.txt:523
msgid ""
"The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains"
" the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of "
"the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

# 8a6c313eedf2488ca294ac9de917874d
#: ../source/faq/developers.txt:532
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

# 73ac6da289ff4f0eb6fc3e0c0cea9e9e
#: ../source/faq/developers.txt:538
msgid ""
"The ``{ cancelDate : { $exists: false } }`` query matches documents that do "
"not contain the ``cancelDate`` field:"
msgstr ""

# b4acfd9b5425454190f191bc61e3df30
#: ../source/faq/developers.txt:545
msgid ""
"The query returns only the document that does *not* contain the "
"``cancelDate`` field:"
msgstr ""

# 4fce7db5906d435db3e976764d13ac73
#: ../source/faq/developers.txt:552
msgid ""
"The reference documentation for the :query:`$type` and :query:`$exists` "
"operators."
msgstr ""

# f7d621be4cdc4334b8061c03735541fe
#: ../source/faq/developers.txt:558
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

# 7b9da22b2e46444ca87a886ad5b9072b
#: ../source/faq/developers.txt:560
msgid ""
"Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

# 2b8226376aac4483a9d7eae231e52698
#: ../source/faq/developers.txt:563
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

# c6ab80b4b1a041f085d24cccc1156735
#: ../source/faq/developers.txt:565
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

# d5098877e30d4e85b919b8a182883d83
#: ../source/faq/developers.txt:567
msgid ""
"Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

# 2322c6bc447e47f1ad03e5070d2f9ee5
#: ../source/faq/developers.txt:569
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

# 74c72e183d4649cb93010262b320f678
#: ../source/faq/developers.txt:571
msgid ""
"Do not name a collection using the ``system.`` prefix. MongoDB reserves "
"``system.`` for system collections, such as the ``system.indexes`` "
"collection."
msgstr ""

# 482bbc73478743e0a36f4b50d1b339c0
#: ../source/faq/developers.txt:576
msgid ""
"The maximum size of a collection name is 128 characters, including the name "
"of the database. However, for maximum flexibility, collections should have "
"names less than 80 characters."
msgstr ""

# 843068c9bbae46d39f3a0799e318aaec
#: ../source/faq/developers.txt:580
msgid ""
"If your collection name includes special characters, such as the underscore "
"character, then to access the collection use the "
":method:`db.getCollection()` method or a :api:`similar method for your "
"driver <>`."
msgstr ""

# 7b9b45cc47c142f1842efed49f0186e9
#: ../source/faq/developers.txt:0
msgid "Example"
msgstr ""

# d01225c2dbb245868a37525e1afb0665
#: ../source/faq/developers.txt:592
msgid ""
"To perform a query, use the :method:`~db.collection.find()` method, in as "
"the following:"
msgstr ""

# ce4ccd09bc9a4d52826507f03430f8b3
#: ../source/faq/developers.txt:602
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

# 5c776d24cfe044129e1c0db14654bf4e
#: ../source/faq/developers.txt:604
msgid ""
"MongoDB cursors can return the same document more than once in some "
"situations. [#duplicate-document-in-result-set]_ You can use the "
":method:`~cursor.snapshot()` method on a cursor to isolate the operation for"
" a very specific case."
msgstr ""

# 521d6e410a7f4b85ab5ef1bcc6ddc81b
#: ../source/faq/developers.txt:609
msgid ""
":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and "
"guarantees that the query will return each document (with respect to the "
"value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

# 50d5f043de8a47e98231a95f0ebd72c8
#: ../source/faq/developers.txt:613
msgid ""
"The :method:`~cursor.snapshot()` does not guarantee that the data returned "
"by the query will reflect a single moment in time *nor* does it provide "
"isolation from insert or delete operations."
msgstr ""

# ecd2a233729842cc963e9cab9d61dbc1
#: ../source/faq/developers.txt:619
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded "
"collections <sharding>`."
msgstr ""

# cf28b79f08414a5d9be28f2bbe278e06
#: ../source/faq/developers.txt:622
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with "
":method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

# 60f5a4fdb8b04327984b0d30c1aa5d2f
#: ../source/faq/developers.txt:626
msgid ""
"As an alternative, if your collection has a field or fields that are never "
"modified, you can use a *unique* index on this field or these fields to "
"achieve a similar result as the :method:`~cursor.snapshot()`. Query with "
":method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

# 36483de2b0a44b5da0d36ae16d904ebc
#: ../source/faq/developers.txt:632
msgid ""
"As a cursor returns documents other operations may interleave with the "
"query: if some of these operations are :doc:`updates </core/write-"
"operations>` that cause the document to move (in the case of a table scan, "
"caused by document growth) or that change the indexed field on the index "
"used by the query; then the cursor will return the same document more than "
"once."
msgstr ""

# 3d6b3500294646f993ae4d9c9f18d678
#: ../source/faq/developers.txt:640
msgid ""
"MongoDB does not permit changes to the value of the ``_id`` field; it is not"
" possible for a cursor that transverses this index to pass the same document"
" more than once."
msgstr ""

# c10cbb923b7442b0a8f33484f1da6ba0
#: ../source/faq/developers.txt:647
msgid "When should I embed documents within other documents?"
msgstr ""

# 087f96c230e841e9b3a5efc9f1ebb45f
#: ../source/faq/developers.txt:649
msgid ""
"When :doc:`modeling data in MongoDB </core/data-models>`, embedding is "
"frequently the choice for:"
msgstr ""

# 178a1c3963fe41f5b872e31974335d02
#: ../source/faq/developers.txt:652
msgid "\"contains\" relationships between entities."
msgstr ""

# 3271b0937c294c77bb4900a187838c5f
#: ../source/faq/developers.txt:654
msgid ""
"one-to-many relationships when the \"many\" objects *always* appear with or "
"are viewed in the context of their parents."
msgstr ""

# 64f5ea8c5f8d41a49e84807914e5e52b
#: ../source/faq/developers.txt:657
msgid ""
"You should also consider embedding for performance reasons if you have a "
"collection with a large number of small documents. Nevertheless, if small, "
"separate documents represent the natural model for the data, then you should"
" maintain that model."
msgstr ""

# d7ac8a1d844349a5ba229f1d1e2ebf33
#: ../source/faq/developers.txt:662
msgid ""
"If, however, you can group these small documents by some logical "
"relationship *and* you frequently retrieve the documents by this grouping, "
"you might consider \"rolling-up\" the small documents into larger documents "
"that contain an array of subdocuments. Keep in mind that if you often only "
"need to retrieve a subset of the documents within the group, then \"rolling-"
"up\" the documents may not provide better performance."
msgstr ""

# 208e67c3578f46ac82cb1d401f114f8e
#: ../source/faq/developers.txt:670
msgid ""
"\"Rolling up\" these small documents into logical groupings means that "
"queries to retrieve a group of documents involve sequential reads and fewer "
"random disk accesses."
msgstr ""

# bf81ff5d790d414db3327d740f52727e
#: ../source/faq/developers.txt:676
msgid ""
"Additionally, \"rolling up\" documents and moving common fields to the "
"larger document benefit the index on these fields. There would be fewer "
"copies of the common fields *and* there would be fewer associated key "
"entries in the corresponding index. See :doc:`/core/indexes` for more "
"information on indexes."
msgstr ""

# c6d33c5368694cb9aa3d846e067244a7
#: ../source/faq/developers.txt:690
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

# f975c86e07d14ef0993130800b772350
#: ../source/faq/developers.txt:692
msgid ""
"Begin by reading the documents in the :doc:`/data-modeling` section. These "
"documents contain a high level introduction to data modeling considerations "
"in addition to practical examples of data models targeted at particular "
"issues."
msgstr ""

# ee929a8954d6477bac2564429444c875
#: ../source/faq/developers.txt:697
msgid ""
"Additionally, consider the following external resources that provide "
"additional examples:"
msgstr ""

# 35a33513f00e4bf2b88039a951e5de3c
#: ../source/faq/developers.txt:708
msgid ""
"`Schema Design by Example <http://www.10gen.com/presentations/mongodb-"
"melbourne-2012/schema-design-example>`_"
msgstr ""

# 8b2e2b057874482da41380035e9ff4fe
#: ../source/faq/developers.txt:710
msgid ""
"`Dynamic Schema Blog Post "
"<http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

# 2c11dc52d01647699592ac94a3d26e2c
#: ../source/faq/developers.txt:713
msgid ""
":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-"
"on-rails/>`"
msgstr ""

# b585d5b9b1d64630bbfe63831669cb3e
#: ../source/faq/developers.txt:716
msgid ""
"`Ruby Example of Materialized Paths "
"<http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

# 9093cb11745b48648cbf053d37690def
#: ../source/faq/developers.txt:719
msgid ""
"`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a"
"-tree-in-a-document-database>`_ which was the source for much of the :ref"
":`data-modeling-trees` content."
msgstr ""

# cc18d8b8ea5c42179d676d60c32f4ca0
#: ../source/faq/developers.txt:727
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

# af86dd8aa2554f1bbcd920c404f8ff25
#: ../source/faq/developers.txt:729
msgid ""
"An update can cause a document to move on disk if the document grows in "
"size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

# 43890d4564da4502a67e3bf32c747dfa
#: ../source/faq/developers.txt:744
msgid ""
"However, *if you must* pad a document manually, you can add a temporary "
"field to the document and then :update:`$unset` the field, as in the "
"following example."
msgstr ""

# 60e07f7b6bd643c89c008d648dca1823
#: ../source/faq/developers.txt:748
msgid ""
"Do not manually pad documents in a capped collection. Applying manual "
"padding to a document in a capped collection can break replication. Also, "
"the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/includes/warning-copyto-loss-of-type-fidelity.rst:9
msgid ""
"The :method:`db.collection.copyTo()` method uses the :dbcommand:`eval` "
"command internally. As a result, the :method:`db.collection.copyTo()` "
"operation takes a global lock that blocks all other read and write "
"operations until the :method:`db.collection.copyTo()` completes."
msgstr ""

#: ../source/faq/developers.txt:84
msgid ""
"However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This"
" is advantageous in situations where the database receives a thousand "
"increments to an object within one second, MongoDB only needs to flush this "
"data to disk once. In addition to the aforementioned configuration options, "
"you can also use :dbcommand:`fsync` and :doc:`/reference/write-concern` to "
"modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:150
msgid ""
"MongoDB aggressively preallocates data files to reserve space and avoid file"
" system fragmentation. You can use the :setting:`storage.smallFiles` setting"
" to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:200
msgid ""
"If you shorten the field named ``last_name`` to ``lname`` and the field "
"named ``best_score`` to ``score``, as follows, you could save 9 bytes per "
"document."
msgstr ""

#: ../source/faq/developers.txt:208
msgid ""
"Shortening field names reduces expressiveness and does not provide "
"considerable benefit for larger documents and where document overhead is not"
" of significant concern. Shorter field names do not reduce the size of "
"indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid ""
"You can disable all server-side execution of JavaScript, by passing the "
":option:`--noscripting <mongod --noscripting>` option on the command line or"
" setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/includes/fact-sort-order.rst:32
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:34
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:36
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:38
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/faq/developers.txt:733
msgid ""
"You should not have to pad manually because MongoDB adds :ref:`padding "
"automatically <record-allocation-strategies>` and can adaptively adjust the "
"amount of padding added to documents to prevent document relocations "
"following updates. You can change the default "
":data:`~collStats.paddingFactor` calculation by using the "
":dbcommand:`collMod` command with the :collflag:`usePowerOf2Sizes` flag. The"
" :collflag:`usePowerOf2Sizes` flag ensures that MongoDB allocates document "
"space in sizes that are powers of 2, which helps ensure that MongoDB can "
"efficiently reuse free space created by document deletion or relocation."
msgstr ""

#: ../source/faq/developers.txt:772
msgid ":ref:`record-allocation-strategies`"
msgstr ""

#~ msgid ""
#~ "However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This"
#~ " is advantageous in situations where the database receives a thousand "
#~ "increments to an object within one second, MongoDB only needs to flush this "
#~ "data to disk once. In addition to the aforementioned configuration options, "
#~ "you can also use :dbcommand:`fsync` and :dbcommand:`getLastError` to modify "
#~ "this strategy."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB aggressively preallocates data files to reserve space and avoid file"
#~ " system fragmentation. You can use the :setting:`smallfiles` setting to "
#~ "modify the file preallocation strategy."
#~ msgstr ""

#~ msgid ""
#~ "If you shorten the filed named ``last_name`` to ``lname`` and the field name"
#~ " ``best_score`` to ``score``, as follows, you could save 9 bytes per "
#~ "document."
#~ msgstr ""

#~ msgid ""
#~ "Shortening field names reduces expressiveness and does not provide "
#~ "considerable benefit on for larger documents and where document overhead is "
#~ "not significant concern. Shorter field names do not reduce the size of "
#~ "indexes, because indexes have a predefined structure."
#~ msgstr ""

#~ msgid ""
#~ "You can disable all server-side execution of JavaScript, by passing the "
#~ ":option:`--noscripting <mongod --noscripting>` option on the command line or"
#~ " setting :setting:`noscripting` in a configuration file."
#~ msgstr ""

#~ msgid ""
#~ "You should not have to pad manually because MongoDB adds :ref:`padding "
#~ "automatically <record-allocation-stratgies>` and can adaptively adjust the "
#~ "amount of padding added to documents to prevent document relocations "
#~ "following updates. You can change the default "
#~ ":data:`~collStats.paddingFactor` calculation by using the "
#~ ":dbcommand:`collMod` command with the :collflag:`usePowerOf2Sizes` flag. The"
#~ " :collflag:`usePowerOf2Sizes` flag ensures that MongoDB allocates document "
#~ "space in sizes that are powers of 2, which helps ensure that MongoDB can "
#~ "efficiently reuse free space created by document deletion or relocation."
#~ msgstr ""

#~ msgid ":ref:`record-allocation-stratgies`"
#~ msgstr ""
