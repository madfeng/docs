# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 16:24+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 85c549eb144445be9f42dc300f18bfd4
#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr ""

# d889da7e723c47b684871b1b10c605de
#: ../source/faq/storage.txt:7
msgid ""
"This document addresses common questions regarding MongoDB's storage system."
msgstr ""

# a79874c61e5e43ee9b546f8f86d14b66
#: ../source/faq/storage.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

# 5167f3cf86d54110ba07aa8c5cd118b6
#: ../source/faq/storage.txt:17
msgid "What are memory mapped files?"
msgstr ""

# 4990499547f146e5b7a23820dffccaf3
#: ../source/faq/storage.txt:19
msgid ""
"A memory-mapped file is a file with data that the operating system places in"
" memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the "
"file to a region of virtual memory. Memory-mapped files are the critical "
"piece of the storage engine in MongoDB. By using memory mapped files MongoDB"
" can treat the contents of its data files as if they were in memory. This "
"provides MongoDB with an extremely fast and simple method for accessing and "
"manipulating data."
msgstr ""

# 39993d03c8d44f05b2e8bc3be70825ab
#: ../source/faq/storage.txt:28
msgid "How do memory mapped files work?"
msgstr ""

# 68bab52731ad4313aec00904f244d293
#: ../source/faq/storage.txt:30
msgid ""
"Memory mapping assigns files to a block of virtual memory with a direct "
"byte-for-byte correlation. Once mapped, the relationship between file and "
"memory allows MongoDB to interact with the data in the file as if it were "
"memory."
msgstr ""

# b9b59a5f4cbb4bffb90e0c0378e87f32
#: ../source/faq/storage.txt:36
msgid "How does MongoDB work with memory mapped files?"
msgstr ""

# 64ee319931ee443d823f87c10bb74436
#: ../source/faq/storage.txt:38
msgid ""
"MongoDB uses memory mapped files for managing and interacting with all data."
" MongoDB memory maps data files to memory as it accesses documents. Data "
"that isn't accessed is *not* mapped to memory."
msgstr ""

# 7847f42fa6ab42ae8b4df7b6113a5614
#: ../source/faq/storage.txt:45
msgid "What are page faults?"
msgstr ""

# a09363c5eb064ba6be6dbb5ad76c3dd3
#: ../source/faq/storage.txt:49
msgid ""
"If there is free memory, then the operating system can find the page on disk"
" and load it to memory directly. However, if there is no free memory, the "
"operating system must:"
msgstr ""

# 154a416ba69c44dbbf1c7fe0b59473ae
#: ../source/faq/storage.txt:53
msgid ""
"find a page in memory that is stale or no longer needed, and write the page "
"to disk."
msgstr ""

# a15362b7dd5e43ba8ba3e15bf4af9e0e
#: ../source/faq/storage.txt:56
msgid "read the requested page from disk and load it into memory."
msgstr ""

# 96d2caa4004d41a7928268518a653a73
#: ../source/faq/storage.txt:58
msgid ""
"This process, particularly on an active system can take a long time, "
"particularly in comparison to reading a page that is already in memory."
msgstr ""

# 81aca9a6bd0c4c10a7763cccf805f250
#: ../source/faq/storage.txt:65
msgid "What is the difference between soft and hard page faults?"
msgstr ""

# b1bebc3e67a84b84970a0d828eeb0e39
#: ../source/faq/storage.txt:67
msgid ""
":term:`Page faults <page fault>` occur when MongoDB needs access to data "
"that isn't currently in active memory. A \"hard\" page fault refers to "
"situations when MongoDB must access a disk to access the data. A \"soft\" "
"page fault, by contrast, merely moves memory pages from one list to another,"
" such as from an operating system file cache. In production, MongoDB will "
"rarely encounter soft page faults."
msgstr ""

# 7181c23dbfaf4d4b8b2ef5ab79d85198
#: ../source/faq/storage.txt:79
msgid "What tools can I use to investigate storage use in MongoDB?"
msgstr ""

# d7464764fe34487d8b765edaff151641
#: ../source/faq/storage.txt:81
msgid ""
"The :method:`db.stats()` method in the :program:`mongo` shell, returns the "
"current state of the \"active\" database. The :doc:`dbStats command "
"</reference/command/dbStats>` document describes the fields in the "
":method:`db.stats()` output."
msgstr ""

# 0115c0b035754b8ab62c70a3d16564bd
#: ../source/faq/storage.txt:89
msgid "What is the working set?"
msgstr ""

# f517848f7b2341978a0eb94cdbdfa030
#: ../source/faq/storage.txt:91
msgid ""
"Working set represents the total body of data that the application uses in "
"the course of normal operation. Often this is a subset of the total data "
"size, but the specific size of the working set depends on actual moment-to-"
"moment use of the database."
msgstr ""

# 9be27b4acb954957a5b61a9c6bc93c30
#: ../source/faq/storage.txt:96
msgid ""
"If you run a query that requires MongoDB to scan every document in a "
"collection, the working set will expand to include every document. Depending"
" on physical memory size, this may cause documents in the working set to "
"\"page out,\" or to be removed from physical memory by the operating system."
" The next time MongoDB needs to access these documents, MongoDB may incur a "
"hard page fault."
msgstr ""

# 07e7d7d21ca04e3e8384e7d2ec9daad4
#: ../source/faq/storage.txt:103
msgid ""
"If you run a query that requires MongoDB to scan every :term:`document` in a"
" collection, the working set includes every active document in memory."
msgstr ""

# 0f24f23bc44747b1a254390f2604f75d
#: ../source/faq/storage.txt:107
msgid ""
"For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

# 6171ab34e34c49138a9c347b24151644
#: ../source/faq/storage.txt:113
msgid ""
"Why are the files in my data directory larger than the data in my database?"
msgstr ""

# bc010a84f50547d0a3a09b7f49ed7975
#: ../source/faq/storage.txt:115
msgid ""
"The data files in your data directory, which is the :file:`/data/db` "
"directory in default configurations, might be larger than the data set "
"inserted into the database. Consider the following possible causes:"
msgstr ""

# 0e854c6dba564d4d9cf1c4476baaf967
#: ../source/faq/storage.txt:119
msgid "Preallocated data files."
msgstr ""

# a811bc108ea242c198e9cb92d4c4b752
#: ../source/faq/storage.txt:121
msgid ""
"In the data directory, MongoDB preallocates data files to a particular size,"
" in part to prevent file system fragmentation. MongoDB names the first data "
"file ``<databasename>.0``, the next ``<databasename>.1``, etc. The first "
"file :program:`mongod` allocates is 64 megabytes, the next 128 megabytes, "
"and so on, up to 2 gigabytes, at which point all subsequent files are 2 "
"gigabytes. The data files include files with allocated space but that hold "
"no data. :program:`mongod` may allocate a 1 gigabyte data file that may be "
"90% empty. For most larger databases, unused allocated space is small "
"compared to the database."
msgstr ""

# eee48db0c4d0494caa9fdc0eb6dec14b
#: ../source/faq/storage.txt:132
msgid ""
"On Unix-like systems, :program:`mongod` preallocates an additional data file"
" and initializes the disk space to ``0``.  Preallocating data files in the "
"background prevents significant delays when a new database file is next "
"allocated."
msgstr ""

# d7facf6823ab404db1e3faa52ba625de
#: ../source/faq/storage.txt:144
msgid ""
"On Linux systems you can use ``hdparm`` to get an idea of how costly "
"allocation might be:"
msgstr ""

# ff3b6015fae6402fb84f79540a18add7
#: ../source/faq/storage.txt:151
msgid "The :term:`oplog`."
msgstr ""

# 24469aeea04d418f9b616636d0649aa4
#: ../source/faq/storage.txt:153
msgid ""
"If this :program:`mongod` is a member of a replica set, the data directory "
"includes the :term:`oplog.rs <oplog>` file, which is a preallocated "
":term:`capped collection` in the ``local`` database. The default allocation "
"is approximately 5% of disk space on 64-bit installations, see :ref:`Oplog "
"Sizing <replica-set-oplog-sizing>` for more information. In most cases, you "
"should not need to resize the oplog. However, if you do, see :doc:`/tutorial"
"/change-oplog-size`."
msgstr ""

# 7db153f01fa84d46a83bc38a954d6a02
#: ../source/faq/storage.txt:162
msgid "The :term:`journal`."
msgstr ""

# d4cbcf4c8fff45fdafafae24fce09877
#: ../source/faq/storage.txt:164
msgid ""
"The data directory contains the journal files, which store write operations "
"on disk prior to MongoDB applying them to databases. See "
":doc:`/core/journaling`."
msgstr ""

# 1e324cfacc564866989d44ff5dcab8e1
#: ../source/faq/storage.txt:168
msgid "Empty records."
msgstr ""

# cf551ee2eb6f4dacb8717f2d12f52988
#: ../source/faq/storage.txt:170
msgid ""
"MongoDB maintains lists of empty records in data files when deleting "
"documents and collections. MongoDB can reuse this space, but will never "
"return this space to the operating system."
msgstr ""

# 06cf538319fb4ba4a6f62508a459ce52
#: ../source/faq/storage.txt:174
msgid ""
"To de-fragment allocated storage, use :dbcommand:`compact`, which de-"
"fragments allocated space. By de-fragmenting storage, MongoDB can "
"effectively use the allocated space. :dbcommand:`compact` requires up to 2 "
"gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if you"
" are critically low on disk space."
msgstr ""

# e84eed509d984bd38aadcbedabc249a8
#: ../source/faq/storage.txt:180
msgid ""
":dbcommand:`compact` only removes fragmentation from MongoDB data files and "
"does not return any disk space to the operating system."
msgstr ""

# e66a52e968954d4f83801c36d30300fd
#: ../source/faq/storage.txt:184
msgid ""
"To reclaim deleted space, use :dbcommand:`repairDatabase`, which rebuilds "
"the database which de-fragments the storage and may release space to the "
"operating system. :dbcommand:`repairDatabase` requires up to 2 gigabytes of "
"extra disk space to run. Do not use :dbcommand:`repairDatabase` if you are "
"critically low on disk space."
msgstr ""

# f8de37c4dc51441da3864192473b774b
#: ../source/faq/storage.txt:191
msgid ""
":dbcommand:`repairDatabase` requires enough free disk space to hold both the"
" old and new database files while the repair is running. Be aware that "
":dbcommand:`repairDatabase` will block all other operations and may take a "
"long time to complete."
msgstr ""

# 6b2e9fadfdc04c3faf6e2fe1ca65955b
#: ../source/faq/storage.txt:197
msgid "How can I check the size of a collection?"
msgstr ""

# 1f11f26caab640c19e6c84ad954f20e1
#: ../source/faq/storage.txt:199
msgid ""
"To view the size of a collection and other information, use the "
":method:`db.collection.stats()` method from the :program:`mongo` shell. The "
"following example issues :method:`db.collection.stats()` for the ``orders`` "
"collection:"
msgstr ""

# e2645375518c430f852087a75eaf3dcc
#: ../source/faq/storage.txt:208
msgid "To view specific measures of size, use these methods:"
msgstr ""

# e8c2faca6a364093b2a5d02c43e05868
#: ../source/faq/storage.txt:210
msgid ""
":method:`db.collection.dataSize()`: data size in bytes for the collection."
msgstr ""

# b695e577f21a45e08224470ed3ad51c0
#: ../source/faq/storage.txt:211
msgid ""
":method:`db.collection.storageSize()`: allocation size in bytes, including "
"unused space."
msgstr ""

# 854fdcecb3254e5491ad86af1193eb4d
#: ../source/faq/storage.txt:212
msgid ""
":method:`db.collection.totalSize()`: the data size plus the index size in "
"bytes."
msgstr ""

# 156f143532774b93836882fbfcb7940e
#: ../source/faq/storage.txt:213
msgid ":method:`db.collection.totalIndexSize()`: the index size in bytes."
msgstr ""

# 17a6431ac6e840608fbe25be2f77a3cd
#: ../source/faq/storage.txt:215
msgid ""
"Also, the following scripts print the statistics for each database and "
"collection:"
msgstr ""

# 6bbd0c81ce37499685d3968383f6adc4
#: ../source/faq/storage.txt:227
msgid "How can I check the size of indexes?"
msgstr ""

# c6face184799490f87a08a159c0c94e8
#: ../source/faq/storage.txt:229
msgid ""
"To view the size of the data allocated for an index, use one of the "
"following procedures in the :program:`mongo` shell:"
msgstr ""

# 9b042d7700d444049ee958dc236f2305
#: ../source/faq/storage.txt:232
msgid ""
"Use the :method:`db.collection.stats()` method using the index namespace. To"
" retrieve a list of namespaces, issue the following command:"
msgstr ""

# e84182f02d1f42b6a6909623e46bdceb
#: ../source/faq/storage.txt:240
msgid ""
"Check the value of :data:`~collStats.indexSizes` in the output of the "
":method:`db.collection.stats()` command."
msgstr ""

# 5ede1e0ffd5342dfb87db81a80fa343c
#: ../source/faq/storage.txt:0
msgid "Example"
msgstr ""

# 20daeff71268451ea24df49eec3ce2c5
#: ../source/faq/storage.txt:249
msgid "The command returns a list similar to the following:"
msgstr ""

# 633caf2320b24531bb8f50a8a7e89cc8
#: ../source/faq/storage.txt:257
msgid ""
"View the size of the data allocated for the ``orders.$_id_`` index with the "
"following sequence of operations:"
msgstr ""

# c7f52ff6c07845ac8e5e4b1330df7804
#: ../source/faq/storage.txt:266
msgid "How do I know when the server runs out of disk space?"
msgstr ""

# a92525ebb22e46a18270d904d07f324b
#: ../source/faq/storage.txt:268
msgid ""
"If your server runs out of disk space for data files, you will see something"
" like this in the log:"
msgstr ""

# 5f00d990316d4e70a991fbaaca362864
#: ../source/faq/storage.txt:280
msgid ""
"The server remains in this state forever, blocking all writes including "
"deletes. However, reads still work. To delete some data and compact, using "
"the :dbcommand:`compact` command, you must restart the server first."
msgstr ""

# a217881060234a2ab0da2b0a74287ea5
#: ../source/faq/storage.txt:285
msgid ""
"If your server runs out of disk space for journal files, the server process "
"will exit. By default, :program:`mongod` creates journal files in a sub-"
"directory of :setting:`~storage.dbPath` named ``journal``. You may elect to "
"put the journal files on another storage device using a filesystem mount or "
"a symlink."
msgstr ""

# 0d0e5eea87f140c896a64f81b1c538d0
#: ../source/faq/storage.txt:293
msgid ""
"If you place the journal files on a separate storage device you will not be "
"able to use a file system snapshot tool to capture a valid snapshot of your "
"data files and journal files."
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
msgid ""
"Page faults can occur as MongoDB reads from or writes data to parts of its "
"data files that are not currently located in physical memory. In contrast, "
"operating system page faults happen when physical memory is exhausted and "
"pages of physical memory are swapped to disk."
msgstr ""

#: ../source/faq/storage.txt:62 ../source/faq/storage.txt:74
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:137
msgid ""
"You can disable preallocation by setting "
":setting:`~storage.preallocDataFiles` to ``false``. However do not disable "
":setting:`~storage.preallocDataFiles` for production environments: only use "
":setting:`~storage.preallocDataFiles` for testing and with small data sets "
"where you frequently drop databases."
msgstr ""

#~ msgid ""
#~ "Page faults will occur if you're attempting to access part of a memory-"
#~ "mapped file that *isn't* in memory."
#~ msgstr ""

#~ msgid ""
#~ "You can disable preallocation with the :setting:`noprealloc` run time "
#~ "option. However :setting:`noprealloc` is **not** intended for use in "
#~ "production environments: only use :setting:`noprealloc` for testing and with"
#~ " small data sets where you frequently drop databases."
#~ msgstr ""
