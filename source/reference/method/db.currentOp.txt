==============
db.currentOp()
==============

.. default-domain:: mongodb

Definition
----------

.. method:: db.currentOp()

   Returns a :term:`document` that contains information on in-progress
   operations for the database instance.

   :method:`db.currentOp()` method has the following form:

   .. code-block:: javascript

      db.currentOp(<operations>)

   The :method:`db.currentOp()` method can take the following *optional*
   argument:

   .. include:: /reference/method/db.currentOp-param.rst

.. _currentOp-behavior:

Behavior
--------

If you pass in ``true`` to :method:`db.currentOp()`, the method returns
information on all operations, including operations on idle
connections and system operations.

.. code-block:: javascript

   db.currentOp(true)

Passing in ``true`` is equivalent to passing in a query document of ``{
'$all': true }``.

If you pass a query document to :method:`db.currentOp()`, the output
returns information only for the current operations that match the
query. You can query on the :ref:`currentOp-output-fields`. See
:ref:`currentOp-examples`.

You can also specify ``{ '$all': true }`` query document to return
information on all in-progress operations, including operations on idle
connections and system operations. If you specify in the query document
other conditions as well as ``'$all': true``, only the ``'$all': true``
applies.

Access Control
--------------

On systems running with :setting:`~security.authorization`, a user must
have access that includes the :authaction:`inprog` action. For example,
see :ref:`create-role-to-manage-ops`.

.. _currentOp-examples:

Examples
--------

The following examples use the :method:`db.currentOp()` method with
various query documents to filter the output.

.. include:: /includes/example-filter-current-op.rst

Output Example
--------------

The following is an example of :method:`db.currentOp()` output. 

.. code-block:: javascript

   {
     "inprog": [
          {
            "opid" : <number>,
            "active" : <boolean>,
            "secs_running" : <NumberLong()>,
            "microsecs_running" : <number>,
            "op" : <string>,
            "ns" : <string>,
            "query" : <document>,
            "insert" : <document>,
            "planSummary": <string>,
            "client" : <string>,
            "desc" : <string>,
            "threadId" : <string>,
            "connectionId" : <number>,
            "locks" : {
                "^" : <string>,
                "^local" : <string>,
                "^<database>" : <string>
            },
            "waitingForLock" : <boolean>,
            "msg": <string>,
            "progress" : {
                "done" : <number>,
                "total" : <number>
            },
            "killPending" : <boolean>,
            "numYields" : <number>,
            "lockStats" : {
                "timeLockedMicros" : {
                    "R" : <NumberLong()>,
                    "W" : <NumberLong()>,
                    "r" : <NumberLong()>,
                    "w" : <NumberLong()>
                },
                "timeAcquiringMicros" : {
                    "R" : <NumberLong()>,
                    "W" : <NumberLong()>,
                    "r" : <NumberLong()>,
                    "w" : <NumberLong()>
                }
            }
          },
          ...
      ]
   }

.. _currentOp-output-fields:

Output Fields
-------------

.. data:: currentOp.opid

   The identifier for the operation. You can pass this value to
   :method:`db.killOp()` in the :program:`mongo` shell to terminate the
   operation.

   .. include:: /includes/warning-terminating-operations.rst

.. data:: currentOp.active

   A boolean value specifying whether the operation has started. Value
   is ``true`` if the operation has started or ``false`` if the
   operation is queued and waiting for a lock to run.
   :data:`~currentOp.active` may be ``true`` even if the operation has
   yielded to another operation.

.. data:: currentOp.secs_running

   The duration of the operation in seconds. MongoDB calculates this
   value by subtracting the current time from the start time of the
   operation.

   Only appears if the operation is running, (i.e. if
   :data:`~currentOp.active` is ``true``).

.. data:: currentOp.microsecs_running

   .. versionadded:: 2.6

   The duration of the operation in microseconds. MongoDB calculates this
   value by subtracting the current time from the start time of the
   operation.

   Only appears if the operation is running, (i.e. if
   :data:`~currentOp.active` is ``true``).

.. data:: currentOp.op

   A string that identifies the type of operation. The possible values
   are:

   - ``"none"``
   - ``"update"``
   - ``"insert"``
   - ``"query"``
   - ``"getmore"``
   - ``"remove"``
   - ``"killcursors"``

   The ``"query"`` type includes operations that use the
   :dbcommand:`insert`, :dbcommand:`update`, and :dbcommand:`delete`
   commands. Write operations that do not use the aforementioned write
   commands will show with the appropriate ``"insert"``, ``"update"``,
   or ``"remove"`` value.

.. data:: currentOp.ns

   The :term:`namespace` the operation targets. A namespace consists of
   the :term:`database` name and the :term:`collection` name
   concatenated with a dot (``.``); i.e., ``"<database>.<collection>"``.

.. data:: currentOp.insert

   Contains the document to be inserted for operations with
   :data:`~currentOp.op` value of ``"insert"``. Only appears for
   operations with :data:`~currentOp.op` value ``"insert"``.

   Insert operations such as :method:`db.collection.insert()` that use
   the :dbcommand:`insert` command will have :data:`~currentOp.op` value
   of ``"query"``.

.. data:: currentOp.query

   A document containing information on current operation if
   :data:`~currentOp.op` value is *not* ``"insert"``.
   :data:`~currentOp.query` does not appear for :data:`~currentOp.op`
   of type ``"insert"``.

   Write operations that use the :dbcommand:`insert`,
   :dbcommand:`update`, and :dbcommand:`delete` commands have
   :data:`~currentOp.op` value of ``"query"`` and the corresponding
   :data:`~currentOp.query` contains information on these operations.

   For example, the following :data:`~currentOp.query` field contains
   information for an update operation:

   .. code-block:: javascript

      "query" : {
                  "update" : "grades",
                  "updates" : [
                     {
                        "q" : {
                           "x" : {
                              "$gt" : 70
                           }
                        },
                        "u" : {
                           "$set" : {
                              "y" : 1
                           }
                        },
                        "multi" : true,
                        "upsert" : false
                     }
                  ],
                  "ordered" : true
               }

   The document can be empty for :data:`~currentOp.op` types such as
   ``"getmore"``.

.. data:: currentOp.planSummary

   A string that contains the query plan to help debug slow queries.

.. data:: currentOp.client

   The IP address (or hostname) and the ephemeral port of the client
   connection where the operation originates. If your ``inprog``
   array has operations from many different clients, use this string
   to relate operations to clients.

   For some commands, including :dbcommand:`findAndModify` and
   :method:`db.eval()`, the client will be ``0.0.0.0:0``, rather than
   an actual client.

.. data:: currentOp.desc

   A description of the client. This string includes the
   :data:`~currentOp.connectionId`.

.. data:: currentOp.threadId

   An identifier for the thread that services the operation and its
   connection.

.. data:: currentOp.connectionId

   An identifier for the connection where the operation originated.

.. data:: currentOp.locks

   .. versionadded:: 2.2

   
   The :data:`~currentOp.locks` document reports by databases the types
   of locks the operation currently holds. The possible lock types are:

   - ``R`` represents the global read lock,
   - ``W`` represents the global write lock,
   - ``r`` represents the database specific read lock, and
   - ``w`` represents the database specific write lock.
   
   .. data:: currentOp.locks.^

      :data:`~currentOp.locks.^` reports on the use of the global lock
      for the :program:`mongod` instance. All operations must hold the
      global lock for some phases of operation.

   .. data:: currentOp.locks.^local

      :data:`~currentOp.locks.^local` reports on the lock for the ``local``
      database. MongoDB uses the ``local`` database for a number of
      operations, but the most frequent use of the ``local`` database
      is for the :term:`oplog` used in replication.

   .. data:: currentOp.locks.^<database>

      :data:`locks.^\<database\> <currentOp.locks.^<database>>` reports on the lock state for the
      database that this operation targets.

.. data:: currentOp.waitingForLock

   Returns a boolean value. :data:`~currentOp.waitingForLock` is ``true`` if the
   operation is waiting for a lock and ``false`` if the operation has
   the required lock.

.. data:: currentOp.msg

   The :data:`~currentOp.msg` provides a message that describes the status and
   progress of the operation. In the case of indexing or mapReduce
   operations, the field reports the completion percentage.

.. data:: currentOp.progress

   Reports on the progress of mapReduce or indexing operations. The
   :data:`~currentOp.progress` fields corresponds to the completion percentage in
   the :data:`~currentOp.msg` field. The :data:`~currentOp.progress` specifies the following
   information:

   .. data:: currentOp.progress.done

      Reports the number completed.

   .. data:: currentOp.progress.total

      Reports the total number.

.. data:: currentOp.killPending

   Returns ``true`` if the operation is currently flagged for
   termination.  When the operation encounters its next safe termination point, the
   operation will terminate.

.. data:: currentOp.numYields

   :data:`~currentOp.numYields` is a counter that reports the number of times the
   operation has yielded to allow other operations to complete.

   Typically, operations yield when they need access to data that
   MongoDB has not yet fully read into memory. This allows
   other operations that have data in memory to complete quickly
   while MongoDB reads in data for the yielding operation.

.. data:: currentOp.lockStats

   .. versionadded:: 2.2

   The :data:`~currentOp.lockStats` document reflects the amount of time the
   operation has spent both acquiring and holding
   locks. :data:`~currentOp.lockStats` reports data on a per-lock type, with the
   following possible lock types:

   - ``R`` represents the global read lock,
   - ``W`` represents the global write lock,
   - ``r`` represents the database specific read lock, and
   - ``w`` represents the database specific write lock.

   .. data:: currentOp.timeLockedMicros

      The :data:`~currentOp.timeLockedMicros` document reports the
      amount of time the operation has spent holding a specific lock.

      For operations that require more than one lock, like those that
      lock the ``local`` database to update the :term:`oplog`, then the
      values in this document can be longer than this value may be
      longer than the total length of the operation (i.e.
      :data:`~currentOp.secs_running`.)

      .. data:: currentOp.timeLockedMicros.R

         Reports the amount of time in microseconds the operation has
         held the global read lock.

      .. data:: currentOp.timeLockedMicros.W

         Reports the amount of time in microseconds the operation has
         held the global write lock.

      .. data:: currentOp.timeLockedMicros.r

         Reports the amount of time in microseconds the operation has
         held the database specific read lock.

      .. data:: currentOp.timeLockedMicros.w

         Reports the amount of time in microseconds the operation has
         held the database specific write lock.

   .. data:: currentOp.timeAcquiringMicros

      The :data:`~currentOp.timeAcquiringMicros` document reports the amount of time
      the operation has spent *waiting* to acquire a specific lock.

      .. data:: currentOp.timeAcquiringMicros.R

         Reports the mount of time in microseconds the operation has waited for the
         global read lock.

      .. data:: currentOp.timeAcquiringMicros.W

         Reports the mount of time in microseconds the operation has waited for the
         global write lock.

      .. data:: currentOp.timeAcquiringMicros.r

         Reports the mount of time in microseconds the operation has waited for the
         database specific read lock.

      .. data:: currentOp.timeAcquiringMicros.w

         Reports the mount of time in microseconds the operation has waited for the
         database specific write lock.
