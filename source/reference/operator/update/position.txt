=========
$position
=========

.. default-domain:: mongodb

Definition
----------

.. update:: $position

   .. versionadded:: 2.6

   The :update:`$position` modifier specifies the location in the
   array at which the :update:`$push` operator insert elements.
   Without the :update:`$position` modifier, the :update:`$push`
   operator inserts elements to the end of the array. See :ref:`$push
   modifiers <push-modifiers>` for more information.

   To use the :update:`$position` modifier, it **must** appear with the
   :update:`$each` modifier.

   .. code-block:: javascript

      {
        $push: {
          <field>: { 
             $each: [ <value1>, <value2>, ... ],
             $position: <num> 
          }
        }
      }

   The ``<num>`` is a non-negative number that corresponds to
   the position in the array, based on a zero-based index.

   If the ``<num>`` is greater or equal to the length of the array, the
   :update:`$position` modifier has no effect and :update:`$push` adds
   elements to the end of the array.

Examples
--------

Add Elements at the Start of the Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a collection ``students`` that contains the following document:

.. code-block:: javascript

   { "_id" : 1, "scores" : [ 100 ] }

The following operation updates the ``scores`` field to add the
elements ``50``, ``60`` and ``70`` to the beginning of the array:

.. code-block:: javascript

   db.students.update(
      { _id: 1 },
      {
        $push: {
           scores: {
              $each: [ 50, 60, 70 ],
              $position: 0
           }
        }
      }
   )

The operation results in the following updated document:

.. code-block:: javascript

   { "_id" : 1, "scores" : [  50,  60,  70,  100 ] }

Add Elements to the Middle of the Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a collection ``students`` that contains the following document:

.. code-block:: javascript

   { "_id" : 1, "scores" : [  50,  60,  70,  100 ] }

The following operation updates the ``scores`` field to add the
elements ``20`` and ``30`` at the array index of ``2``:

.. code-block:: javascript

   db.students.update(
      { _id: 1 },
      {
        $push: {
           scores: {
              $each: [ 20, 30 ],
              $position: 2
           }
        }
      }
   )

The operation results in the following updated document:

.. code-block:: javascript

   { "_id" : 1, "scores" : [  50,  60,  20,  30,  70,  100 ] }
