========
$natural
========

.. default-domain:: mongodb

Definition
----------

.. operator:: $natural

  Use the :operator:`$natural` operator to use :term:`natural order` for
  the results of a sort operation. Natural order refers to the logical
  :ref:`ordering <return-natural-order>` of documents internally within the
  database.

  The :operator:`$natural` operator uses the following syntax to return
  documents in the order they exist on disk:

  .. code-block:: javascript

     db.collection.find().sort( { $natural: 1 } )

Behavior
--------

On a sharded collection the :operator:`$natural` operator returns a
collection scan sorted in :ref:`natural order <return-natural-order>`, the
order the database inserts and stores documents on disk.

.. include:: /includes/fact-natural-parameter.rst

.. include:: /includes/fact-natural-sort-order-text-query-restriction.rst

Examples
--------

Reverse Order
~~~~~~~~~~~~~

Use ``-1`` to return documents in the reverse order as they occur on disk:

.. code-block:: javascript

   db.collection.find().sort( { $natural: -1 } )

Natural Order Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

To demonstrate natural ordering:

- Create an ``{ normal: 1 }`` index on a collection (e.g. ``coll``).

- Insert relevant objects with ``_id`` and ``normal`` values, for
  example, a document with ``_id`` and ``normal`` fields that both
  hold the same string:

  .. code-block:: javascript

     db.coll.insert( { _id: "01", normal: "01" } )

- Use values with different types for each document, but both fields
  in the document should have the same value:

- Use ``.find().sort().explain()`` for all operations.

This scenario returns these results when using
:method:`~db.collection.find()` for different ``_id`` values; sorting with
the :operator:`$natural` operator, ``_id`` index, and ``normal`` index;
and a description of the :method:`~cursor.explain()` method output:

.. list-table::
   :header-rows: 2
   :widths: 20 25 25 25

   * -
     -
     - :method:`~cursor.sort()`
     -

   * - :method:`~db.collection.find()`
     - :operator:`$natural`:1
     - :term:`_id`:1
     - normal:1

   * - :term:`_id`::doc:`ObjectId() </reference/bson-types>`

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

   * - :term:`_id`::doc:`Object() </reference/bson-types>`

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

   * - :term:`_id`::doc:`string() </reference/bson-types>`

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

   * - :term:`_id`::doc:`integer() </reference/bson-types>`

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

   * - :term:`_id`::doc:`BinData() </reference/bson-types>`

     - :method:`~cursor.explain()` scanned entire collection

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

   * - normal:(any query)

     - :method:`~cursor.explain()` scanned entire collection

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

     - :method:`~cursor.explain()` used :term:`B-Tree` cursor

Additional Information
----------------------

:method:`cursor.sort()`
