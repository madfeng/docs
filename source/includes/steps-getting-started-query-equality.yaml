title:
  text: Query for documents with ``category`` equal to ``"clothing"``.
  character: "`"
stepnum: 1
ref: equality-query
action:
  - pre: |
      Specify ``{ category: "clothing" }`` as the query condition to the
      :method:`~db.collection.find()` method.
    language: javascript
    code: |
      db.inventory.find( { category: "clothing" } )
  - pre: |
      The result set includes only the matching documents.
    language: javascript
    code: |
      { "_id" : ObjectId("53d98f133bb604791249ca99"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d98fc93bb604791249ca9a"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d98fc93bb604791249ca9b"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d990403bb604791249ca9d"), "item" : "BE10", "details" : { "model" : "14Q2", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "L", "qty" : 5 } ], "category" : "clothing" }
---
title:
  text: Query by a field in an embedded document.
  character: "`"
stepnum: 2
ref: query-embedded-document
pre: |
  To specify a condition on a field within an embedded document, use
  the :term:`dot notation`. Dot notation requires quotes around the
  dotted field names in the query condition.
action:
  - pre: |
      To return only the documents where the ``model`` field in the
      ``details`` document equals ``"14Q3"``, specify ``{
      "details.model": "14Q3" }`` as the query condition.
    language: javascript
    code: |
      db.inventory.find( { "details.model": "14Q3" } )
  - pre: |
      The result set includes only the matching documents.
    language: javascript
    code: |
      { "_id" : ObjectId("53d98f133bb604791249ca99"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d98fc93bb604791249ca9a"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d98fc93bb604791249ca9b"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
post: |
   For more information on querying on fields within an embedded
   document, see :ref:`read-operations-subdocuments`.
---
title:
  text: Query by an array field.
  character: "`"
stepnum: 3
ref: query-array-field
pre: |
  The ``stock`` array contains embedded documents as its elements.
  To specify a condition on a field within an embedded document, use
  the :term:`dot notation`. Dot notation requires quotes around the
  dotted field names in the query condition.
action:
  - pre: |
      To return only the documents whose ``stock`` array contains a
      document with a field ``size`` equal to ``"L"``, specify ``{
      "stock.size": "L" }`` as the query condition.
    language: javascript
    code: |
      db.inventory.find( { "stock.size": "L" } )
  - pre: |
      The result set includes only the matching documents.
    language: javascript
    code: |
      { "_id" : ObjectId("53d98fc93bb604791249ca9b"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
      { "_id" : ObjectId("53d98fc93bb604791249ca9c"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
      { "_id" : ObjectId("53d990403bb604791249ca9d"), "item" : "BE10", "details" : { "model" : "14Q2", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "L", "qty" : 5 } ], "category" : "clothing" }
post: |
   For more information on querying on arrays, such as specifying
   multiple conditions on array elements, see
   :ref:`read-operations-arrays` and :operator:`$elemMatch`.
---
title:
  text: Combine query conditions.
  character: "`"
stepnum: 4
ref: combine-query-conditions
pre: |
  You can combine query conditions by separating the conditions with a
  comma in the conditions document.
action:
  - pre: |
      The following query combines the previous three conditions.
    language: javascript
    code: |
      db.inventory.find( { category: "clothing", "details.model": "14Q3", "stock.size": "L" } )
  - pre: |
      The displayed result set shows that the query matched only one
      document that satisfies all three criteria.
    language: javascript
    code: |
      { "_id" : ObjectId("53d98fc93bb604791249ca9b"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
...
