name: :expression:`$setEquals`
file: /reference/operator/aggregation/setEquals
description: |
   Returns ``true`` if the input sets have the same distinct elements.
   Accepts two or more argument expressions.
---
name: :expression:`$setIntersection`
file: /reference/operator/aggregation/setIntersection
description: |
   Returns a set with elements that appear in *all* of the input sets.
   Accepts any number of argument expressions.
---
name: :expression:`$setUnion`
file: /reference/operator/aggregation/setUnion
description: |
   Returns a set with elements that appear in *any* of the input sets.
   Accepts any number of argument expressions.
---
name: :expression:`$setDifference`
file: /reference/operator/aggregation/setDifference
description: |
   Returns a set with elements that appear in the first set but not in
   the second set; i.e. performs a
   `relative complement <http://en.wikipedia.org/wiki/Complement_(set_theory)>`_
   of the second set relative to the first. Accepts exactly two
   argument expressions.
---
name: :expression:`$setIsSubset`
file: /reference/operator/aggregation/setIsSubset
description: |
   Returns ``true`` if all elements of the first set appear in the
   second set, including when the first set equals the second set; i.e.
   not a `strict subset <http://en.wikipedia.org/wiki/Subset>`_.
   Accepts exactly two argument expressions.
---
name: :expression:`$anyElementTrue`
file: /reference/operator/aggregation/anyElementTrue
description: |
   Returns ``true`` if *any* elements of a set evaluate to ``true``;
   otherwise, returns ``false``. Accepts a single argument expression.
---
name: :expression:`$allElementsTrue`
file: /reference/operator/aggregation/allElementsTrue
description: |
   Returns ``true`` if *no* element of a set evaluates to ``false``,
   otherwise, returns ``false``. Accepts a single argument expression.
...
