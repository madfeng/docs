title:
  text: Create an array of documents.
  character: "`"
stepnum: 1
ref: create-an-array
pre: |
   Define a variable ``mydocuments`` that holds an array of documents to
   insert.
action:
  language: javascript
  code: |
    var mydocuments =
        [
          {
            item: "ABC2",
            details: { model: "14Q3", manufacturer: "M1 Corporation" },
            stock: [ { size: "M", qty: 50 } ],
            category: "clothing"
          },
          {
            item: "MNO2",
            details: { model: "14Q3", manufacturer: "ABC Company" },
            stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 }, { size: "L", qty: 1 } ],
            category: "clothing"
          },
          {
            item: "IJK2",
            details: { model: "14Q2", manufacturer: "M5 Corporation" },
            stock: [ { size: "S", qty: 5 }, { size: "L", qty: 1 } ],
            category: "houseware"
          }
        ];
---
title:
  text: Insert the documents.
  character: "`"
stepnum: 2
ref: insert-documents
action:
  - pre: |
      Pass the ``mydocuments`` array to the
      :method:`db.collection.insert()` to perform a bulk insert.
    language: javascript
    code: |
      db.inventory.insert( mydocuments );
  - pre: |
      The method returns a :method:`BulkWriteResult` object with the
      status of the operation. A successful insert of the documents
      returns the following object:
    language: javascript
    code: |
      BulkWriteResult({
         "writeErrors" : [ ],
         "writeConcernErrors" : [ ],
         "nInserted" : 3,
         "nUpserted" : 0,
         "nMatched" : 0,
         "nModified" : 0,
         "nRemoved" : 0,
         "upserted" : [ ]
      })
post: |
  The :data:`~BulkWriteResult.nInserted` field specifies the number of
  documents inserted. If the operation encounters an error, the
  :method:`BulkWriteResult` object will contain information regarding
  the error.

  The inserted documents will each have an ``_id``
  field added by MongoDB.
...
