title:
  text: Use update operators to change field values.
  character: "`"
stepnum: 1
ref: update-field-values
action:
  - pre: |
      For the document with ``item`` equal to ``"MNO2"``, use
      the :update:`$set` operator to update the ``category`` field and
      the ``details`` field to the specified values and the
      :update:`$currentDate` operator to update the field
      ``lastModified`` with the current date.
    language: javascript
    code: |
      db.inventory.update(
          { item: "MNO2" },
          {
            $set: {
              category: "apparel",
              details: { model: "14Q3", manufacturer: "XYZ Company" }
            },
            $currentDate: { lastModified: true }
          }
      )
  - pre: |
      The update operation returns a :method:`WriteResult` object which
      contains the status of the operation. A successful update of the
      document returns the following object:
    language: javascript
    code: |
      WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
post: |
  The :data:`~WriteResult.nMatched` field specifies the number of
  existing documents matched for the update, and
  :data:`~WriteResult.nModified` specifies the number of
  existing documents modified.
---
title:
  text: Update an embedded field.
  character: "`"
stepnum: 2
pre: |
  To update a field within an embedded document, use the :term:`dot
  notation`. When using the dot notation, enclose the whole dotted
  field name in quotes.
ref: update-embedded-field
action:
  - pre: |
      The following updates the ``model`` field within the embedded
      ``details`` document.
    language: javascript
    code: |
      db.inventory.update(
        { item: "ABC1" },
        { $set: { "details.model": "14Q2" } }
      )
  - pre: |
      The update operation returns a :method:`WriteResult` object which
      contains the status of the operation. A successful update of the
      document returns the following object:
    language: javascript
    code: |
      WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
---
title:
  text: Update multiple documents.
  character: "`"
stepnum: 3
pre: |
  By default, the :method:`~db.collection.update()` method updates a
  single document. To update multiple documents, use the ``multi``
  option in the :method:`~db.collection.update()` method.
ref: update-multiple-documents
action:
  - pre: |
      Update the ``category`` field to ``"apparel"`` and update the
      ``lastModified`` field to the current date for *all* documents
      that have ``category`` field equal to ``"clothing"``.
    language: javascript
    code: |
      db.inventory.update(
         { category: "clothing" },
         {
           $set: { category: "apparel" },
           $currentDate: { lastModified: true }
         },
         { multi: true }
      )
  - pre: |
      The update operation returns a :method:`WriteResult` object which
      contains the status of the operation. A successful update of the
      document returns the following object:
    language: javascript
    code: |
       WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })
...