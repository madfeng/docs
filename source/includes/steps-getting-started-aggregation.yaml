title: Count the number of documents grouped by a field.
stepnum: 1
ref: count-group-results
pre: |
  Use the :pipeline:`$group` stage to group by a specified key. In the
  :pipeline:`$group` stage, specify the group by key in the ``_id``
  field. :pipeline:`$group` accesses fields by the field path, which is
  the field name prefixed by a dollar sign ``$``. The
  :pipeline:`$group` stage can use :manual:`accumulators
  </meta/aggregation-quick-reference/#group-operators>` to perform
  calculations for each group.
action:
  - pre: |
      The following example groups the documents in the ``inventory``
      collection by the ``category`` field and uses the :group:`$sum`
      accumulator to count the documents for each group.
    language: javascript
    code: |
      db.inventory.aggregate(
         [
           { $group: { _id: "$category", count: { $sum: 1 } } }
         ]
      )
  - pre: |
      The result set consists of the following documents:
    language: javascript
    code: |
       { "_id" : "houseware", "count" : 2 }
       { "_id" : "clothing", "count" : 4 }
---
title: Filter and group documents.
stepnum: 2
ref: filter-and-group
pre: |
  Use the :pipeline:`$match` stage to filter documents.
  :pipeline:`$match` conditions use the MongoDB :doc:`query syntax
  </query>`.
action:
  - pre: |
      The following pipeline uses :pipeline:`$match` to query the
      ``inventory`` documents for documents with ``category`` equal to
      ``"clothing"``.
      Then the :pipeline:`$group` stage groups the matching documents
      by the ``details.manufacturer`` field and calculates the count.
    language: javascript
    code: |
      db.inventory.aggregate(
         [
           { $match: { category: "clothing" } },
           { $group: { _id: "$details.manufacturer" , count: { $sum: 1 } } }
         ]
      )
  - pre: |
      The result set consists of the following documents:
    language: javascript
    code: |
      { "_id" : "ABC Company", "count" : 1 }
      { "_id" : "M1 Corporation", "count" : 1 }
      { "_id" : "XYZ Company", "count" : 2 }
---
title: Unwind an array to group by a field in the array.
stepnum: 3
ref: unwind-array
pre: |
  Use the :pipeline:`$unwind` stage to deconstruct the array element
  and output to the next stage a document for each element in the
  array. Each output document is the input document with the value of
  the array field replaced by the element.
  :pipeline:`$unwind` stage takes a field path, which is the field name
  prefixed by a dollar sign ``$``.
action:
  - pre: |
      The following example first unwinds the ``stock`` array, and then
      groups by the ``stock.size`` field.
    language: javascript
    code: |
      db.inventory.aggregate(
         [
           { $unwind: "$stock" },
           { $group: { _id: "$stock.size", items: { $push: "$item" } } }
         ]
      )
  - pre: |
      The result set consists of the following documents:
    language: javascript
    code: |
      { "_id" : "L", "items" : [ "MNO2", "IJK2", "BE10" ] }
      { "_id" : "M", "items" : [ "ABC1", "ABC2", "MNO2", "ZYT1" ] }
      { "_id" : "S", "items" : [ "ABC1", "MNO2", "IJK2", "ZYT1" ] }
...
