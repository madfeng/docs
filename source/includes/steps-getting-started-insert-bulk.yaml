title:
  text: Initialize a ``Bulk`` operations builder.
  character: "`"
stepnum: 1
pre: |
  Initialize a :method:`Bulk` operations builder for the collection
  ``inventory``.
ref: initialize-bulk
action:
  language: javascript
  code: |
     var bulk = db.inventory.initializeUnorderedBulkOp();
post: |
  The operation returns an unordered operations builder which maintains
  a list of operations to perform. Unordered operations means that
  MongoDB can execute in parallel as well as in nondeterministic order.
  If an error occurs during the processing of one of the write
  operations, MongoDB will continue to process remaining write
  operations in the list.

  You can also initialize an ordered operations builder; see
  :method:`db.collection.initializeOrderedBulkOp()` for details.
---
title:
  text: Add insert operations to the ``bulk`` object.
  character: "`"
stepnum: 2
pre: |
   Add two insert operations to the ``bulk`` object using the
   :method:`Bulk.insert()` method.
ref: add-operations
action:
  language: javascript
  code: |
      bulk.insert(
         {
           item: "BE10",
           details: { model: "14Q2", manufacturer: "XYZ Company" },
           stock: [ { size: "L", qty: 5 } ],
           category: "clothing"
         }
      );
      bulk.insert(
         {
           item: "ZYT1",
           details: { model: "14Q1", manufacturer: "ABC Company"  },
           stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 } ],
           category: "houseware"
         }
      );
---
title:
  text: Execute the bulk operation.
  character: "`"
stepnum: 3
ref: execute-bulk-operation
action:
  - pre: |
      Call the :method:`~Bulk.execute()` method on the ``bulk`` object
      to execute the operations in its list.
    language: javascript
    code: |
      bulk.execute();
  - pre : |
      The method returns a :method:`BulkWriteResult` object with the
      status of the operation. A successful insert of the documents
      returns the following object:
    language: javascript
    code: |
       BulkWriteResult({
          "writeErrors" : [ ],
          "writeConcernErrors" : [ ],
          "nInserted" : 2,
          "nUpserted" : 0,
          "nMatched" : 0,
          "nModified" : 0,
          "nRemoved" : 0,
          "upserted" : [ ]
       })
post: |
  The :data:`~BulkWriteResult.nInserted` field specifies the number of
  documents inserted. If the operation encounters an error, the
  :method:`BulkWriteResult` object will contain information regarding
  the error.
...
